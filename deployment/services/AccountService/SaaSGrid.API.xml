<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SaaSGrid.API</name>
    </assembly>
    <members>
        <member name="T:Apprenda.SaaSGrid.AccessException">
            <summary>
            This exception is the base class for all of the access violation exceptions - exceptions that are thrown when a request is 
            attempted that the current context does not have permission to execute (i.e. no access to the application).
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.AccessException.#ctor(System.String,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance of this exception that is tied to a requester
            </summary>
            <param name="message">The message the exception will contain</param>
            <param name="requesterId">The entity id of the requesting party that caused the access exception.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.AccessException.#ctor(System.String,System.Exception,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance of this exception that is tied to a requester
            </summary>
            <param name="message">The message the exception will contain</param>
            <param name="innerException">An inner access or security exception.</param>
            <param name="requesterId">The entity id of the requesting party that caused the access exception.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.AccessException.RequesterId">
            <summary>
            Gets the id of the entity that caused the access violation with their request.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Addons.AddonBase">
            <summary>
            The class from which all Apprenda Add-Ons should be derived from.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Addons.AddonBase.Provision(Apprenda.SaaSGrid.Addons.AddonProvisionRequest)">
            <summary>
            Provisions an instance of this add-on.
            </summary>
            <param name="request">A request object encapsulating all the parameters available to provision an add-on.</param>
            <returns>A <see cref="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult"/> object containing the results of the operation as well as the data needed to connect to / use the newly provisioned instance.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Addons.AddonBase.Deprovision(Apprenda.SaaSGrid.Addons.AddonDeprovisionRequest)">
            <summary>
            De-provisions an instance of this add-on.
            </summary>
            <param name="request">A request object encapsulating all the parameters available to deprovision an existing add-on instance.</param>
            <returns>An <see cref="T:Apprenda.SaaSGrid.Addons.OperationResult"/> object containing the results of the operation.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Addons.AddonBase.Test(Apprenda.SaaSGrid.Addons.AddonTestRequest)">
            <summary>
            Tests the add-on.
            </summary>
            <param name="request">A request object encapsulating all the parameters available to test the Addon.</param>
            <returns>An <see cref="T:Apprenda.SaaSGrid.Addons.OperationResult"/> object containing the results of the test.</returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonManifest.SerializableParameterList">
            <summary>
            This member is exposed for serialization only. Use Parameters instead.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Addons.AddonParameter">
            <summary>
            Options provided by the developer to be used upon provisioning of the account
            
            They may fulfill a contract defined by the addon developer, or may be entirely ad-hoc
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonParameter.Key">
            <summary>
            Unique identifier for the parameter (within a given addon action)
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonParameter.Value">
            <summary>
            Developer provided parameter value
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Addons.AddonTestRequest">
            <summary>
            The class used to construct an Addon testing request.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonTestRequest.Manifest">
            <summary>
            The manifest for the add-on to provision.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonTestRequest.DeveloperOptions">
            <summary>
            Optional parameters given by the developer who requested the provisioned instance.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonTestRequest.DeveloperParameters">
            <summary>
            List of developer parameters given by the developer. 
            
            May be from a set of possible parameters defined by the addon creator, or may be ad-hoc
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Addons.AddonDeprovisionRequest">
            <summary>
            The class used to construct an Addon deprovisioning request.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonDeprovisionRequest.Manifest">
            <summary>
            The manifest for the add-on to deprovision.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonDeprovisionRequest.DeveloperOptions">
            <summary>
            The optional parameters given by the developer who requested the provisioned instance. 
            This will only be available if they were used during a provisioning request, otherwise
            this property will be null.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonDeprovisionRequest.ConnectionData">
            <summary>
            A string indicating how to connect to / use the instance of the add-on. This is the value 
            that was returned from the original call to Provision.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonDeprovisionRequest.DeveloperParameters">
            <summary>
            List of developer parameters given by the developer. 
            
            May be from a set of possible parameters defined by the addon creator, or may be ad-hoc
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Addons.OperationResult">
            <summary>
            An object used to store the results of an operation.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.OperationResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether or not the operation was successful.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.OperationResult.EndUserMessage">
            <summary>
            Gets or sets a message to display to the user after the operation is complete.  This can be a success or failure message.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult">
            <summary>
            An object used to store the results of the provision add-on operation.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult.Success(System.String)">
            <summary>
            Creates a new <see cref="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult"/> instance with the given connection data and sets IsSuccess = true.
            </summary>
            <param name="connectionData">The connection data.</param>
            <returns>A new <see cref="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult"/> instance with the given connection data and sets IsSuccess = true.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult.Failure(System.String)">
            <summary>
            Creates a new <see cref="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult"/> instance with the given end user message and sets IsSuccess = false.
            </summary>
            <param name="endUserMessage">The failure message to show to the user.</param>
            <returns>A new <see cref="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult"/> instance with the given end user message and sets IsSuccess = false.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult"/> instance with the given connection data. Using this constructor will set IsSuccess to true.
            </summary>
            <param name="connectionData">The connection data.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Constructs a new <see cref="T:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult"/> instance with the given properties.
            </summary>
            <param name="connectionData">The connection data.</param>
            <param name="isSuccess">A value indicating whether or not the add-on was provisioned successfully.</param>
            <param name="endUserMessage">A message to show to the user in the case of failure.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.ProvisionAddOnResult.ConnectionData">
            <summary>
            Gets the connection data returned by the provision add-on operation.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Addons.AddonProvisionRequest">
            <summary>
            The class used to construct an Addon provisioning request.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonProvisionRequest.Manifest">
            <summary>
            The manifest for the add-on to provision.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonProvisionRequest.DeveloperOptions">
            <summary>
            Optional parameters given by the developer who requested the provisioned instance.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Addons.AddonProvisionRequest.DeveloperParameters">
            <summary>
            List of developer parameters given by the developer. 
            
            May be from a set of possible parameters defined by the addon creator, or may be ad-hoc
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ApplicationContext">
            <summary>
            A scoping construct that allows for the impersonation of other SaaSGrid applications.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.#cctor">
            <summary>
            Initializes the application context to have a root context based on the values of the
            Request Context.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.#ctor(Apprenda.SaaSGrid.Topology.SaaSGridGuid,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates a new <see cref="T:Apprenda.SaaSGrid.ApplicationContext"/> scope and sets it as the current
            </summary>
            <param name="applicationId">The id of the application to impersonate</param>
            <param name="versionId">The id of the application version to impersonate</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the supplied application id is  null or empty</exception>
        </member>
        <member name="P:Apprenda.SaaSGrid.ApplicationContext.ApplicationId">
            <summary>
            Gets the id of the currently impersonated application.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ApplicationContext.VersionId">
            <summary>
            Gets the id of the currently impersonated application version
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ApplicationContext.IsSslEnforced">
            <summary>
            Gets the SSL enforcement setting for the currently impresonated application
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.GetCustomers(System.Int32,System.Int32)">
            <summary>
            Gets the list of customers for this application
            </summary>
            <param name="pageSize">Number of records per page.</param>
            <param name="pageNumber">The current page number to retrieve</param>
            <returns></returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.ApplicationContext.Current">
            <summary>
            Gets the thread's current <see cref="T:Apprenda.SaaSGrid.ApplicationContext"/> impersonation, or <c>null</c> if executing
            against the current executing application
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.Dispose">
            <summary>
            Disposes the current <see cref="T:Apprenda.SaaSGrid.ApplicationContext"/>.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.AddRuntimeSecurable(Apprenda.SaaSGrid.RuntimeSecurable)">
            <summary>
            Creates a new runtime securable using the provided information.
            </summary>
            <param name="securable">Information describing the runtime securable to create.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.IsRuntimeSecured(System.String)">
            <summary>
            Determines if the item identified by the inputted name
            has been secured at runtime.
            </summary>
            <param name="name">The name to check if it is has been secured.</param>
            <returns>
            	<c>true</c> if the item is secured; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.RemoveRuntimeSecurable(System.String)">
            <summary>
            Removes the runtime secured item identified by the provided name.
            </summary>
            <param name="securableName">Name of the runtime securable to remove.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.GetSecurables">
            <summary>
            Gets the securables associated with the current application.
            </summary>
            <returns>The collection of securables for the current application.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.GetStaticSecurables">
            <summary>
            Gets the static securables associated with the current application.
            </summary>
            <returns>The collection of static securables for the current application.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.GetRuntimeSecurables">
            <summary>
            Gets the runtime securables associated with the current application.
            </summary>
            <returns>The collection of runtime securables for the current application.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.LocateWindowsServiceInstances(System.String)">
            <summary>
            Gets the location information for the indicated windows service.
            </summary>
            <param name="serviceName">The name of the windows service to be located.</param>
            <returns>The collection of location information for the deployed instances of the indicated windows service.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when attempting to use this functionality with the Remote API.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.LocateLinuxServiceInstances(System.String)">
            <summary>
            Gets the location information for the indicated Linux service.
            </summary>
            <param name="serviceName">The name of the Linux service to be located.</param>
            <returns>The collection of location information for the deployed instances of the indicated windows service.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when attempting to use this functionality with the Remote API.</exception>
        </member>
        <member name="P:Apprenda.SaaSGrid.ApplicationContext.UserHasMultipleEntitlements">
            <summary>
            Returns a boolean indicating if the user has multiple entitlements for the current application.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to retrieve this information when impersonating a different application.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ApplicationContext.TenantSelectionPageUrl(System.Uri)">
            <summary>
            Returns the <see cref="T:System.Uri"/> to which the user can be redirected to switch as which tenant they will execute as for the current application.
            Note there must be an ambient HttpContext.
            </summary>
            <param name="returnAddress">The address to which the user should be returned after selecting the tenant as which they wish to execute.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to retrieve this information when impersonating a different application, or when there is no active HttpContext.</exception>
        </member>
        <member name="T:Apprenda.SaaSGrid.ContextSnapshot">
            <summary>
            Provides storage and behavior for working with SaaSGrid context meta-information
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ContextSnapshot.ContextScope">
            <summary>
            A disposable context handle
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ContextSnapshot.EstablishContext">
            <summary>
            Reestablishes an execution context based on the snapshot's metadata
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ContextSnapshot.Acquire">
            <summary>
            Acquire a new <see cref="T:Apprenda.SaaSGrid.ContextSnapshot"/> based on the currently available execution context
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.ContactDetailCreationRequest">
            <summary>
            Provides a means to create a single item of data of a contact's details (phone, email, etc).
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.IContactDetail"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.ContactText">
            <summary>
            Gets/sets the contact detail text/value.
            </summary>
            <remarks>
            <para>
            The <c>ContactText</c> property should be used to display
            the value for a specific detail such as the phone number, or 
            email.
            </para>
            </remarks>
            <value>The contact detail text/value.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.ContactLabel"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.Type"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.ContactLabel">
            <summary>
            Gets/sets the contact detail label.
            </summary>
            <remarks>
            <para>
            The <c>ContactLabel</c> property should be used to display a friendly
            label of what the contact detail is like.
            </para>
            </remarks>
            <value>The contact detail label.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.ContactText"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.Type"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.Type">
            <summary>
            Gets/sets the contact detail type.
            </summary>
            <remarks>
            <para>
            The <c>Type</c> property should be used if you programmatically want
            to do something based on the type of detail.
            </para>
            <para>
            The currently supported types are:
            <list type="bullet">
            <item>PlainText</item>
            <item>EmailAddress</item>
            <item>ScreenName</item>
            <item>JabberScreenName</item>
            <item>GTalkScreenName</item>
            <item>AOLScreenName</item>
            <item>MSNScreenName</item>
            <item>YahooScreenName</item>
            <item>USMobileNumber</item>
            <item>USFaxNumber</item>
            <item>USPhoneNumber</item>
            </list>
            </para>
            </remarks>
            <value>The contact detail text/value.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.ContactLabel"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactDetailCreationRequest.ContactText"/>
        </member>
        <member name="T:Apprenda.SaaSGrid.ContactInfoCreationRequest">
            <summary>
            Provides a means to create contact information.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Label">
            <summary>
            Gets/sets the label (user-friendly name) of the contact location.
            </summary>
            <remarks>
            Every contact info has a required label that helps users identify the contact info. Samples of Labels 
            could be 'Home' and 'Work'.
            </remarks>
            <value>The label.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address">
            <summary>
            Gets/sets the street address for the contact location.
            </summary>
            <remarks>
            This property only retrieves the street address of the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/> as well.
            </remarks>
            <value>The address.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City">
            <summary>
            Gets/sets the city portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the city portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/> as well.
            </remarks>
            <value>The city.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State">
            <summary>
            Gets/sets the state portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the state portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/> as well.
            </remarks>
            <value>The state.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country">
            <summary>
            Gets/sets the country portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the country portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/> as well.
            </remarks>
            <value>The country.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Zip">
            <summary>
            Gets/sets the postal code portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the postal code portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/>, <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/> and 
            <see cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/>
            </remarks>
            <value>The postal code.</value>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.ContactInfoCreationRequest.Country"/>
        </member>
        <member name="T:Apprenda.SaaSGrid.IWindowsServiceLocation">
            <summary>
            The information stored about the location of a windows service hosted on the platform
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IWindowsServiceLocation.ServiceName">
            <summary>
            The name of the windows service
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IWindowsServiceLocation.Host">
            <summary>
            The host on which the instance of the windows service resides
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IWindowsServiceLocation.Ports">
            <summary>
            The list of ports the windows service has registered for use
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ILinuxServiceLocation">
            <summary>
            The information stored about the location of a Linux service hosted on the platform
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ILinuxServiceLocation.ServiceName">
            <summary>
            The name of the Linux service
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ILinuxServiceLocation.Host">
            <summary>
            The host on which the instance of the Linux service resides
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ILinuxServiceLocation.Ports">
            <summary>
            The list of ports the Linux service has registered for use
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.RoleCreationRequest">
            <summary>
            Captures information to create a role for the tenant.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.RoleCreationRequest.Name">
            <summary>
            Gets/sets the name of the role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.RoleCreationRequest.Description">
            <summary>
            Gets/set additional information describing the role.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.RuntimeSecurable">
            <summary>
            Captures information about a runtime securable.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.RuntimeSecurable.Name">
            <summary>
            Name of the securable, should be uniquely identifying.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.RuntimeSecurable.Description">
            <summary>
            Additional information describing the securable.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.RuntimeSecurable.DisplayName">
            <summary>
            A name to display the securable as to the end user.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.RuntimeSecurable.Category">
            <summary>
            The category to which the securable belongs.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantMeter">
            <summary>
            Describes a meter
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantMeter.ParentSubscriptionId">
            <summary>
            The Id of the subscription the meter belongs to.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantMeter.ReferenceFeatureName">
            <summary>
            The name of the feature the meter is related to.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantMeter.IsExhausted">
            <summary>
            Indicates if the meter is exhausted.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantOnBoardRequest">
            <summary>
            Captures the information required to create a new tenant in the SaaSGrid system.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.CompanyName">
            <summary>
            Name of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.CompanyAlias">
            <summary>
            Alias for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.Address">
            <summary>
            Street address of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.City">
            <summary>
            City of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.State">
            <summary>
            State of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.Country">
            <summary>
            Country of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.Zip">
            <summary>
            Zip code of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.PhoneNumber">
            <summary>
            Phone number of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.FirstName">
            <summary>
            First name of the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.LastName">
            <summary>
            Last name of the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.EmailAddress">
            <summary>
            Email address of the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.Password">
            <summary>
            Password for the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantOnBoardRequest.InvitationToken">
            <summary>
            Invitation token for the company, if required.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantRole">
            <summary>
            Captures information describing a role for the tenant.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantRole.Name">
            <summary>
            Gets/sets the name of the role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantRole.Description">
            <summary>
            Gets/set additional information describing the role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantRole.Id">
            <summary>
            Id of the role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantRole.Manager">
            <summary>
            The user that is the manager of the role.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.GetUserMembers">
            <summary>
            The users that are a member of the role.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.GetRoleMembers">
            <summary>
            The roles that are child roles of the role.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.GetSecurables">
            <summary>
            The securables to which the role is granted access.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddChildRole(System.Guid)">
            <summary>
            Associates one role as the child of another role.
            Any action the parent role is permitted to perform, the child role will also have access to.
            </summary>
            <param name="childRoleId">The Id of the child role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddChildRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Associates one role as the child of another role.
            Any action the parent role is permitted to perform, the child role will also have access to.
            </summary>
            <param name="childRole">The child role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.RemoveChildRole(System.Guid)">
            <summary>
            Removes the child role.
            </summary>
            <param name="roleId">The Id of the role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.RemoveChildRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Removes the child role.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.RemoveUser(System.Guid)">
            <summary>
            Removes the user from the role.
            </summary>
            <param name="userId">The Id of the user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.RemoveUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Removes the user from the role.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddUser(System.Guid)">
            <summary>
            Associates the user with the specified role.
            Any action the role is permitted to perform, the user will be granted access to.
            </summary>
            <param name="userId">The Id of the user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Associates the user with the specified role.
            Any action the role is permitted to perform, the user will be granted access to.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddSecurable(Apprenda.SaaSGrid.IApplicationVersionSecurable)">
            <summary>
            Grants access to the specified securable to the role.
            </summary>
            <param name="securable">The securable.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddSecurable(System.String,System.Boolean,System.Guid)">
            <summary>
            Grants access to the specified securable to the role.
            </summary>
            <param name="securableName">The name of the securable.</param>
            <param name="isRuntimeSecurable">Indication if it is a runtime securable.</param>
            <param name="versionId">The application version Id the securable is for.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddSecurable(System.String,System.Boolean,System.String)">
            <summary>
            Grants access to the specified securable to the role.
            </summary>
            <param name="securableName">The name of the securable.</param>
            <param name="isRuntimeSecurable">Indication if it is a runtime securable.</param>
            <param name="appAlias">The application alias the securable is for. The securable will be associated with the current published version of this app.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.AddSecurable(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Grants access to the specified securable to the role.
            </summary>
            <param name="securableName">The name of the securable.</param>
            <param name="isRuntimeSecurable">Indication if it is a runtime securable.</param>
            <param name="appAlias">The application alias the securable is for.</param>
            <param name="versionAlias">The application version alias the securable is for.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.RemoveSecurable(System.Guid)">
            <summary>
            Removes the association between a role and a securable.
            </summary>
            <param name="roleSecurableId">The Id of the association between the role and the securable.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantRole.RemoveSecurable(Apprenda.SaaSGrid.ITenantSecurable)">
            <summary>
            Removes the association between a role and a securable.
            </summary>
            <param name="securable">The secured item.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantSecurable">
            <summary>
            Defines a securable that has been secured for a role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSecurable.Id">
            <summary>
            The Id of the relationship between the securable and the role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSecurable.VersionId">
            <summary>
            The application version Id.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSecurable.SecurableName">
            <summary>
            The name of the securable that is secured.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSecurable.IsRuntime">
            <summary>
            Indication if it is a runtime securable.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantSubscription">
            <summary>
            Captures information describing a subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.Id">
            <summary>
            Id of the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.ProviderId">
            <summary>
            The Id of the provider of the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.AutoRenew">
            <summary>
            Indicates if the subscription is auto-renewed or not.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SourceLocator">
            <summary>
            Locator of the source.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SourceVersionId">
            <summary>
            The Id of the application version the subscription is for.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SourceOfferingId">
            <summary>
            The Id of the offering that the subscription is an instance of.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SourcePlanId">
            <summary>
            The Id of the plan that the subscription is an instance of.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SourcePlanName">
            <summary>
            The name of the plan the subscription is an instance of.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SourceEditionName">
            <summary>
            The name of the edition the subscription is an instance of.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SourceApplicationAlias">
            <summary>
            The alias of the application the subscription is to.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.Name">
            <summary>
            The name of the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.Description">
            <summary>
            Additional description of the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.CreatedDate">
            <summary>
            The date the subscription was crated.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.NextRenewalDate">
            <summary>
            Indicates the next time the subscription will be renewed.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.LastRenewalDate">
            <summary>
            Indicates the last time the subscription was renewed.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.TerminationDate">
            <summary>
            Indicates when the subscription will be terminated.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.Model">
            <summary>
            The type of subscription model that the subscription is.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.Status">
            <summary>
            The current status of the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SubscriptionItems">
            <summary>
            The list of subscription items.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.SubscriptionMeters">
            <summary>
            The list of meters for the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.AssignedTo">
            <summary>
            The user the subscription is assigned to.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.Cost">
            <summary>
            The cost of the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.GroupId">
            <summary>
            The Id of the group to which the subscription belongs.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.GroupName">
            <summary>
            The name of the group to which the subscription belongs.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscription.IsVacant">
            <summary>
            Indicates if the subscription is currently unassigned.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantSubscription.Assign(System.Guid)">
            <summary>
            Assigns the specified subscription to the specified user.
            </summary>
            <param name="userId">The Id of the user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantSubscription.Assign(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Assigns the specified subscription to the specified user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantSubscription.Revoke">
            <summary>
            Removes the assignment of the specified subscription.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantSubscriptionGroup">
            <summary>
            Captures information describing a subscription group.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionGroup.Id">
            <summary>
            Id of the group.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionGroup.Name">
            <summary>
            Name of the group.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionGroup.AllocatedCount">
            <summary>
            Number of accounts in the group that are allocated to a user.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionGroup.VacantCount">
            <summary>
            Number of accounts in the group that are not allocated to a user.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionGroup.Profile">
            <summary>
            The profile of the subscription group.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantSubscriptionGroup.GetSubscriptions(System.Int32,System.Int32)">
            <summary>
            Gets the subscriptions associated with the a subscription group.
            </summary>
            <param name="pageSize">A non-negative number defining the number of users that should be returned.</param>
            <param name="pageNumber">A page number that is 1 or larger.</param>
            <returns>A collection of subscriptions associated with the subscription group.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantSubscriptionGroup.AssignSubscriptions(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Assigns the subscriptions from the specified group of subscriptions
            to the provided list of users at random.
            </summary>
            <param name="userIds">The list of User's Ids to assign the subscriptions to.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantSubscriptionGroup.UnassignSubscriptions(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Unassigns subscriptions in the specified group from the provided list of users.
            </summary>
            <param name="userIds">The list of User's Ids to unassign subscriptions from.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantSubscriptionItem">
            <summary>
            Describes subscription item details.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.Description">
            <summary>
            Additional information about the item.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.Id">
            <summary>
            Id of the item.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.Name">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.Optional">
            <summary>
            Indication if the item is optional.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.Price">
            <summary>
            Cost of the item.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.ReferenceFeatureName">
            <summary>
            Name of the feature the item is related to.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.IsReferenceComponentHidden">
            <summary>
            Indication if the item is intended to be hidden.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionItem.IsOneTimeCharge">
            <summary>
            Indication if the item is a one time charge.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantSubscriptionModel">
            <summary>
            Describes the model of a subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionModel.Price">
            <summary>
            The cost of the subscription.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantSubscriptionModel.Renewable">
            <summary>
            Indication if it is renewable.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.IApplicationVersionSecurable">
            <summary>
            Captures information describing the securables for an application version.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IApplicationVersionSecurable.Name">
            <summary> 
            The name of the securable.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IApplicationVersionSecurable.DisplayName">
            <summary>
            The display name of the securable.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IApplicationVersionSecurable.Description">
            <summary>
            The description of the securable.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IApplicationVersionSecurable.Category">
            <summary>
            The category the securable is in.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IApplicationVersionSecurable.IsRuntimeSecurable">
            <summary>
            Indication if it is a runtime securable.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.IApplicationVersionSecurable.VersionId">
            <summary>
            Indication of the application version the securable is for.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.CompanyName">
            <summary>
            Name of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.CompanyAlias">
            <summary>
            Alias for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.Address">
            <summary>
            Street address of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.City">
            <summary>
            City of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.State">
            <summary>
            State of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.Country">
            <summary>
            Country of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.Zip">
            <summary>
            Zip code of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.PhoneNumber">
            <summary>
            Phone number of the primary location of the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.FirstName">
            <summary>
            First name of the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.LastName">
            <summary>
            Last name of the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.EmailAddress">
            <summary>
            Email address of the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.Password">
            <summary>
            Password for the SaaSGrid administrator for the company.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantOnBoardRequest.InvitationToken">
            <summary>
            Invitation token for the company, if required.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.TenantSubscriptionStatus">
            <summary>
            Describes the status of a subscription.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.UserCreationRequest">
            <summary>
            Represents a user within SaaSGrid.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Apprenda.SaaSGrid.ITenantUser"/> interface is a contract that defines the data and behavior available for a SaaSGrid user. 
            The data is read only. Only Tenants have the ability to modify their profiles through the SaaSGrid Tenant Portal. 
            We encourage you to take advantage of this data and use it in your applications where appropriate, either for 
            personalization or data capture.
            </para>
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.UserContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.IsSaaSGridUser">
            <summary>
            Gets/sets the flag that determines if the current user is a SaaSGrid user.
            </summary>
            <remarks>
            <para>
            SaaSGrid makes a clear distinction on whether a user is a SaaSGrid user, or a user just
            being a metadata user defined in the System. The difference between the two is that
            SaaSGrid users are allowed to log in and use applications on SaaSGrid since they get 
            SaaSGrid credentials and regular users are just users defined in the system for the purpose
            of referencing them through the applications but they DONT have credentials to log in to
            SaaSGrid.
            </para>
            </remarks>s
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.FirstName">
            <summary>
            Gets/sets the user's defined first name
            </summary>
            <value>The users first name.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.MiddleName">
            <summary>
            Gets/sets the user's defined middle name
            </summary>
            <remarks>
            Some cultures use two names as their identifying names so keep that in mind when you choose to use this property. 
            </remarks>
            <value>The middle name of the user.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.LastName">
            <summary>
            Gets/sets the user's defined last name
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.Suffix">
            <summary>
            Gets/sets the user's defined suffix
            </summary>
            <remarks>
            Useful for suffix capturing, particularly when suffix's are customarily used.
            <example>
            For Example:
            <list type="bullet">
            <item>Pete Sampras, Jr.</item>
            <item>Pete Sampras, Sr.</item>
            <item>Joseph Felds, III.</item>
            <item>Henry Hudson, Phd.</item>
            <item>James Cohen, Md.</item>
            </list>
            </example>
            where 'Jr.', 'Sr.', etc. are suffixes
            </remarks>
            <value>The suffix.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.Prefix">
            <summary>
            Gets/sets the prefix of the user.
            </summary>
            <remarks>
            Useful for prefix capturing, particularly when prefix's are customarily used.
            <example>
            For Example:
            <list type="bullet">
            <item>Mr. Jorge Bargas</item>
            <item>Mrs. Jennifer Lane</item>
            <item>Miss. Maria Smith</item>
            </list>
            </example>
            where 'Mr.', 'Mrs.', and 'Miss' are prefixes
            </remarks>
            <value>The prefix.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.Email">
            <summary>
            Gets/sets the email address of the user. This is a surrogate unique key in SaaSGrid.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserCreationRequest.Description">
            <summary>
            Gets/sets an auxiliary description of the user.
            </summary>
            <remarks>
            This property reflects the 'Description' configured via the Tenant Portal, which is generally used to capture 
            auxiliary information about the user.
            </remarks>
            <value>The description.</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.DispatchScope.BroadcastScope">
            <summary>
            Creates a scope to broadcast to all nodes on the current cloud.
            </summary>
            <returns>A handle to the created scope</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.DispatchScope.UnicastScope">
            <summary>
            Creates a scope that suppresses any targeted or broadcast scope
            </summary>
            <returns>A handle to the created scope</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.DispatchScope.CloudTargetedScope(System.String)">
            <summary>
            Creates a scope to call a service on a particular cloud.
            </summary>
            <returns>A handle to the created scope</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.DispatchScope.HostTargetedScope(System.String)">
            <summary>
            Creates a scope to call a service on a particular host.
            </summary>
            <returns>A handle to the created scope</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.DispatchScope.CloudTargetedBroadcastScope(System.String)">
            <summary>
            Creates a scope to broadcast to all nodes on a particular cloud.
            </summary>
            <returns>A handle to the created scope</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.DispatchScope.ApprendaVersionTargetedScope(System.Version)">
            <summary>
            Creates a scope to call a service on a host of a particular Apprenda version.
            </summary>
            <returns>A handle to the created scope</returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.Extensions.DTO.MonitoringConnectionDetailsDTO.ConnectionType">
            <summary>
            Label for the connection the service is telling us about
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Extensions.IDeveloperPortalMonitoringExtensionService.GetConnectionInfo(Apprenda.SaaSGrid.Extensions.DTO.MonitoringConnectionDetailsRequestDTO)">
            <summary>
            Returns the monitoring connection information required by a monitoring extension proxy. The connectin information
            can be retrieved from the Developer Portal REST API.
            </summary>
            <param name="detailsRequest">An instance describing the component for which connection information is being requested.</param>
            <returns>Collection of Monitoring Connection details that this component returns</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Extensions.MonitoringExtensionBase">
            <summary>
            An implementation of <see cref="T:Apprenda.SaaSGrid.Extensions.IDeveloperPortalMonitoringExtensionService"/> that will maintain compatibility with implementors in future versions of Apprenda.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.IApplicationPropertiesRetriever">
            <summary>
            This retriever is used to grab application specific properties that 
            consuming applications will need to know at runtime.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICache.Find``1(System.String)">
            <summary>
            Searches the cache for the object with the provided key. If the object is found, it is returned. If the object is not found
            and 'T' is not a primitive or a struct, <c>null</c> is returned. If 'T' is a value type, a ValueTypeCacheMissException is thrown since
            <c>null</c> is incompatible with value types.
            </summary>
            <typeparam name="T">The type of the object in the cache</typeparam>
            <param name="key">The key to search for</param>
            <returns>An instance of the object, or null if not found</returns>
            <exception>Thrown if 'T' is a value type and is not found</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICache.Find``1(System.String,Apprenda.StrictProducer{``0})">
            <summary>
            Searches the cache for the object with the provided key. If the object is found, it is returned. If the object is not found
            and 'T' is not a primitive or a struct, <c>null</c> is returned. If 'T' is a value type, a ValueTypeCacheMissException is thrown since
            <c>null</c> is incompatible with value types.
            </summary>
            <typeparam name="T">The type of the object in the cache</typeparam>
            <param name="key">The key to search for</param>
            <param name="onFindFailRetriever">A delegate to retrieve a value to bind to the provided key if no value was found in the cache with that key</param>
            <returns>An instance of the object, or null if not found</returns>
            <exception>Thrown if 'T' is a value type and is not found</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAllocationReportingService.GetAll(System.DateTime)">
            <summary>
            Retrieves a list of components that were already actively deployed or whose deployments were triggered on or after a specified time.
            </summary>
            <param name = "startTime">The time from which to retrieve components.</param>
            <returns>All components that were actively deployed at some point on or after the start time.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAllocationReportingService.GetAll(System.DateTime,System.DateTime)">
            <summary>
            Retrieves a list of components that were already actively deployed or whose deployments were triggered during a specified period.
            </summary>
            <param name = "startTime">The start of the time period</param>
            <param name = "endTime">The end of the time period</param>
            <returns>All components that were actively deployed at some point within the time period.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAllocationReportingService.GetAllByDeveloper(System.String,System.DateTime)">
            <summary>
            Retrieves a list of components for applications published by a particular developer that were already actively deployed or whose 
            deployments were triggered on or after a specified time.
            </summary>
            <param name="developerAlias">The alias of the development group for which to retrieve components.</param>
            <param name = "startTime">The time from which to retrieve components.</param>
            <returns>All components that were actively deployed at some point on or after the start time.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAllocationReportingService.GetAllByDeveloper(System.String,System.DateTime,System.DateTime)">
            <summary>
            Retrieves a list of components for applications published by a particular developer that were already actively deployed or whose
            deployments were triggered during a specified period.
            </summary>
            <param name="developerAlias">The alias of the development group for which to retrieve components.</param>
            <param name = "startTime">The start of the time period</param>
            <param name = "endTime">The end of the time period</param>
            <returns>All components that were actively deployed at some point within the time period.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAllocationReportingService.GetAllByApplication(System.String,System.DateTime)">
            <summary>
            Retrieves a list of components for a particular application that were already actively deployed or whose deployments were triggered 
            on or after a specified time.
            </summary>
            <param name="applicationAlias">The alias of the application for which to retrieve components.</param>
            <param name = "startTime">The time from which to retrieve components.</param>
            <returns>All components that were actively deployed at some point on or after the start time.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAllocationReportingService.GetAllByApplication(System.String,System.DateTime,System.DateTime)">
            <summary>
            Retrieves a list of components for a particular application that were already actively deployed or whose deployments were triggered 
            during a specified period.
            </summary>
            <param name="applicationAlias">The alias of the application for which to retrieve components.</param>
            <param name = "startTime">The start of the time period</param>
            <param name = "endTime">The end of the time period</param>
            <returns>All components that were actively deployed at some point within the time period.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.ISaaSGridContext">
            <summary>
            Provides access to the running SaaSGrid system
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ISaaSGridContext.OnBoard(Apprenda.SaaSGrid.ITenantOnBoardRequest)">
            <summary>
            Creates a new tenant within the SaaSGrid system.
            </summary>
            <param name="request">Details of the company to create as a new tenant.</param>
            <returns>The tenant Id of the newly created tenant.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ISaaSGridContext.IsAliasAvailable(System.String)">
            <summary>
            Will return indication if the alias if available for use in the SaaSGridSystem.
            </summary>
            <param name="alias">Desired alias.</param>
            <returns>Indication if the alias is available.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ISaaSGridContext.IsSslEnforced">
            <summary>
            Indicates if SSL is required for the current SaaSGrid environment.
            </summary>
            <returns>Indication if SSL is required.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IVersionSecurableRetriever.AddRuntimeSecurable(Apprenda.SaaSGrid.RuntimeSecurable,System.Guid)">
            <summary>
            Creates a new runtime securable using the provided information.
            </summary>
            <param name="securable">Information describing the runtime securable to create.</param>
            <param name="versionId">The application version id.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.IVersionSecurableRetriever.IsRuntimeSecured(System.Guid,System.String)">
            <summary>
            Determines if the item identified by the inputted name
            has been secured at runtime.
            </summary>
            <param name="versionId">The Application Version Id.</param>
            <param name="name">The name to check if it is has been secured.</param>
            <returns>
            	<c>true</c> if the item is secured; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IVersionSecurableRetriever.RemoveRuntimeSecurable(System.Guid,System.String)">
            <summary>
            Removes the runtime secured item identified by the provided name.
            </summary>
            <param name="versionId">The Application Version Id.</param>
            <param name="securableName">Name of the runtime securable to remove.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.IVersionSecurableRetriever.GetSecurables(System.Guid)">
            <summary>
            Gets the securables associated with the current application.
            </summary>
            <param name="versionId">The Application Version Id.</param>
            <returns>The collection of securables for the current application.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IVersionSecurableRetriever.GetStaticSecurables(System.Guid)">
            <summary>
            Gets the static securables associated with the current application.
            </summary>
            <param name="versionId">The Application Version Id.</param>
            <returns>The collection of static securables for the current application.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IVersionSecurableRetriever.GetRuntimeSecurables(System.Guid)">
            <summary>
            Gets the runtime securables associated with the current application.
            </summary>
            <param name="versionId">The Application Version Id.</param>
            <returns>The collection of runtime securables for the current application.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.MissingEntitlementException">
            <summary>
            Thrown when attempting to establish a remote session but the user does not have access to the requested application.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.NotAuthorizedDetail">
            <summary>
            Captures meta-data regarding unauthorized access
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.NotAuthorizedException"/>
        </member>
        <member name="F:Apprenda.SaaSGrid.NotAuthorizedDetail.securableName">
            <summary>
            The name of the securable.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.NotAuthorizedDetail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.NotAuthorizedDetail"/> class.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.NotAuthorizedDetail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.NotAuthorizedDetail"/> class.
            </summary>
            <param name="securableName">Name of the securable.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.NotAuthorizedDetail.SecurableName">
            <summary>
            Gets the name of the securable.
            </summary>
            <value>The name of the securable.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.DeveloperName">
            <summary>
            The name of the developer group responsible for the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.DeveloperAlias">
            <summary>
            The alias of the developer group responsible for the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.DeveloperId">
            <summary>
            The id of the developer group responsible for the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.ApplicationName">
            <summary>
            The name of the application to which the component belongs.
            </summary>
            <remarks>
            The application name is not guaranteed to be unique across all applications. For a guaranteed
            unique identifier use <see cref="P:Apprenda.SaaSGrid.ResourceAllocationDTO.ApplicationId"/>.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.ApplicationAlias">
            <summary>
            The alias used by the application to which the component belongs.
            </summary>
            <remarks>
            The application alias is not guaranteed to be unique over time as an application using a particular
            alias may be deleted and another application with the same alias subsequently created. For a guaranteed
            unique identifier use <see cref="P:Apprenda.SaaSGrid.ResourceAllocationDTO.ApplicationId"/>.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.ApplicationId">
            <summary>
            The unique id for the application to which the component belongs.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.VersionName">
            <summary>
            The name of the application version to which the component belongs.
            </summary>
            <remarks>
            The version name is not guaranteed to be unique across all versions. For a guaranteed
            unique identifier use <see cref="P:Apprenda.SaaSGrid.ResourceAllocationDTO.VersionId"/>.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.VersionAlias">
            <summary>
            The alias used by the application version to which the component belongs. This alias is appended to the application
            alias for test version urls.
            </summary>
            <remarks>
            The version alias is not guaranteed to be unique over time as an version using a particular
            alias may be deleted and another version with the same alias subsequently created. For a guaranteed
            unique identifier use <see cref="P:Apprenda.SaaSGrid.ResourceAllocationDTO.VersionId"/>.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.VersionId">
            <summary>
            The unique id for the application version to which the component belongs.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.ComponentName">
            <summary>
            The name of the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.ComponentType">
            <summary>
            The type of the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.DiscreteComponentType">
            <summary>
            The type of the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.Policy">
            <summary>
            The details for the resource allocation policy that governed the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.StorageQuota">
            <summary>
            The details for the storage quota that governed the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.StorageQuotaSelection">
            <summary>
            The details for the selected storage quota that governed the component.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.DeployTime">
            <summary>
            The time at which the component was deployed.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationDTO.UndeployTime">
            <summary>
            The time at which the component was undeployed. If UndeployTime is null, the component was still deployed at the time
            when the report was generated.
            </summary>
            <remarks>
            If a component was undeployed between the end of the reporting interval and the time the report was generated, UndeployTime
            will contain the actual time at which the undeployment occurred.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.Name">
            <summary>
            The name of the policy.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.Description">
            <summary>
            The description of the policy.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.MemoryLimitInMegabytes">
            <summary>
            The amount of memory (in MB) that components using the policy will be allowed to consume. If MemoryLimitInMegabytes
            is null, components will be allowed to consume as much memory as the underlying operating system will allow.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.CpuLimitInMegahertz">
            <summary>
            The amount of CPU power (in MHz) that components using the policy will be allowed to consume. If CpuLimitInMegahertz is
            null, components will be allowed to consume as much CPU as the underlying operating system will allow.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.CpuLimitInFractionalCores">
            <summary>
            The amount of CPU power (in MHz) that components using the policy will be allowed to consume. If CpuLimitInMegahertz is
            null, components will be allowed to consume as much CPU as the underlying operating system will allow.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.CpuCores">
            <summary>
            The minimum number of CPU cores that will be present on machines to which components using the policy are deployed.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.Notes">
            <summary>
            Notes provided by the platform owner for the policy.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.UnitCost">
            <summary>
            The specified cost for the policy.
            </summary>
            <remarks>
            This field is not used by the platform but is provided to assist platform owners in calculating the costs associated
            with application hosting.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.UnitCostCurrency">
            <summary>
            The 3 letter abbreviation of the currency used by the policy. For example, the  United States Dollar is abbreviated to
            USD and the Euro is abbreviated  to EUR.
            </summary>
            <remarks>
            This field is not used by the platform but is provided to assist platform owners in calculating the costs associated
            with application hosting.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ResourceAllocationPolicyDTO.UnitType">
            <summary>
            The frequency at which use of the policy by components will be charged.
            </summary>
            <remarks>
            This field is not used by the platform but is provided to assist platform owners in calculating the costs associated
            with application hosting.
            </remarks>
        </member>
        <member name="T:Apprenda.SaaSGrid.SaaSGridContext">
            <summary>
            Captures state and functionality related to the currently running SaaSGrid System.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.SaaSGridContext.Current">
            <summary>
            Provides access to the current SaaSGrid system.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridContext.OnBoard(Apprenda.SaaSGrid.ITenantOnBoardRequest)">
            <summary>
            Creates a new tenant within the SaaSGrid system.
            </summary>
            <param name="request">Details of the company to create as a new tenant.</param>
            <returns>The tenant Id of the newly created tenant.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridContext.IsAliasAvailable(System.String)">
            <summary>
            Will return indication if the alias if available for use in the SaaSGridSystem.
            </summary>
            <param name="alias">Desired alias.</param>
            <returns>Indication if the alias is available.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridContext.IsSslEnforced">
            <summary>
            Indicates if SSL is required for the current SaaSGrid environment.
            </summary>
            <returns>Indication if SSL is required.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.IContextScope">
            <summary>
            A handle to a semantic context scope
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.StorageQuotaDTO.Name">
            <summary>
              The name of the selected quota template.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.StorageQuotaDTO.Description">
            <summary>
              The description of the selected quota template.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.StorageQuotaDTO.Notes">
            <summary>
              The notes attached to the selected quota template.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.StorageQuotaDTO.UnitCost">
            <summary>
              The specified cost for the selected quota template on a per-unit basis.
            </summary>
            <remarks>
              This field is not used by the platform but is provided to assist platform owners in calculating the costs associated
              with application hosting.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.StorageQuotaDTO.UnitLabel">
            <summary>
              A label for the UnitCost that in the case of a storage quota will indicate the "period" of the cost.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.StorageQuotaDTO.UnitCostCurrency">
            <summary>
              The 3 letter abbreviation of the currency used by the selected quota template. For example, the  United States Dollar is abbreviated to
              USD and the Euro is abbreviated  to EUR.
            </summary>
            <remarks>
              This field is not used by the platform but is provided to assist platform owners in calculating the costs associated
              with application hosting.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.StorageQuotaDTO.UnitSize">
            <summary>
              The size of one unit of storage in MB.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.MeterResult`1">
            <summary>
            Result for subscription related queries.
            </summary>
            <typeparam name="T">The type of result to be expected</typeparam>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.MeterResult`1.Status">
            <summary>
            Represents the status of the meter.
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.MeterStatus"/>
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.MeterResult`1.Value">
            <summary>
            The requested value of the meter.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.MeterStatus">
            <summary>
            Used to check the status of a meter
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotExhausted">
            <summary>
            This will be the result when a meter is present in a subscription but
            has not been fully exhausted meaning that it can still be used. 
            If a user did not subscribe to use the feature a different status will 
            be returned. For example if a user subscribed to a limit of 10 open
            projects at any point in time and only has 3 open right now.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.MeterStatus.Exhausted">
            <summary>
            This will be the result when a user is subscribed to use a feature but
            has completely consumed it therefore rendering it un-usable or exhausted.
            For example if a user subscribed to a block of 100 e-mails and send all 100
            e-mails already.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotSubscribed">
            <summary>
            This will be the result for when a user did not subscribe to use the 
            feature all together. It is possible that he signed up for a plan that
            did not offer the feature. For example a toggle feature of reports might
            only be available in a 'Professional' plan and the user is signed up on
            the 'Basic' plan.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.MeterStatus.UnknownException">
            <summary>
            If the result of the action is an unknown exception.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute">
            <summary>
            Used to sign WCF service methods as boundary features. Signing a WCF service method with this attribute simply
            defines inclusion as a boundary feature. Feature dynamics must be defined via <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>.
            If a boundary is violated a <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException"/> will be thrown.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException"/>
            <exception cref="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException">
            Thrown when a SaaSGrid Boundary Feature is violated (that is, the checked value matches a rejection algorithm when compared to the subscribed boundary value) 
            </exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.#ctor(System.String)">
            <summary>
            Marks a method such that if the <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/> succeeds it will execute
            it's body.
            </summary>
            <param name="name">The name of the feature that this attribute will govern.</param>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a method such that if the <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/> succeeds it will execute
            it's body.
            </summary>
            <param name="name">The name of the feature that this attribute will govern.</param>
            <param name="unavailableMessage">The message to report via a fault if the boundary request 
            cannot be satisfied because the user is not subscribed to the feature.</param>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Marks a method such that if the <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/> succeeds it will execute
            it's body.
            </summary>
            <param name="name">The name of the feature that this attribute will govern.</param>
            <param name="unavailableMessage">The message to report via a fault if the boundary request 
            cannot be satisfied because the user is not subscribed to the feature.</param>
            <param name="boundaryViolatedMessage">The message to report via a fault if the boundary 
            request cannot be satisfied because the boundary was violated.</param>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a method such that if the <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/> succeeds it will execute
            it's body. This overload allows to define the message for when a user is not subscribed to
            this feature from a resource file which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the feature that this attribute will govern.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Marks a method such that if the <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/> succeeds it will execute
            it's body. This overload allows to define the message for when a user is not subscribed to
            this feature as well as the message to display if the boundary is violated from a resource file 
            which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the feature that this attribute will govern.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <param name="resourceNameForBoundaryViolatedMessage">Name/Key of the resource defining the message for when the 
            boundary is violated.</param>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="bindingParameters">The collection of objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation. When called
            a <see cref="T:System.NotImplementedException"/> will be thrown as this behavior is only applicable
            to services, not clients.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="clientOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements a modification or extension of the service across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="dispatchOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.ExhaustableFeatureAttribute">
            <summary>
            Provides a common base class for all attributes that provide governance structures for requests requiring access 
            to SaaSGrid feature that can be exhausted such as limiters, boundaries and blocks.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ExhaustableFeatureAttribute.#ctor(System.String)">
            <summary>
            Marks a method as being access-controlled by an exhaustible feature.
            </summary>
            <param name="name">The name of the feature</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ExhaustableFeatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by an exhaustible feature.
            </summary>
            <param name="name">The name of the feature</param>
            <param name="unavailableMessage">The message when the user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ExhaustableFeatureAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by an exhaustible feature.
            </summary>
            <param name="name">The name of the feature</param>
            <param name="unavailableMessage">The message when the user is not subscribed to the feature.</param>
            <param name="exhaustedMessage">The message when the limiter has been exhausted.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ExhaustableFeatureAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by an exhaustible feature. This overload
            allows to define the message for when the feature is unavailable from a resource file 
            which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ExhaustableFeatureAttribute.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by an exhaustible feature. This overload
            allows to define the message for when the feature is unavailable as well as a message
            for when the feature has been exhausted from a resource file which is more optimal for 
            localization purposes.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the messages from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <param name="resourceNameForExhaustedMessage">Name/Key of the resource defining the message for the feature
            when it has been exhausted.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.ExhaustableFeatureAttribute.ExhaustedMessage">
            <summary>
            Gets the message of the governed feature that indicates that the feature is exhausted.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedDetail">
            <summary>
            Describes a boundary violation.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryViolatedDetail.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception capturing information related to the exhaustion
            </summary>
            <param name="name">The name of the exhausted boundary feature</param>
            <param name="status">The status of the exhausted boundary.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryViolatedDetail.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.Double)">
            <summary>
            Creates an instance of this exception capturing information related to the exhaustion
            </summary>
            <param name="name">The name of the exhausted boundary feature</param>
            <param name="status">The status of the exhausted boundary.</param>
            <param name="boundaryValue">The subscribed boundary value.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.BoundaryViolatedDetail.BoundaryValue">
            <summary>
            Gets the boundary value.
            </summary>
            <value>The boundary value.</value>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException">
            <summary>
            Thrown when a user makes a request against a boundary feature that is in an 
            invalid state or an unusable state, this could mean that the feature was 
            exhausted or that the user did not subscribe to the boundary altogether.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="boundaryName">Name of the boundary that was violated.</param>        
            <param name="status">The status of the invalid boundary</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.Double)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="boundaryName">Name of the boundary that was violated.</param>        
            <param name="status">The status of the invalid boundary</param>
            <param name="boundaryValue">The boundary value that the current user is subscribed to.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.String)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="boundaryName">Name of the boundary that was violated.</param>        
            <param name="status">The status of the invalid boundary</param>
            <param name="message">A message describing the problem in further detail.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.Double,System.String)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="boundaryName">Name of the boundary that was violated.</param>        
            <param name="status">The status of the invalid boundary</param>
            <param name="boundaryValue">The boundary value that the current user is subscribed to.</param>
            <param name="message">A message describing the problem in further detail.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BlockExhaustedDetail">
            <summary>
            Captures information detailing a request against a SaaSGrid Block feature that has been exhausted.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockExhaustedDetail.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception capturing information related to the exhaustion
            </summary>
            <param name="name">The name of the exhausted block feature</param>
            <param name="status">The status of the exhausted block.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BlockExhaustedException">
            <summary>
            Thrown when a user makes a request against a block feature that is in an 
            invalid state or an unusable state, this could mean that the feature was 
            exhausted or that the user did not subscribe to the block altogether.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockExhaustedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="blockName">Name of the block that was violated.</param>        
            <param name="status">The status of the invalid block</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockExhaustedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.String)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="blockName">Name of the block that was violated.</param> 
            <param name="status">The status of the invalid block</param>
            <param name="message">A message describing the problem in further detail.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail">
            <summary>
            Captures common information detailing a request against any 
            SaaSGrid feature that is in violation of its usage. This means
            that the meter could be exhausted or simply not subscribed to.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail.name">
            <summary>
            Name of the exhausted meter.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail.status">
            <summary>
            Status of the exhausted meter.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception capturing information related to the exhaustion
            </summary>
            <param name="name">The name of the exhausted metered feature</param>
            <param name="status">The status of the exhausted metered feature.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail.Name">
            <summary>
            Gets the name of the exhausted meter.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail.Status">
            <summary>
            Gets the status of the violated meter.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.MeterExhaustedException">
            <summary>
            Thrown if a request is made against a meter that is exhausted.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.MeterExhaustedException.#ctor(Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail,System.String)">
            <summary>
            Used to denote a meter that is exhausted.
            </summary>
            <param name="detail">The exhausted meter detail</param>
            <param name="message">The error message to relay.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.DecrementBlockAttribute">
            <summary>
            This attribute can be used to sign WCF services that when successfully called, results in an decrement to a
            block quantity, effectively establishing a single unit debit
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementBlockAttribute.#ctor(System.String)">
            <summary>        
            Marks a method such that, if it completes successfully, would yield a unit debit from a block
            </summary>
            <param name="name">The name of the block that this attribute should decrement.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementBlockAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a unit debit from a block.
            </summary>
            <param name="name">The name of the block that this attribute should decrement.</param>
            <param name="unavailableMessage">The message to report via a fault if the block decrement 
            request cannot be satisfied because the user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementBlockAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a unit debit from a block.
            </summary>
            <param name="name">The name of the block that this attribute should decrement.</param>
            <param name="unavailableMessage">The message to report via a fault if the block decrement 
            request cannot be satisfied because the user is not subscribed to the feature.</param>
            <param name="exhaustedMessage">The message to report via a fault if the block decrement
            request cannot be satisfied because the block has been exhausted.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementBlockAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a unit debit from a block.
            This overload allows to define the message displayed for when a user is not subscribed to this
            feature from a resource file which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the block that this attribute should decrement.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementBlockAttribute.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a unit debit from a block.
            This overload allows to define the message displayed for when a user is not subscribed to this
            feature as well as the message displayed for when the block is exhausted from a resource file 
            which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the block that this attribute should decrement.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <param name="resourceNameForExhaustedMessage">Name/Key of the resource defining the message for when the 
            block is exhausted.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BlockAttribute">
            <summary>
            Provides a common base class for all attributes that provide governance structures for requests requiring access 
            to SaaSGrid Block-style defined features.
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BlockExhaustedException"/>
            <exception cref="T:Apprenda.SaaSGrid.Subscription.BlockExhaustedException">
            Thrown when a SaaSGrid Block Feature is exhausted.
            </exception>
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            A base constructor for block attributes.
            </summary>
            <param name="name">The name of the feature</param>
            <param name="unavailableMessage">The message to show when the user is not subscribed to the block feature.</param>
            <param name="exhaustedMessage">The message to show when the block has been exhausted.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockAttribute.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Subscription.BlockAttribute"/> class.
            </summary>
            <param name="name">The name of the feature.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the messages from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <param name="resourceNameForExhaustedMessage">Name/Key of the resource defining the message for the feature
            when it has been exhausted.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="bindingParameters">The collection of objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="clientOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements a modification or extension of the service across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="dispatchOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BlockAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedDetail">
            <summary>
            Captures information detailing a request against a SaaSGrid Limiter feature that has been exhausted.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterExhaustedDetail.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.Int64)">
            <summary>
            Creates an instance of this exception capturing information related to the exhaustion
            </summary>
            <param name="name">The name of the exhausted limiter feature</param>
            <param name="status">The status of the invalid limiter</param>
            <param name="limitValue">The bounding value of the limiter</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.LimiterExhaustedDetail.LimitValue">
            <summary>
            Gets the limiting value for the limiter named in <see cref="P:Apprenda.SaaSGrid.Subscription.MeterExhaustedDetail.Name"/>
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.ToggleFeatureSinkInvoker">
            <summary>
            An invoker checking the current subscription context for whether it contains a named toggle feature.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.UnsubscribedFeatureDetail">
            <summary>
            Captures information detailing a request made against an unsubscribed feature.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.UnsubscribedFeatureDetail.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception capturing information related to the exhaustion
            </summary>
            <param name="name">The name of the exhausted toggle feature</param>
            <param name="status">The status of the invalid toggle</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.UnsubscribedFeatureException">
            <summary>
            Thrown when a user makes a request against a toggle feature that is in an 
            invalid state or an unusable state, this could mean that the feature was 
            exhausted or that the user did not subscribe to the toggle altogether.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.UnsubscribedFeatureException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception bound to a specific feature and status.
            </summary>
            <param name="featureName">The name of the feature this exception is related to.</param>
            <param name="status">The invalid status for the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.UnsubscribedFeatureException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.String)">
            <summary>
            Creates an instance of this exception bound to a specific feature and status.
            </summary>
            <param name="featureName">The name of the feature this exception is related to.</param>
            <param name="status">The invalid status for the feature.</param>
            <param name="message">A message describing the problem in further detail.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException">
            <summary>
            Thrown when a user makes a request against a limiter feature that is in an 
            invalid state or an unusable state, this could mean that the feature was 
            exhausted or that the user did not subscribe to the limiter altogether.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="limiterName">The name of the exhausted limiter</param>        
            <param name="status">The status of the invalid limiter</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.Int64)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="limiterName">The name of the exhausted limiter</param>        
            <param name="status">The status of the invalid limiter</param>
            <param name="limitValue">The limiting value of the exhausted limiter.</param>        
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.String)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="limiterName">The name of the exhausted limiter</param>        
            <param name="status">The status of the invalid limiter</param>
            <param name="message">A message describing the problem in further detail.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException.#ctor(System.String,Apprenda.SaaSGrid.Subscription.MeterStatus,System.Int64,System.String)">
            <summary>
            Creates an instance of this exception.
            </summary>
            <param name="limiterName">The name of the exhausted limiter</param>        
            <param name="status">The status of the invalid limiter</param>
            <param name="limitValue">The limiting value of the exhausted limiter.</param>
            <param name="message">A message describing the problem in further detail.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BoundaryRejection">
            <summary>
            Enumerates the various ways a boundary should interpret values and the relationship of that value to 
            subscribed boundary values. Use this in conjunction with <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/> signatures 
            to determine what should be rejected in a method call.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute"/>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.BoundaryRejection.IfLessThan">
            <summary>
            Reject if the value is less than the defined boundary value
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Subscription.BoundaryRejection.IfGreaterThan">
            <summary>
            Reject if the value is greater than the defined boundary value
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute">
            <summary>
            Used to sign operation contract parameters that should be 
            boundary checked.
            </summary>
            <remarks>
            The SaaSGrid API allows boundary checking to happen in a declarative fashion. Many times, monetizable features that need 
            to be governed by a purchasable boundary are passed into WCF operation contract's in a fashion
            that is directly measurable for compatibility against that known and subscribed boundary. If a parameter is an enumerable type 
            (such as an array or collection) or some parameter is a primitive number type, it can be signed by this attribute. The attribute 
            will be interpreted by SaaSGrid based on the parameter type it is applied to.
            </remarks>
            <example>
            For example, consider an operation contract that represents a file upload use case where the 
            the file upload should be allowed to occur if the file size is below or equal to a certain boundary, but blocked if above that boundary. 
            Via this attribute, the use case can be accomplished as follows:
            <code>
            [DataContract(Name="File",
                          Namespace="urn:Application"]
            public class File
            {
                private string name;
                private byte[] data
                
                [DataMember]
                public string Name
                {
                    get { return name; }
                    set { name = value; }
                }
                
                [DataMember]
                public byte[] Data
                {
                    get { return data; }
                    set { data = value; }
                }
            }
            
            [ServiceContract(Name="ApplicationService",
                             Namespace="urn:Application"]
            public class ApplicationService
            {
                [BoundaryFeature("File Upload")]
                [OperationContract]
                public void UploadFile(File file, [BoundaryCheck(BoundaryRejection.IfGreaterThan)] long fileSize)
                {
                    FileStorage.Save(file);
                }
                
                [BoundaryFeature("File Upload")]
                [OperationContract]
                public void UploadFileRaw(string fileName, [BoundaryCheck(BoundaryRejection.IfGreaterThan)] byte[] data)
                {
                    FileStorage.Save(fileName, data);
                }
            }
            </code>
            <para>
            In the example, BoundaryCheck is used on two different method parameters. In 'UploadFile', if the fileSize parameter produces a 
            value greater than the boundary assigned to the current users "File Upload" feature, the call is blocked and SaaSGrid will throw
            the caller a <see cref="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException"/>. If the value of 'fileSize' is less than the boundary value for the current user's
            "File Upload" feature, the service call will be allowed. In the case of 'UploadFileRaw', the same logic applies only that SaaSGrid checks
            the array size for 'data' since the attribute was applied to an array type.
            </para>
            </example>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryFeatureAttribute"/>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryViolatedException"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute.#ctor(Apprenda.SaaSGrid.Subscription.BoundaryRejection)">
            <summary>
            Marks a parameter as being governed by a defined boundary.
            </summary>
            <param name="rejectionType">How the boundary should determine rejection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if 'name' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'name' is an empty string</exception>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.BoundaryCheckAttribute.RejectionType">
            <summary>
            Gets how the boundary should determine rejection.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.BoundaryRejection"/>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.FeatureAttribute">
            <summary>
            Provides a base class for all feature governance attributes. When a method is
            signed with a FeatureAttribute, SaaSGrid will enforce that the method will only 
            execute if the executing user has a subscription to the defined Feature.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.FeatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Subscription.FeatureAttribute"/> class.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="unUsableMessage">The message for when the feature is unavailable.</param>
            <seealso cref="M:Apprenda.SaaSGrid.Subscription.FeatureAttribute.#ctor(System.String,System.Type,System.String,System.String)"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.FeatureAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Subscription.FeatureAttribute"/> class. This overload
            allows to define the unavailable message from a resource file which is more optimal for 
            localization purposes.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the unavailable message from.</param>
            <param name="resourceName">Name/Key of the resource defining the unavailable message.</param>        
            <seealso cref="M:Apprenda.SaaSGrid.Subscription.FeatureAttribute.#ctor(System.String,System.String)"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.FeatureAttribute.Name">
            <summary>
            Gets the name of the governed feature.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.Subscription.FeatureAttribute.UnUsableMessage">
            <summary>
            Gets the message of the governed feature that indicates that the feature is unavailable.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.DecrementLimiterAttribute">
            <summary>
            When applied to a operation contract, a valid call to that service method will
            result in a deduction of 1 from the current user's named limiter feature.
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException"/>
            <exception cref="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException">
            Thrown when a SaaSGrid Limiter Feature is empty and therefore can't be 
            decremented any more.
            </exception>
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementLimiterAttribute.#ctor(System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a decrement in the running count for a named limiter.
            </summary>
            <param name="name">The name of the limiter that this limiter maps to.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementLimiterAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a decrement in the running count for a named limiter.
            </summary>
            <param name="name">The name of the limiter that this limiter maps to.</param>
            <param name="unavailableMessage">The message to report via a fault if the limiter 
            decrement request cannot be satisfied because the user is not subscribed to this feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementLimiterAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a decrement in the running count for a named limiter.
            </summary>
            <param name="name">The name of the limiter that this limiter maps to.</param>
            <param name="unavailableMessage">The message to report via a fault if the limiter 
            decrement request cannot be satisfied because the user is not subscribed to this feature.</param>
            <param name="limiterEmptyMessage">The message to report via a fault for when the limiter 
            has reached 0 and it can't be decremented any more.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementLimiterAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a decrement 
            in the running count for a named limiter. This overload allows to define the message 
            for when a user is not subscribed to the feature from a resource file which is more 
            optimal for localization purposes.
            </summary>
            <param name="name">The name of the limiter that this limiter maps to.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.DecrementLimiterAttribute.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield a decrement 
            in the running count for a named limiter. This overload allows to define the message 
            for when a user is not subscribed to the feature as well as the message for when the
            limit has reached 0 from a resource file which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the limiter that this limiter maps to.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <param name="resourceNameForEmptyLimit">Name/Key of the resource defining the message for the feature
            when it is empty and therefore can't be decremented any more.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.IncrementLimiterAttribute">
            <summary>
            This attribute can be used to sign WCF service methods that when successfully called, 
            results in an increment to the current users's count against a limiter.
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException"/>
            <exception cref="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException">
            Thrown when a SaaSGrid Limiter Feature has reached is limit and therefore can't be 
            incremented any more.
            </exception>
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.IncrementLimiterAttribute.#ctor(System.String)">
            <summary>        
            Marks a method such that, if it completes successfully, would yield an increment 
            in the running count for a named limiter.
            </summary>
            <param name="name">The name of the limiter that this attribute should increment.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if 'name' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'name' is an empty string</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.IncrementLimiterAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield an increment 
            in the running count for a named limiter. This overload allows to define the message
            for when the feature is unavailable.
            </summary>
            <param name="name">The name of the limiter that this attribute should increment.</param>
            <param name="unavailableMessage">The message to report via a fault if the limiter 
            increment request cannot be satisfied because the user is not subscribed to this feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.IncrementLimiterAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield an increment 
            in the running count for a named limiter. This overload allows to define the message
            for when the feature is unavailable as well as the message for when the limit has been
            exhausted.
            </summary>
            <param name="name">The name of the limiter that this attribute should increment.</param>
            <param name="unavailableMessage">The message to report via a fault if the limiter 
            increment request cannot be satisfied because the user is not subscribed to this feature.</param>
            <param name="exhaustedMessage">The message to report via a fault if the limiter
            increment request cannot be satisfied because the limit has been reached.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.IncrementLimiterAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield an increment 
            in the running count for a named limiter. This overload allows to define the message 
            for when a user is not subscribed to the feature from a resource file which is more 
            optimal for localization purposes.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.IncrementLimiterAttribute.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Marks a method such that, if it completes successfully, would yield an increment 
            in the running count for a named limiter. This overload allows to define the message 
            for when a user is not subscribed to the feature as well as the message for when the
            feature is exhausted from a resource file which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <param name="resourceNameForExhaustedMessage">Name/Key of the resource defining the message for the feature
            when it has been exhausted.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.LimiterAttribute">
            <summary>
            Provides a common base class for all attributes that provide governance structures for requests requiring access 
            to SaaSGrid Limiter-style defined features.
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException"/>
            <exception cref="T:Apprenda.SaaSGrid.Subscription.LimiterExhaustedException">
            Thrown when a SaaSGrid Limiter Feature is violated, either the limit has reached is limit or it is empty.  
            </exception>
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.#ctor(System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid limiter feature.
            </summary>
            <param name="name">The name of the feature</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid limiter feature.
            </summary>
            <param name="name">The name of the feature</param>
            <param name="unavailableMessage">The message when the user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid limiter feature.
            </summary>
            <param name="name">The name of the feature</param>
            <param name="unavailableMessage">The message when the user is not subscribed to the feature.</param>
            <param name="exhaustedMessage">The message when the limiter has been exhausted.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid limiter feature. This overload
            allows to define the message for when a user is not subscribed to the feature from a resource 
            file which is more optimal for localization purposes.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.#ctor(System.String,System.Type,System.String,System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid limiter feature. This overload
            allows to define the message for when a user is not subscribed to the feature as well as the
            message for when the feature has been exhausted from a resource file which is more optimal for 
            localization purposes.
            </summary>
            <param name="name">The name of the feature being referenced.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the messages from.</param>
            <param name="resourceNameForUnavailableMessage">Name/Key of the resource defining the message for when the 
            user is not subscribed to the feature.</param>
            <param name="resourceNameForExhaustedMessage">Name/Key of the resource defining the message for the feature
            when it has been exhausted.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="bindingParameters">The collection of objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="clientOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements a modification or extension of the service across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="dispatchOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.LimiterAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.ToggleFeatureAttribute">
            <summary>
            Identifies a WCF service method as governed by a named toggle feature.
            </summary>
            <remarks>
            A WCF service's operation contract can be marked with this attribute, which instructs SaaSGrid 
            to allow access to the method if and only if the requesting user is subscribed to the feature whose name is provided to the
            <see cref="T:Apprenda.SaaSGrid.Subscription.ToggleFeatureAttribute"/> constructor. In the event that the requesting user does
            not have subscribed access to the feature, an <see cref="T:Apprenda.SaaSGrid.Subscription.UnsubscribedFeatureException"/> will be thrown.
            </remarks>
            <exception cref="T:Apprenda.SaaSGrid.Subscription.UnsubscribedFeatureException">Thrown if a request is made and the requesting
            user does not have subscribed access to the feature</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ToggleFeatureAttribute.#ctor(System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid toggle feature.
            </summary>
            <param name="name">The name of the feature that this toggle maps to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if 'name' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'name' is an empty string</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ToggleFeatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid toggle feature. This overload
            allows to specify the message to display a user if determined that he is not subscribed to 
            the defined feature.
            </summary>
            <param name="name">The name of the feature that this toggle maps to.</param>
            <param name="unsubscribedMessage">The message for when the feature is unavailable.</param>        
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.ToggleFeatureAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a method as being access-controlled by a named SaaSGrid toggle feature. This overload
            allows to define the unavailable message from a resource file which is more optimal for 
            localization purposes.
            </summary>
            <param name="name">The name of the toggle being referenced.</param>
            <param name="resourceBaseName">Path/Name of the resource base where to load the message when the toggle is unavailable.</param>
            <param name="resourceName">Name/Key of the resource defining the unavailable message.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Subscription.SubscriptionContext">
            <summary>
            Captures contextual information related to the current user's subscription to the executing code's application.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IsToggleEnabled(System.String)">
            <summary>
            Determines whether or not a toggle feature is available for the current user.
            </summary>
            <param name="name">The name of the toggle feature.</param>
            <returns>A <c>true</c> <see cref="T:Apprenda.SaaSGrid.Subscription.MeterResult`1"/> If the toggle is
            enabled, otherwise the appropriate status code will be returned.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.DecrementBlock(System.String)">
            <summary>
            Reduces the block count of a specific feature for the current user by 1. This method
            should be called when a subscriber "uses" a block unit.
            </summary>
            <param name="name">The name of the block feature</param>
            <returns><seealso cref="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotExhausted"/> if at least 1 unit was available 
            to satisfy the request, the appropriate status code otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IncrementBlock(System.String)">
            <summary>
            Increases the block count of a specific feature for the current user by 1. This method 
            should be called when a subscriber is "credited" a block unit.
            </summary>
            <param name="name">The name of the block feature.</param>
            <returns>A <see cref="T:Apprenda.SaaSGrid.Subscription.MeterStatus"/> with the result of the call.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.DecrementBlock(System.String,System.Int64)">
            <summary>
            Reduces the block count of a specific feature by a specified number of units. This method
            is called when a subscriber "uses" a specific number of block units. 
            </summary>
            <param name="name">The name of the block feature</param>
            <param name="count">The value to decrement by.</param>
            <returns><seealso cref="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotExhausted"/> if decremented successfully, 
            the appropriate status code otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IncrementBlock(System.String,System.Int64)">
            <summary>
            Increases the block count of a specific feature by a specified amount. This method
            is used when a subscriber is "credited" a specific number of block units.
            </summary>
            <param name="name">The name of the block feature.</param>
            <param name="count">The value to increment by.</param>
            <returns>A <see cref="T:Apprenda.SaaSGrid.Subscription.MeterStatus"/> with the result of the call.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.GetBlockCount(System.String)">
            <summary>
            Gets the number of block units remaining for a specific block feature.
            </summary>
            <param name="name">The name of the block feature.</param>
            <returns>A <see cref="T:Apprenda.SaaSGrid.Subscription.MeterResult`1"/> with the number of block units remaining.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IsBlockExhausted(System.String)">
            <summary>
            Determines if a block has been exhausted. This occurs when all available block
            units have been consumed and the current block count has reached zero.
            </summary>
            <param name="name">The name of the block feature.</param>
            <returns>A <see cref="T:Apprenda.SaaSGrid.Subscription.MeterResult`1"/> If the block is
            exhausted, otherwise the appropriate status code will be returned.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IsBelowBound(System.String,System.Double)">
            <summary>
            Determines whether a specified value is below a subscribed bound as defined
            by a boundary feature.
            </summary>
            <param name="name">The name of the boundary feature.</param>
            <param name="value">The value to check.</param>
            <returns>True if strictly below, false otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.GetBound(System.String)">
            <summary>
            Gets the subscribed boundary value for a specific boundary feature.
            </summary>
            <param name="name">The name of the boundary feature.</param>
            <returns>The boundary value.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IncrementLimitCounter(System.String)">
            <summary>
            Increments the counter tied to a limit feature by 1. 
            </summary>
            <param name="name">The name of the limit feature.</param>
            <returns><seealso cref="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotExhausted"/> if incremented successfully, 
            the appropriate status code otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.DecrementLimitCounter(System.String)">
            <summary>
            Decrements the counter tied to a limit feature by 1. 
            </summary>
            <param name="name">The name of the limit feature.</param>
            <returns><seealso cref="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotExhausted"/> if decremented successfully, 
            the appropriate status code otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IncrementLimitCounter(System.String,System.Int64)">
            <summary>
            Increments the counter tied to a limit feature by a specific number
            of units. 
            </summary>
            <param name="name">The name of the limit feature.</param>
            <param name="count">The value to increment the counter by.</param>
            <returns><seealso cref="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotExhausted"/> if incremented successfully, 
            the appropriate status code otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.DecrementLimitCounter(System.String,System.Int64)">
            <summary>
            Decrements the counter tied to a limit feature by a specific number
            of units.
            </summary>
            <param name="name">The name of the limit feature.</param>
            <param name="count">The value to decrement the counter by.</param>
            <returns><seealso cref="F:Apprenda.SaaSGrid.Subscription.MeterStatus.NotExhausted"/> if decremented successfully, 
            the appropriate status code otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.IsLimitReached(System.String)">
            <summary>
            Determines if the limit has been reached for a specified limiter meter.
            This occurs when the limit has been reached.
            </summary>
            <param name="name">The name of the limit feature.</param>
            <returns>A true <see cref="T:Apprenda.SaaSGrid.Subscription.MeterResult`1"/> If the limit has been
            reached, otherwise the appropriate status code will be returned.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.GetLimit(System.String)">
            <summary>
            Gets the subscribed limit value for this feature.
            </summary>
            <param name="name">The name of the limit.</param>
            <returns>A long templated <see cref="T:Apprenda.SaaSGrid.Subscription.MeterResult`1"/> with the result of 
            the limit retrieval.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Subscription.SubscriptionContext.GetLimitCount(System.String)">
            <summary>
            Gets the current limit count for this user for this limit feature.
            </summary>
            <param name="name">The name of the limit feature for which the current
            subscriber's count should be received.</param>
            <returns>A long templated <see cref="T:Apprenda.SaaSGrid.Subscription.MeterResult`1"/> with the result of 
            the limit count retrieval.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Threading.ApprendaParallel">
            <summary>
            This class provides a wrapper around certain methods from <see cref="T:System.Threading.Tasks.Parallel"/>. It provides
            the additional functionality of ensuring that the current Apprenda context is reestablished
            before the invocation of each parallel action. See <see cref="T:System.Threading.Tasks.Parallel"/> for specific details
            on expected behaviors and exception for each method.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Threading.ApprendaParallel.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Parallel.ForEach with the added benefit of both reestablishing contexts
               AND tries to run all items regardless of errors before returning.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.UserAccessException">
            <summary>
            UserAccessException is thrown when a user does not have access to a resource.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserAccessException.#ctor(Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance identifying the requester that caused the access violation.
            </summary>
            <param name="requesterId">The id of the requesting user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserAccessException.#ctor(System.String,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance identifying the requester that caused the access violation.
            </summary>
            <param name="message">The message to capture with this access violation.</param>
            <param name="requesterId">The id of the requesting user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserAccessException.#ctor(System.String,System.Exception,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance identifying the requester that caused the access violation.
            </summary>
            <param name="message">The message to capture with this access violation.</param>
            <param name="innerException">An exception that directly caused this access violation.</param>
            <param name="requesterId">The id of the requesting user.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.AdHocUser">
            <summary>
            Provides a means to capture information about an Ad Hoc User.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.firstName">
            <summary>
            The users first name.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.middleName">
            <summary>
            The middle name of the user.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.lastName">
            <summary>
            The last name of the user.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.suffix">
            <summary>
            The suffix for the user.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.prefix">
            <summary>
            The prefix for the user.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.email">
            <summary>
            The email address for the user.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.description">
            <summary>
            An auxiliary description of the user.
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.AdHocUser.primaryLocation">
            <summary>
            The primary physical location configured for the user.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.Id">
            <summary>
            Gets the unique identifier of the user.
            </summary>
            <value>A unique identifier.</value>
            <remarks>
            Every user has an immutable unique identifier in SaaSGrid that can be 
            used to uniquely identify entities that belong or are tied to a 
            specific user. Ad Hoc users are short lived so keep that in mind when 
            creating data that is tied to ad hoc users.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.FirstName">
            <summary>
            Gets/Sets the user's defined first name
            </summary>
            <value>The users first name.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.MiddleName">
            <summary>
            Gets/Sets the user's defined middle name
            </summary>
            <value>The middle name of the user.</value>
            <remarks>
            Some cultures use two names as their identifying names so keep that in mind 
            when you choose to use this property.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.LastName">
            <summary>
            Gets/Sets the user's defined last name
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.Suffix">
            <summary>
            Gets/Sets the user's defined suffix
            </summary>
            <value>The suffix.</value>
            <remarks>
            Useful for suffix capturing, particularly when suffix's are customarily used.
            <example>
            For Example:
            <list type="bullet">
            			<item>Pete Sampras, Jr.</item>
            			<item>Pete Sampras, Sr.</item>
            			<item>Joseph Felds, III.</item>
            			<item>Henry Hudson, Phd.</item>
            			<item>James Cohen, Md.</item>
            		</list>
            	</example>
            where 'Jr.', 'Sr.', etc. are suffixes
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.Prefix">
            <summary>
            Gets/Sets the prefix of the user.
            </summary>
            <value>The prefix.</value>
            <remarks>
            Useful for prefix capturing, particularly when prefix's are customarily used.
            <example>
            For Example:
            <list type="bullet">
            			<item>Mr. Jorge Bargas</item>
            			<item>Mrs. Jennifer Lane</item>
            			<item>Miss. Maria Smith</item>
            		</list>
            	</example>
            where 'Mr.', 'Mrs.', and 'Miss' are prefixes
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.Email">
            <summary>
            Gets/Sets the email address of the user. Although emails are normally unique
            in SaaSGrid; in the case of ad hoc users they are simply a data marker.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.Description">
            <summary>
            Gets/Sets an auxiliary description of the user.
            </summary>
            <value>The description.</value>
            <remarks>
            This property reflects the 'Description' configured via the Tenant Portal, 
            which is generally used to capture auxiliary information about the user.
            In the case of ad hoc users you may use it to capture any additional 
            information that you would like to exist in the context of the user.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.PrimaryLocation">
            <summary>
            Gets/Sets the primary physical location configured for the user.
            </summary>
            <value>The primary location as an <see cref="T:Apprenda.SaaSGrid.IContactInfo"/>.</value>
            <remarks>
            Every user can have a defined primary location. This is simply one 
            of the contact sections of the user that is flagged as it's primary 
            location. The primary location might be used as a default selection when
            prompting the user to select a location but keep in mind that primary
            locations are not required for every user.
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
            <seealso cref="M:Apprenda.SaaSGrid.ITenantUser.GetContactInfo"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.AdHocUser.Apprenda#SaaSGrid#ITenantUser#ContactSections">
            <summary>
            Gets the contact sections for the user.
            </summary>
            <value>The contact sections as a list of <see cref="T:Apprenda.SaaSGrid.IContactInfo"/>s.</value>
            <remarks>
            Users are allowed to define their personal contact sections via the 
            Tenant Portal. Through the contact sections they might define locations such as
            'Home' and 'Office'. You can use this property to prompt a user for a 
            specific location or conversely you can automatically choose their <see cref="P:Apprenda.SaaSGrid.AdHocUser.PrimaryLocation"/>.
            In the case of ad hoc users, the contact sections will always return the
            primary location or an empty list if no primary location was defined.
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
            <seealso cref="P:Apprenda.SaaSGrid.AdHocUser.PrimaryLocation"/>
        </member>
        <member name="T:Apprenda.SaaSGrid.DelegatingAsynchronousInvoker">
            <summary>
            Captures the concept of an synchronous invoker that passes through to a secondary inner invoker.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.DelegatingAsynchronousInvoker.TargetInvoker">
            <summary>
            Gets the inner invoker that this invoker passes calls onto
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantUserSearchResult">
            <summary>
            Captures the results of a paged search request.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUserSearchResult.SearchedRowCount">
            <summary>
            Gets a tally of the total number of rows that these results are a subset of
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUserSearchResult.Results">
            <summary>
            The results of the search.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUserSearchResult.Users">
            <summary>
            The results of the search.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.DelegatingSynchronousInvoker">
            <summary>
            Captures the concept of an synchronous invoker that passes through to a secondary inner invoker.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.DelegatingSynchronousInvoker.TargetInvoker">
            <summary>
            Gets the inner invoker that this invoker passes calls onto
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.IRequestContext">
            <summary>
            Captures data and behavior regarding the current SaaSGrid request and logical thread of execution.
            </summary>
            <remarks>
            All requests made within SaaSGrid either create or live within a <see cref="T:Apprenda.SaaSGrid.IRequestContext"/>. Information regarding
            the request and invokable request behavior can be located on instances of this type. A SaaSGrid request may exist entirely
            within the scope of one application, or may cross application boundaries in a "mash up" situation where one application's service or 
            user interface relies on functionality provided by the service of another application. The <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> identifies information 
            regarding the current execution location (for example, the current application) as well as the current request owner. Ownership of a <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> 
            is transferred by creating new <see cref="T:Apprenda.SaaSGrid.IProviderContext"/> or <see cref="T:Apprenda.SaaSGrid.ITenantContext"/> authorization scopes. A request is always owned by the 
            dominant scope within a SaaSGrid <see cref="T:Apprenda.SaaSGrid.SessionContext"/>, so creating a new instance of one of the aforementioned authorization scopes will transfer 
            request ownership to that instance.
            <para>
            One of the more important parts of <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> is the ability to add objects to it's <see cref="P:Apprenda.SaaSGrid.IRequestContext.OuterBand"/> for retrieval farther down 
            in the current logical thread of execution, regardless of the current or future location of the request on the node network.
            Objects are added via XML-serialization, so objects must be serializable to be added. <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> objects can be either scoped to the currently executing application or in a application-agnostic, request coupled
            fashion. For example, a user may make a request against application '1'. Application '1' uses services belonging to it, as well as services 
            belonging to application '2'. If SessionContext.Instance.RequestContext.OuterBand.AddObject("myVar", myData) is called in a service belonging to application '1', it is available 
            to any runtime call for any the service within application '1' but is not visible to the application '2' runtime, even though application '2' was 
            called from application '1'. This allows application developers to use this functionality without having to worry about name collisions that may occur for commonly named 
            reque3st variables across applications.
            If an object is not application scoped, any application in the call path can access that object. This gives the advantage of sharing request variables with services 
            and execution paths not belonging to the current application, but does not protect against naming collisions and resulting data clobbering. If an
            object is added in application '1' and is mapped to the key "myVar" but is not restricted to the application scope, and a call is made to a service belonging to application '2', then
            application '2' can read the object as well as write over it, replacing the request data bound to that name.
            </para>
            <para>
            Generally, data added to <see cref="P:Apprenda.SaaSGrid.IRequestContext.OuterBand"/> is useful for passing customization data parallel to the standard domain model data flow, allow for customization to be
            applied in a more "aspect oriented" fashion rather than as part of the business application's domain model.
            </para>
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.ICommunicationBand"/>
            <seealso cref="T:Apprenda.SaaSGrid.IProviderContext"/>
            <seealso cref="T:Apprenda.SaaSGrid.ITenantContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.RootApplicationId">
            <summary>
            Gets the unique identifier for the SaaSGrid application that is currently being executed. Application Impersonation scopes
            can't change this value.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application. If a logical thread of
            execution moves a call from a service belonging to Application '1' to Application '2', the application id would be that of Application '1'
            in the first service, and the identifier of application '2' in the second service however using the ApplicationContext to impersonate
            a different application will not modify this value.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.RootVersionId">
            <summary>
            Gets the unique identifier for the SaaSGrid application version that is currently being executed. Application Impersonation scopes
            can't change this value.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application version. If a logical thread of
            execution moves a call from a service belonging to a version of Application '1' to a version of Application '2', the version id would be 
            that of the version of Application '1' in the first service, and the identifier of the version of application '2' in the second service
            however using the ApplicationContext to impersonate a different application will not modify this value.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.ApplicationId">
            <summary>
            Gets the unique identifier for the SaaSGrid application that is currently being executed taking into account that If an 
            <see cref="T:Apprenda.SaaSGrid.ApplicationContext"/> scope exists, the scope value will override the application owning the currently 
            executing application.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application. If a logical thread of
            execution moves a call from a service belonging to Application '1' to Application '2', the application id would be that of Application '1'
            in the first service, and the identifier of application '2' in the second service.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.VersionId">
            <summary>
            Gets the unique identifier for the SaaSGrid application version that is currently being executed taking into account that If an 
            <see cref="T:Apprenda.SaaSGrid.ApplicationContext"/> scope exists, the scope value will override the version owning the currently 
            executing version.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application version. If a logical thread of
            execution moves a call from a service belonging to a version of Application '1' to a version of Application '2', the version id would be
            that of the version of Application '1' in the first service, and the identifier of the version of application '2' in the second service.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.ProviderId">
            <summary>
            Gets the unique identifier of the creator of the application.
            </summary>
            <value>A unique identifier</value>
            <remarks>This follows the same lifecycle change property of <see cref="P:Apprenda.SaaSGrid.IRequestContext.ApplicationId"/></remarks>
            <seealso cref="P:Apprenda.SaaSGrid.IRequestContext.ApplicationId"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.ServiceImplementationId">
            <summary>
            Gets the unique identifier identifying the specific service implementation for the currently executing service.
            </summary>
            <value>A unique identifier</value>
            <remarks>This is used internally by SaaSGrid and has little use in SaaSGrid hosted applications.</remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.TenantId">
            <summary>
            Gets the unique identifier for the tenant that currently owns the request.
            </summary>
            <remarks>This value may be different than the value at <see cref="P:Apprenda.SaaSGrid.SessionContext.TenantId">SessionContext.Instance.TenantId</see>, and changes 
            with the creation of new <see cref="T:Apprenda.SaaSGrid.TenantContext"/> instances.</remarks>
            <value>The tenant id.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.IRequestContext.OuterBand">
            <summary>
            Returns a <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> allowing for bidirectional out-of-band
            data passing and manipulation within the request.
            </summary>
            <value>An instance of a mutable <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/></value>
        </member>
        <member name="M:Apprenda.SaaSGrid.IRequestContext.CreateInactiveCopy">
            <summary> 
            Creates a copy of the <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> is not active against any execution
            </summary>
            <returns>The inactive copy of this instance</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IRequestContext.Activate">
            <summary>
            Activate the <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> if it is not active
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if called on an active request context</exception>
        </member>
        <member name="T:Apprenda.SaaSGrid.LocalResolver">
            <summary>
            Provides an implementation for resolving the current provider id from local context resources.
            </summary>
            <remarks>This class is used internally by SaaSGrid and provides no useful functionality to application code.</remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.LocalResolver.Resolve">
            <summary>
            Return the provider at the top of the call list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.NullProviderDataRetriever">
            <summary>
            An implementation of <see cref="T:Apprenda.SaaSGrid.IProviderDataRetriever">IProviderDataRetriever</see> that is inoperable but serves as a place holder implementation if no other is found.
            </summary>
            <remarks>This class is used internally by SaaSGrid and provides no functionality to dependent applications.</remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.NullProviderDataRetriever.ConnectionString">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullProviderDataRetriever.GetConnectionDetails">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullProviderDataRetriever.Apprenda#SaaSGrid#IProviderDataRetriever#GetCustomers">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullProviderDataRetriever.GetCustomers(System.Int32,System.Int32)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.IProviderDataRetriever">
            <summary>
            Defines behavior associated with retrieving data belonging to your provider profile.
            </summary>
            <remarks>Much like <see cref="T:Apprenda.SaaSGrid.ITenantDataRetriever"/>, implementations of this class act as a data gateway for information that 
            is part of a SaaSGrid provider's profile. Specifically, implementations are responsible for data retrieval revolving around customer and 
            application information.</remarks>
            <seealso cref="T:Apprenda.SaaSGrid.ITenantDataRetriever"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IProviderDataRetriever.ConnectionString">
            <summary>
            Get's the connection string information for the current application. This is the connection
            information as available to the provider of the application which is an aggregate view of data
            as normally viewed by individual tenants.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.IProviderDataRetriever.GetConnectionDetails">
            <summary>
            Get's the connection information for the current application. This is the connection
            information as available to the provider of the application which is an aggregate view of data
            as normally viewed by individual tenants.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.IProviderDataRetriever.GetCustomers">
            <summary>
            Gets the first 100 listed customers.
            </summary>
            <returns>A collection of customers.</returns>
            <seealso cref="M:Apprenda.SaaSGrid.IProviderDataRetriever.GetCustomers(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.IProviderDataRetriever.GetCustomers(System.Int32,System.Int32)">
            <summary>
            Gets all customers in some paged range.
            </summary>
            <param name="pageSize">Size of the page (number of records per page).</param>
            <param name="pageNumber">The page number.</param>
            <returns>A collection of customers</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IProviderDataRetriever.GetCustomersForApplication(System.String,System.Int32,System.Int32)">
            <summary>
            Gets all customers for a given application in some paged range.
            </summary>
            <param name="applicationAlias">The alias of the application</param>
            <param name="pageSize">Size of the page (number of records per page).</param>
            <param name="pageNumber">The page number.</param>
            <returns>A collection of customers</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IProviderDataRetriever.GetCustomersForApplication(System.Guid,System.Int32,System.Int32)">
            <summary>
            Gets all customers for a given application in some paged range.
            </summary>
            <param name="applicationId">The is of the application</param>
            <param name="pageSize">Size of the page (number of records per page).</param>
            <param name="pageNumber">The page number.</param>
            <returns>A collection of customers</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.NullTenantDataRetriever">
            <summary>
            An implementation of <see cref="T:Apprenda.SaaSGrid.ITenantDataRetriever">IProviderDataRetriever</see> that is inoperable but serves as a place holder implementation if no other is found.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.NullTenantDataRetriever.ConnectionString">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.Apprenda#SaaSGrid#ITenantDataRetriever#GetUsers">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetUsers(System.Int32,System.Int32)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetUser(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.Apprenda#SaaSGrid#ITenantDataRetriever#GetContactSections">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.Apprenda#SaaSGrid#ITenantDataRetriever#GetContactSection(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.Apprenda#SaaSGrid#ITenantDataRetriever#GetContactInfo(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetCompanyProfile">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.Apprenda#SaaSGrid#ITenantDataRetriever#RemoveSubscriptionAssignee(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.NullTenantDataRetriever.FederationEnabled">
            <summary>
            Gets and indication if identity federation is enabled for the tenant
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.RemoveUser(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.AddUser(Apprenda.SaaSGrid.UserCreationRequest)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.AddCredentialedUser(Apprenda.SaaSGrid.UserCreationRequest,System.String)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetRole(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.AddRole(Apprenda.SaaSGrid.RoleCreationRequest)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.RemoveRole(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetSubscriptionGroup(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.UpdateSubscriptionGroup(Apprenda.SaaSGrid.ITenantSubscriptionGroup)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetSubscription(System.Guid)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.SearchUsers(System.String,Apprenda.SaaSGrid.Users.UserInfoColumns,System.Int32,System.Int32)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetRoles">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.GetSubscriptionGroups">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.UpdateCompanyProfile(Apprenda.SaaSGrid.ITenantProfile)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.RemoveUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.UpdateUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.RemoveRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.NullTenantDataRetriever.UpdateRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Throws: <exception cref="T:System.NotSupportedException">NotSupportedException</exception>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.RequestContext">
            <summary>
            Captures data and behavior regarding the current SaaSGrid request and logical thread of execution.
            </summary>
            <remarks>
            All requests made within SaaSGrid either create or live within a <see cref="T:Apprenda.SaaSGrid.RequestContext"/>. Information regarding
            the request and invokable request behavior can be located on instances of of this type. A SaaSGrid request may exist entirely
            within the scope of one application, or may cross application boundaries in a "mash up" situation where one application's service or 
            user interface relies on functionality provided by the service of another application. The <see cref="T:Apprenda.SaaSGrid.RequestContext"/> identifies information 
            regarding the current execution location (for example, the current application) as well as the current request owner.
            <para>
            One of the more important parts of <see cref="T:Apprenda.SaaSGrid.RequestContext"/> is the ability to add objects to it's <see cref="P:Apprenda.SaaSGrid.RequestContext.OuterBand"/> for retrieval farther down 
            in the current logical thread of execution, regardless of the current or future location of the request on the node network.
            Objects are added via XML-serialization, so objects must be serializable to be added. <see cref="T:Apprenda.SaaSGrid.RequestContext"/> objects can be either scoped to the currently executing application or in a application-agnostic, request coupled
            fashion. For example, a user may make a request against application '1'. Application '1' uses services belonging to it, as well as services 
            belonging to application '2'. If SessionContext.Instance.RequestContext.OuterBand.AddObject("myVar", myData) is called in a service belonging to application '1', it is available 
            to any runtime call for any the service within application '1' but is not visible to the application '2' runtime, even though application '2' was 
            called from application '1'. This allows application developers to use this functionality without having to worry about name collisions that may occur for commonly named 
            reque3st variables across applications.
            If an object is not application scoped, any application in the call path can access that object. This gives the advantage of sharing request variables with services 
            and execution paths not belonging to the current application, but does not protect against naming collisions and resulting data clobbering. If an
            object is added in application '1' and is mapped to the key "myVar" but is not restricted to the application scope, and a call is made to a service belonging to application '2', then
            application '2' can read the object as well as write over it, replacing the request data bound to that name.
            </para>
            <para>
            Generally, data added to <see cref="P:Apprenda.SaaSGrid.RequestContext.OuterBand"/> is useful for passing customization data parallel to the standard domain model data flow, allow for customization to be
            applied in a more "aspect oriented" fashion rather than as part of the business application's domain model.
            </para>
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.ICommunicationBand"/>
            <seealso cref="T:Apprenda.SaaSGrid.IRequestContext"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.RequestContext.Activate">
            <summary>
            Activate the <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> if it is not active
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if called on an active request context</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.RequestContext.CreateInactiveCopy">
            <summary> 
            Creates a copy of the <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> is not active against any execution
            </summary>
            <returns>The inactive copy of this instance</returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.RootApplicationId">
            <summary>
            Gets the unique identifier for the SaaSGrid application that is currently being executed. Application Impersonation scopes
            can't change this value.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application. If a logical thread of
            execution moves a call from a service belonging to Application '1' to Application '2', the application id would be that of Application '1'
            in the first service, and the identifier of application '2' in the second service however using the ApplicationContext to impersonate
            a different application will not modify this value.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.RootVersionId">
            <summary>
            Gets the unique identifier for the SaaSGrid application version that is currently being executed. Application Impersonation scopes
            can't change this value.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application version. If a logical thread of
            execution moves a call from a service belonging to a version of Application '1' to a version of Application '2', the version id would be
            that of the version of Application '1' in the first service, and the identifier of the version of application '2' in the second service
            however using the ApplicationContext to impersonate a different application will not modify this value.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.ApplicationId">
            <summary>
            Gets the unique identifier for the SaaSGrid application that is currently being executed taking into account that If an
            <see cref="T:Apprenda.SaaSGrid.ApplicationContext"/> scope exists, the scope value will override the application owning the currently
            executing application.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application. If a logical thread of
            execution moves a call from a service belonging to Application '1' to Application '2', the application id would be that of Application '1'
            in the first service, and the identifier of application '2' in the second service.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.VersionId">
            <summary>
            Gets the unique identifier for the SaaSGrid application version that is currently being executed taking into account that If an
            <see cref="T:Apprenda.SaaSGrid.ApplicationContext"/> scope exists, the scope value will override the version owning the currently
            executing version.
            </summary>
            <value>A unique identifier</value>
            <remarks>
            This value may change across the life of a request. The value represents the current executing application version. If a logical thread of
            execution moves a call from a service belonging to a version of Application '1' to a version of Application '2', the version id would be
            that of the version of Application '1' in the first service, and the identifier of the version of application '2' in the second service.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.ProviderId">
            <summary>
            Gets the unique identifier of the creator of the application.
            </summary>
            <value>A unique identifier</value>
            <remarks>This follows the same lifecycle change property of <see cref="P:Apprenda.SaaSGrid.RequestContext.ApplicationId"/></remarks>
            <seealso cref="P:Apprenda.SaaSGrid.RequestContext.ApplicationId"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.ServiceImplementationId">
            <summary>
            Gets the unique identifier identifying the specific service implementation for the currently executing service.
            </summary>
            <value>A unique identifier</value>
            <remarks>This is used internally by SaaSGrid and has little use in SaaSGrid hosted applications.</remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.TenantId">
            <summary>
            Gets the unique identifier for the tenant that currently owns the request.
            </summary>
            <value>The tenant id.</value>
            <remarks>This value may be different than the value at <see cref="P:Apprenda.SaaSGrid.SessionContext.TenantId">SessionContext.Instance.TenantId</see>, and changes
            with the creation of new <see cref="T:Apprenda.SaaSGrid.TenantContext"/> instances.</remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.RequestContext.OuterBand">
            <summary>
            Returns a <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> allowing for bidirectional out-of-band
            data passing and manipulation within the request.
            </summary>
            <value>An instance of a mutable <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/></value>
        </member>
        <member name="T:Apprenda.SaaSGrid.SecuredAttribute">
            <summary>
            Allows for signing SaaSGrid service methods as being bound to a SaaSGrid Securable name, thereby binding access 
            control to the tenant access control matrix.
            </summary>
            <remarks>
            Signing a service method with this attribute is valuable for coarse grained access control. For fine grained control, 
            use the API explicitly.
            </remarks>
            <seealso cref="M:Apprenda.SaaSGrid.UserContext.IsAuthorized(System.String)">UserContext.Instance.IsAuthorized(string)</seealso>
        </member>
        <member name="M:Apprenda.SaaSGrid.SecuredAttribute.#ctor(System.String)">
            <summary>
            Marks a target of this attribute as being access-controlled by tenant role-mappings
            </summary>
            <param name="actionName">The name of the action that this attribute maps to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if 'actionName' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'actionName' is an empty string</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.SecuredAttribute.#ctor(System.String,System.String)">
            <summary>
            Marks a target of this attribute as being access-controlled by tenant role-mappings
            </summary>
            <param name="actionName">The name of the action that this attribute maps to.</param>
            <param name="failedAuthorizationMessage">The message to report via a <see cref="T:Apprenda.SaaSGrid.NotAuthorizedException"/> to the caller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if 'actionName' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'actionName' is an empty string</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.SecuredAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Marks a target of this attribute as being access-controlled by tenant role-mappings.
            Use this overload to load the failed authorization message from a resource file.
            </summary>
            <param name="actionName">The name of the action that this attribute maps to.</param>
            <param name="resourceType">The type of the resource containing the definition. You can get the type by using
            typeof(resource_name) where resource_name is the Resource Class containing the definition.</param>
            <param name="resourceBaseName">The root name of the resources. For example, 
            the root name for the resource file named "MyResource.en-US.resources" is "MyResource".</param>
            <param name="resourceName">The name (key) of the resource to get.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any one of all 3 arguments is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'actionName' is an empty string</exception>
        </member>
        <member name="P:Apprenda.SaaSGrid.SecuredAttribute.ActionName">
            <summary>
            Gets the name of the action to bind to.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.SecuredAttribute.FailedAuthorizationMessage">
            <summary>
            Gets the message to be used when authorization fails.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Credentials">
            <summary>
            Represents credentials that can be used to log in and authenticate users.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Credentials.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Credentials"/> class.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Credentials.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Credentials"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Credentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.Credentials.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.Credentials.InnerAuthenticationProvider">
            <summary>
            Property to retrieve the inner authentication provider. This
            property will create the provider if it doesn't exist.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.IAuthenticationProvider">
            <summary>
            This contract provides authentication dynamics to SaaSGrid. It is the 
            responsibility of each implementation to govern weather authentication
            is allowed as well as to handle the authentication dynamics.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAuthenticationProvider.Authenticate(System.String,System.String,Apprenda.SaaSGrid.SessionRebinder,System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Authenticates a user into SaaSGrid by using the specified credentials. In
            addition it will use a session rebinder delegate to create a valid session
            based on the authentication result.
            </summary>
            <param name="username">The username to use for the authentication.</param>
            <param name="password">The password to use for the authentication.</param>
            <param name="rebinder">A proper delegate with the authority to establish a session.</param>
            <param name="tenantResolver">The method that will be invoked to when the user has multiple entitlements to the application to which the remote API has been initialized.</param>
            <returns>Returns a session if properly authenticated with the specified credentials or null if authentication fails.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IAuthenticationProvider.GetAnonymousAccess(Apprenda.SaaSGrid.SessionRebinder)">
            <summary>
            Authenticates against SaaSGrid in an anonymous fashion and returns
            a session bound to an anonymous tenant and user. It establishes the
            session using a session rebinder delegate.
            </summary>
            <param name="rebinder">A proper delegate with the authority to establish a session.</param>
            <returns>Returns a session if properly authenticated or null if anything fails contacting the SaaSGrid authentication service.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.ISessionController">
            <summary>
            This contract provides session controlling dynamics to SaaSGrid. It is the 
            responsibility of each implementation to govern weather sessions can be 
            retrieved as well as to handle the session dynamics.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ISessionController.ExpireSession(System.String)">
            <summary>
            Expires an existing session based on the session token.
            </summary>
            <param name="token">The unique identifier for the session, this
            will be used to identify the session being expired.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ISessionController.RebindSession(System.String,Apprenda.SaaSGrid.SessionRebinder,System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Rebinds a session based on a given token and a delegate
            with authority to create the proper session.
            </summary>
            <param name="token">The unique identifier for the session, this
                will be used to identify the session being rebound.</param>
            <param name="rebinder">A delegate with the authority to
                recreate the newly bound session.</param>
            <param name="tenantResolver"></param>
            <returns>The session if properly bound or null if unable to
            bind the session.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.SessionRebinder">
            <summary>
            Defines a method that given the specified parameters, has the
            authorization and capability of creating a SessionHandle and binding
            said parameters to the session instance.
            </summary>
            <param name="tenantId">The tenant id for the session instance</param>
            <param name="token">The unique token representing the session</param>
            <param name="expiration">The expiration date of the session instance</param>
            <returns>A new session handle.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Session">
            <summary>
            Represents a SaaSGrid user session.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Session.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.Session.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>The expiration.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.Session.TenantId">
            <summary>
            Gets or sets the tenant id.
            </summary>
            <value>The tenant id.</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.Session.EstablishSession">
            <summary>
            Establishes an anonymous session. If you need to establish
            a session for named users, see the overload <see cref="M:Apprenda.SaaSGrid.Session.EstablishSession(Apprenda.SaaSGrid.Credentials,System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})"/>.
            </summary>
            <returns>Returns a valid session or null if a session can't be
            established.</returns>
            <seealso cref="M:Apprenda.SaaSGrid.Session.EstablishSession(Apprenda.SaaSGrid.Credentials,System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Session.EstablishSession(Apprenda.SaaSGrid.Credentials)">
            <summary>
            Establishes a named session based on the credentials specified.
            </summary>
            <param name="credentials">The credentials to establish the session</param>
            <returns>Returns a valid session or null if a session can't be established.</returns>
            <seealso cref="M:Apprenda.SaaSGrid.Session.EstablishSession"/>
            <seealso cref="M:Apprenda.SaaSGrid.Session.EstablishSession(Apprenda.SaaSGrid.Credentials,System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Session.EstablishSession(Apprenda.SaaSGrid.Credentials,System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Establishes a named session based on the credentials specified.
            </summary>
            <param name="credentials">The credentials to establish the session</param>
            <param name="tenantResolver">The method that will be invoked when the user has multiple entitlements to the application to which the remote API has been initialized. This method will be provided all available tenants and should return the desired tenant. If no tenant is returned, or the returned tenant is invalid, a <see cref="T:Apprenda.SaaSGrid.MissingEntitlementException"/> will be thrown.</param>
            <returns>Returns a valid session or null if a session can't be established.</returns>
            <seealso cref="M:Apprenda.SaaSGrid.Session.EstablishSession"/>
            <exception cref="T:Apprenda.SaaSGrid.MissingEntitlementException"></exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.Session.Rebind(System.String)">
            <summary>
            Rebinds an existing session based on the unique session token. If
            the session has been expired or simply not valid based on the token,
            null will be returned.
            </summary>
            <param name="token">The unique token identifying the session.</param>
            <returns>The newly rebound session based on the token information.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Session.ReleaseSession">
            <summary>
            Releases the active session.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Session.ReleaseSession(System.String)">
            <summary>
            Releases the session based on the given token.
            </summary>
            <param name="token">The unique token identifying the session.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Session.InnerSessionController">
            <summary>
            Property to retrieve the inner authentication provider. This
            property will create the provider if it doesn't exist.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.NotAuthorizedException">
            <summary>
            This exception is thrown when the user does not have access to a given securable.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.NotAuthorizedDetail"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.NotAuthorizedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.NotAuthorizedException"/> class.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.NotAuthorizedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.NotAuthorizedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.NotAuthorizedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.NotAuthorizedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="securableName">Name of the securable.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Support.LogTarget">
            <summary>
            Specifies the data to log. Options can be combined as flags
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Support.LogTarget.Input">
            <summary>
            Instruction indicating that input data should be logged
            </summary>
        </member>
        <member name="F:Apprenda.SaaSGrid.Support.LogTarget.Return">
            <summary>
            Assuming no exceptions, instructs that any return data should be logged
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Support.LogAttribute">
            <summary>
            Allows WCF operations to be marked with logging aspects
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.#ctor(System.Int32[])">
            <summary>
            Marks a WCF operation for logging using the 'Debug' log level and capturing both input data and returned results.
            </summary>
            <param name="ignoreParameterPositions">The zero-based indices of parameters to exclude from input logging</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.#ctor(Apprenda.SaaSGrid.Support.LogTarget,System.Int32[])">
            <summary>
            Marks a WCF operation for logging using the 'Debug' log level
            </summary>
            <param name="target">The data that should be logged. The enumeration is flaggable</param>
            <param name="ignoreParameterPositions">The zero-based indices of parameters to exclude from input logging</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.#ctor(Apprenda.Services.Logging.LogLevel,System.Int32[])">
            <summary>
            Marks a WCF operation for logging, capturing input and return data as part of the log message
            </summary>
            <param name="level">The log level to use</param>
            <param name="ignoreParameterPositions">The zero-based indices of parameters to exclude from input logging</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.#ctor(Apprenda.Services.Logging.LogLevel,Apprenda.SaaSGrid.Support.LogTarget,System.Int32[])">
            <summary>
            Marks a WCF operation for logging.
            </summary>
            <param name="level">The log level to use</param>
            <param name="target">The data that should be logged. The enumeration is flaggable</param>
            <param name="ignoreParameterPositions">The zero-based indices of parameters to exclude from input logging</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="bindingParameters">The collection of objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements a modification or extension of the client across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="clientOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements a modification or extension of the service across an operation.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
            <param name="dispatchOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription"/>.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Support.LogAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Implement to confirm that the operation meets some intended criteria.
            </summary>
            <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Support.LogAttribute.IgnoreParameters">
            <summary>
            Gets the ignore parameters.
            </summary>
            <value>The ignore parameters.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.Support.LogAttribute.Level">
            <summary>
            Gets the log level.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.Support.LogAttribute.Target">
            <summary>
            Gets the log target.
            </summary>
            <value>The log target.</value>
        </member>
        <member name="T:Apprenda.SaaSGrid.Support.LogSinkInvoker">
            <summary>
            An invoker that handles WCF operation interception and weaves in logging aspects.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.TenantAccessException">
            <summary>
            TenantAccessException is thrown when a tenant does not have access to a resource.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantAccessException.#ctor(Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance identifying the requester that caused the access violation.
            </summary>
            <param name="requesterId">The id of the requesting tenant.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantAccessException.#ctor(System.String,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance identifying the requester that caused the access violation.
            </summary>
            <param name="message">The message to capture with this access violation.</param>
            <param name="requesterId">The id of the requesting tenant.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantAccessException.#ctor(System.String,System.Exception,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance identifying the requester that caused the access violation.
            </summary>
            <param name="message">The message to capture with this access violation.</param>
            <param name="innerException">An exception that directly caused this access violation.</param>
            <param name="requesterId">The id of the requesting tenant.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.IContactInfo">
            <summary>
            Provides data for contact information.
            </summary>
            <remarks>
            <para>
            <c>IContactInfo</c> contains the data available for a contact for a particular location. For example: 
            Someone might have two contact sections, one for 'Home' and one for 'Work', with each location having unique 
            address information and non-geographic detailed information. You can use the <see cref="M:Apprenda.SaaSGrid.IContactInfo.GetContactDetails"/> to get 
            non-geographic information such as phone numbers, e-mail addresses or IM account names. The data presented by 
            this contract is read only. Only Tenants have the ability to modify their data; this is done through the Tenant Portal.
            </para>
            <para>
            We encourage you to take advantage of this data and use it in your applications where appropriate to provide a personalized 
            experience to your customers without requiring them to re-enter information that they've already entered.
            </para>
            </remarks>
            <example>
            One  example of using this data would be to prepopulate shipping information:
            <code>
                string packageShopLocation = string.Format("Your package will be sent to your {0} address.", UserContext.Instance.CurrentUser.PrimaryLocation.Label);
            </code>
            </example>
            <seealso cref="T:Apprenda.SaaSGrid.UserContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.Id">
            <summary>
            Gets the unique identifier of this contact location.
            </summary>
            <remarks>
            <para>
            Every contact info has a unique identifier in the system that can be used to uniquely identify entities that belong or 
            are tied to a specific contact info. You can use the id to relate information to a specific contact info; the 
            Id is guaranteed never to be changed even if the contact info data itself changes.
            </para>
            </remarks>
            <value>The id.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.Label">
            <summary>
            Gets/sets the label (user-friendly name) of the contact location.
            </summary>
            <remarks>
            Every contact info has a required label that helps users identify the contact info. Samples of Labels 
            could be 'Home' and 'Work'.
            </remarks>
            <value>The label.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.Address">
            <summary>
            Gets/sets the street address for the contact location.
            </summary>
            <remarks>
            This property only retrieves the street address of the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.IContactInfo.City"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.State"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/> as well.
            </remarks>
            <value>The address.</value>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.City">
            <summary>
            Gets/sets the city portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the city portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.State"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/> as well.
            </remarks>
            <value>The city.</value>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.State">
            <summary>
            Gets/sets the state portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the state portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.City"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/> as well.
            </remarks>
            <value>The state.</value>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.Country">
            <summary>
            Gets/sets the country portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the country portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.State"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/> and 
            <see cref="P:Apprenda.SaaSGrid.IContactInfo.City"/> as well.
            </remarks>
            <value>The country.</value>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Zip"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.Zip">
            <summary>
            Gets/sets the postal code portion of the address for the contact location.
            </summary>
            <remarks>
            This property retrieves the postal code portion of the address for the current contact location; if you would like to 
            construct an entire address you need <see cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.City"/>, <see cref="P:Apprenda.SaaSGrid.IContactInfo.State"/> and 
            <see cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/>
            </remarks>
            <value>The postal code.</value>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Address"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.City"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.State"/>
            <seealso cref="P:Apprenda.SaaSGrid.IContactInfo.Country"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactInfo.ExtraDetails">
            <summary>
            Gets the extra details of the contact section.
            </summary>
            <remarks>
            Extra details are optional information tidbits that can be tied to a contact section such as Phone numbers,
            Fax numbers, emails, screen names, etc.
            </remarks>
            <value>The extra details.</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.IContactInfo.GetContactDetails">
            <summary>
            Gets the extra details of the contact section.
            </summary>
            <remarks>
            Extra details are optional information tidbits that can be tied to a contact section such as Phone numbers,
            Fax numbers, emails, screen names, etc.
            </remarks>
            <value>The extra details.</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.IContactInfo.AddContactDetail(Apprenda.SaaSGrid.ContactDetailCreationRequest)">
            <summary>
            Creates a new contact detail and associates it with the specified contact section.
            </summary>
            <param name="detail">The contact detail to add.</param>
            <returns>The created contact detail.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IContactInfo.RemoveContactDetail(System.Guid)">
            <summary>
            Deletes the specified contact detail.
            </summary>
            <param name="detailId">The Id of the contact detail.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.IContactInfo.RemoveContactDetail(Apprenda.SaaSGrid.IContactDetail)">
            <summary>
            Deletes the specified contact detail.
            </summary>
            <param name="detail">The contact detail.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.IContactInfo.UpdateContactDetail(Apprenda.SaaSGrid.IContactDetail)">
            <summary>
            Updates the specified contact detail.
            </summary>
            <param name="detail">The updated contact detail.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.IProviderContext">
            <summary>
            Captures a context construct bound to the using application's provider.
            </summary>
            <remarks>
            There are certain cases where a provider may want application code to "opt-out" of a multi-tenant context and instead degrade to a 
            flat context where the code is executing purely within the provider's authority. For example, application code scoped within a 
            <see cref="T:Apprenda.SaaSGrid.IProviderContext"/> lifetime is executed as that provider. Once in provider scope, calls to provider only web services 
            are allowed, access to any tenant data becomes possible, and scope of the dominant tenant is completely muted.
            <para>Running in <see cref="T:Apprenda.SaaSGrid.IProviderContext"/> is warranted in situations where a call with provider authorization is needed, such as 
            queries to administrative-style WCF services or to retrieve data from multiple tenants (such as for benchmark statistics calculation).
            It is highly recommended that care is taken when creating a provider context and that it is disposed of when the authorization scope is
            no longer needed.
            </para>
            </remarks>
            <example>
            <see cref="T:Apprenda.SaaSGrid.ProviderContext"/> can be used in scenario's where a call needs to be made to WCF service calls marked with the attribute 
            <see cref="T:Apprenda.SaaSGrid.ProviderContextAttribute"/>. Proper authorization is created, allowing SaaSGrid to authorize the call. For example, the service
            defined below requires that any calls made to the service with provider context authorization.
            <code>
            [ServiceContract]
            public class AdministrativeService
            {
                [ProviderContext(true)]
                [OperationContract]
                public void AllowTenantsToModifyWorkflow()
                {
                    MyApplicationSettings.AllowTenants = true;
                }
            }
            </code>
            A client of the service must make calls to the service in an established provider context:
            <code>
            public class AdminPage : Page
            {
                public void AdminButtonClicked()
                {
                    if ("modifyWorkflow".Equals(clickedButton.Label))
                    {
                        using (ProviderContext ctx = ProviderContext.NewProviderContext())
                        {
                            IAdministrativeServiceProxy proxy = new AdministrativeServiceProxy();
                            proxy.AllowTenantsToModifyWorkflow();
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Apprenda.SaaSGrid.IProviderContext.ProviderId">
            <summary>
            Gets the id of the provider that owns this authorization context.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.IContactDetail">
            <summary>
            Provides a single item of data of a contact's details (phone, email, etc).
            </summary>
            <remarks>
            <para>
            The <c>IContactDetail</c> interface defines 
            data that is available for contact details; examples include
            Phone numbers, Fax numbers, emails, screen names, etc.
            </para>
            <para>
            Contact details can be found as part of contact sections 
            (<see cref="T:Apprenda.SaaSGrid.IContactInfo"/>) and are simple key value combinations of
            additional data that is available as contact information.
            </para>
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactDetail.Id">
            <summary>
            Gets the unique identifier of the contact detail.
            </summary>
            <remarks>
            <para>
            Every contact detail has a unique id in the system that 
            can be used to uniquely identify entities that belong or 
            are tied to a specific contact detail.
            </para>
            <para>
            You can use the id to relate information to a specific
            contact detail; the Id is guaranteed never 
            to be changed even if the contact detail data itself changes.
            </para>
            </remarks>
            <value>The id.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactDetail.ContactText">
             <summary>
             Gets/sets the contact detail text/value.
             </summary>
             <remarks>
             <para>
             The <c>ContactText</c> property should be used to display
             the value for a specific detail such as the phone number, or 
             email.
             <example>
             This shows how you can print contact details:
             <code>
                 ITenantUser user = UserContext.Instance.CurrentUser();
                 IContactInfo primaryLocation = user.PrimaryLocation;
            
                 foreach (IContactDetail detail in primaryLocation.ExtraDetails)
                 {
                     Console.WriteLine("{0}: {1}", detail.ContactLabel, detail.ContactText);
                 }
             </code>
             </example>
             </para>
             </remarks>
             <value>The contact detail text/value.</value>
             <seealso cref="P:Apprenda.SaaSGrid.IContactDetail.ContactLabel"/>
             <seealso cref="P:Apprenda.SaaSGrid.IContactDetail.Type"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactDetail.ContactLabel">
             <summary>
             Gets/sets the contact detail label.
             </summary>
             <remarks>
             <para>
             The <c>ContactLabel</c> property should be used to display a friendly
             label of what the contact detail is like.
             <example>
             This shows how you can print contact details:
             <code>
                 ITenantUser user = UserContext.Instance.CurrentUser();
                 IContactInfo primaryLocation = user.PrimaryLocation;
            
                 foreach (IContactDetail detail in primaryLocation.ExtraDetails)
                 {
                     Console.WriteLine("{0}: {1}", detail.ContactLabel, detail.ContactText);
                 }
             </code>
             </example>
             </para>
             </remarks>
             <value>The contact detail label.</value>
             <seealso cref="P:Apprenda.SaaSGrid.IContactDetail.ContactText"/>
             <seealso cref="P:Apprenda.SaaSGrid.IContactDetail.Type"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContactDetail.Type">
             <summary>
             Gets/sets the contact detail type.
             </summary>
             <remarks>
             <para>
             The <c>Type</c> property should be used if you programmatically want
             to do something based on the type of detail.
             <example>
             For example, you may have functionality that allows your users to
             send a fax if they have a fax number set up. You could do it like this:
             <code>
                 ITenantUser user = UserContext.Instance.CurrentUser();
                 IContactInfo primaryLocation = user.PrimaryLocation;
            
                 foreach (IContactDetail detail in primaryLocation.ExtraDetails)
                 {
                     if (detail.Type == "USFaxNumber")
                     {
                         /*Display fax logic...*/
                         return;
                     }
                 }
             </code>
             </example>
             </para>
             <para>
             The currently supported types are:
             <list type="bullet">
             <item>PlainText</item>
             <item>EmailAddress</item>
             <item>ScreenName</item>
             <item>JabberScreenName</item>
             <item>GTalkScreenName</item>
             <item>AOLScreenName</item>
             <item>MSNScreenName</item>
             <item>YahooScreenName</item>
             <item>USMobileNumber</item>
             <item>USFaxNumber</item>
             <item>USPhoneNumber</item>
             </list>
             </para>
             </remarks>
             <value>The contact detail text/value.</value>
             <seealso cref="P:Apprenda.SaaSGrid.IContactDetail.ContactLabel"/>
             <seealso cref="P:Apprenda.SaaSGrid.IContactDetail.ContactText"/>
        </member>
        <member name="T:Apprenda.SaaSGrid.ItemNotInBandException">
            <summary>
            Thrown when a query is made for an item in a <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> through
            the <see cref="M:Apprenda.SaaSGrid.ICommunicationBand.GetObject``1(System.String)"/> methods but no object is found.
            </summary>
            <remarks>This exception is thrown by <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> rather than returning null since 
            null is a valid, storable value in an <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/>. This exception helps differentiate between
            'not there' and 'null'</remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.ItemNotInBandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.ItemNotInBandException"/> class.
            </summary>
            <param name="itemName">Name of the item.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.ItemNotInBandException.ItemName">
            <summary>
            Gets the name of the item that was queried for but that could not be found.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantDataRetriever">
            <summary>
            An interface providing data retrieval functionality for SaaSGrid tenant information.
            </summary>
            <remarks>
            SaaSGrid allows deployed applications to query and work with information belonging to SaaSGrid tenants. Data belonging to the 
            current tenant can be retrieved via calls to an <see cref="T:Apprenda.SaaSGrid.ITenantDataRetriever"/>
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.IProviderDataRetriever"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantDataRetriever.ConnectionString">
            <summary>
            Get's the connection string information for the current application for the currently executing tenant. If the
            tenant is impersonated by using an <see cref="T:Apprenda.SaaSGrid.ITenantContext"/> the connection string displayed will be the one
            of the impersonated tenant.
            </summary>
            <example>
            using(TenantContext ctxtA = TenantContext.NewTenantContext(idOfTenantA))
            {
                //Returns connection string for Tenant A
                TenantContext.Current.ConnectionString;
            
                using(TenantContext.NewTenantContext(idOfTenantB))
                {
                    //Returns connection string for Tenant B
                    TenantContext.Current.ConnectionString;
                    
                    //Still Returns connection string for Tenant B
                    ctxtA.ConnectionString;
                }
                
                //Returns connection string for Tenant A
                TenantContext.Current.ConnectionString;
            }
            </example>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetConnectionDetails">
            <summary>
            Get's the connection information for the current application for the currently executing tenant. If the
            tenant is impersonated by using an <see cref="T:Apprenda.SaaSGrid.ITenantContext"/> the connection information returned will be the one
            of the impersonated tenant.
            </summary>
            <returns><see cref="T:Apprenda.SaaSGrid.IConnectionData"/> instance containing the information required to connect to the database.</returns>
            <example>
            using(TenantContext ctxtA = TenantContext.NewTenantContext(idOfTenantA))
            {
                //Returns connection information for Tenant A
                TenantContext.Current.GetConnectionDetails();
                
                using(TenantContext.NewTenantContext(idOfTenantB))
                {
                    //Returns connection information for Tenant B
                    TenantContext.Current.GetConnectionDetails();
                    
                    //Still Returns connection information for Tenant B
                    ctxtA.GetConnectionDetails();
                }
                
                //Returns connection information for Tenant A
                TenantContext.Current.GetConnectionDetails();
            }
            </example>
            <seealso cref="P:Apprenda.SaaSGrid.ITenantDataRetriever.ConnectionString"/>
            <seealso cref="T:Apprenda.SaaSGrid.IConnectionData"/>
            <seealso cref="T:Apprenda.SaaSGrid.IOracleConnectionData"/>
            <seealso cref="T:Apprenda.SaaSGrid.ISqlServerConnectionData"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantDataRetriever.SessionDuration">
            <summary>
            Exposes the Tenant's session timeout.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetUsers">
            <summary>
            Gets all users belonging to the current tenant.
            </summary>
            <remarks>It is common for a business application to need a list of their customer's listed employee base. Calls to this method tap
            into SaaSGrid's centralized user meta-data.</remarks>
            <returns>A list of users ordered by last name.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetUsers(System.Int32,System.Int32)">
            <summary>
            Gets a paged subset of users belonging to the current tenant.
            </summary>
            <remarks>This provides a mechanism for traversing across large numbers of users. For
            example, if 1000 users are defined in your customers profile, requesting GetUsers(10, 1) will return the first 10 users, while 
            GetUsers(10, 2) will return users 11-20 in the list.</remarks>
            <param name="pageSize">A non-negative number defining the number of users that should be returned.</param>
            <param name="pageNumber">A page number that is 1 or larger.</param>
            <returns>A list of users order by last name.</returns>        
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetUser(System.Guid)">
            <summary>
            Gets a specific user by it's unique identifier.
            </summary>
            <param name="userId">The user id to search for.</param>
            <returns>A user instance, or <c>null</c> if one was not found.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetContactSections">
            <summary>
            Gets all contact sections for the current tenant.
            </summary>
            <returns>A list of contact sections .</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetContactSection(System.Guid)">
            <summary>
            Gets a specific contact section by unique identifier
            </summary>
            <param name="contactSectionId">The unique identifier mapping to the contact section to retrieve</param>
            <returns>A contact section instance, or <c>null</c> if one is not found.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetContactInfo(System.Guid)">
            <summary>
            Gets a specific contact information by unique identifier
            </summary>
            <param name="contactInfoId">The unique identifier mapping to the contact section to retrieve</param>
            <returns>A contact information instance, or <c>null</c> if one is not found.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetCompanyProfile">
            <summary>
            Gets an object capturing tenant level profile information.
            </summary>
            <returns>A tenant profile object for the current customer.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.UpdateCompanyProfile(Apprenda.SaaSGrid.ITenantProfile)">
            <summary>
            Updates that stored information about the company profile.
            </summary>
            <param name="profile">Updated company profile</param>
            <returns>A tenant profile object for the current customer.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.RemoveSubscriptionAssignee(System.Guid)">
            <summary>
            Removes the assignee from the specified subscription.
            </summary>
            <param name="subscriptionId">The subscription id from which to remove the 
            assignee.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantDataRetriever.FederationEnabled">
            <summary>
            Gets and indication if identity federation is enabled for the tenant
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.RemoveUser(System.Guid)">
            <summary>
            Deletes all information pertaining to the specified user.
            </summary>
            <param name="userId">The Id of the user to remove.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.RemoveUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Deletes all information pertaining to the specified user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.UpdateUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Updates the stored information pertaining to the specified user.
            </summary>
            <param name="user">The updated user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.AddUser(Apprenda.SaaSGrid.UserCreationRequest)">
            <summary>
            Creates a new user for the tenant as defined by the provided information.
            </summary>
            <param name="user">The user to create.</param>
            <returns>The user after it has been created.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.AddCredentialedUser(Apprenda.SaaSGrid.UserCreationRequest,System.String)">
            <summary>
            Creates a new user for the tenant as defined by the provided information.  
            Bypasses the user confirmation email and sets the user's password to the provided value.
            </summary>
            <param name="user">The user to create.</param>
            <param name="password">The user's password.</param>
            <returns>The user after it has been created.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetRoles">
            <summary>
            Gets all the roles of the current tenant.
            </summary>
            <returns>The collection of roles for the tenant.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetRole(System.Guid)">
            <summary>
            Gets the specified role.
            </summary>
            <param name="roleId">The Id of the role.</param>
            <returns>The specified role.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.AddRole(Apprenda.SaaSGrid.RoleCreationRequest)">
            <summary>
            Creates a new role for the current tenant.
            </summary>
            <param name="role">The role to create.</param>
            <returns>The created role.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.RemoveRole(System.Guid)">
            <summary>
            Deletes all information related to the specified role.
            </summary>
            <param name="roleId">The Id of the role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.RemoveRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Deletes all information related to the specified role.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.UpdateRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Updates the specified role.
            </summary>
            <param name="role">The updated role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetSubscriptionGroups">
            <summary>
            Gets all of the subscription groups associated with the current tenant.
            </summary>
            <returns>The collection of subscription groups for the current tenant.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetSubscriptionGroup(System.Guid)">
            <summary>
            Gets the identified subscription group.
            </summary>
            <param name="groupId">The Id of the subscription group.</param>
            <returns>The subscription group.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.UpdateSubscriptionGroup(Apprenda.SaaSGrid.ITenantSubscriptionGroup)">
            <summary>
            Updates the specified subscription group.
            </summary>
            <param name="group">The subscription group to be updated.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.GetSubscription(System.Guid)">
            <summary>
            Gets the specified subscription.
            </summary>
            <param name="subscriptionId">The Id of the subscription.</param>
            <returns>The identified subscription.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantDataRetriever.SearchUsers(System.String,Apprenda.SaaSGrid.Users.UserInfoColumns,System.Int32,System.Int32)">
            <summary>
            Gets a paginated list of users that fit the criterion specified by the query.
            </summary>
            <param name="filter">Specification of what users to retrieve.</param>
            <param name="columns">The columns to apply the filter to.</param>
            <param name="pageSize">A non-negative number defining the number of users that should be returned.</param>
            <param name="pageNumber">A page number that is 1 or larger.</param>
            <returns>The list of users returned from the query.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantUser">
             <summary>
             Represents a user within SaaSGrid.
             </summary>
             <remarks>
             <para>
             The <see cref="T:Apprenda.SaaSGrid.ITenantUser"/> interface is a contract that defines the data and behavior available for a SaaSGrid user. 
             The data is read only. Only Tenants have the ability to modify their profiles through the SaaSGrid Tenant Portal. 
             We encourage you to take advantage of this data and use it in your applications where appropriate, either for 
             personalization or data capture.
             </para>
             </remarks>
             <example>
             Assume that you are writing an HR Recruiting application named 'The Recruiter', and that a user of the application is a recruiter that works
             for your customer. A use case where a recruiter enters information to setup an interview could utilize this class if the behavior is that the 
             person setting up the test is the interviewer. Any calls to the :
             <code>
             [DataContract(Name="Interview",
                           Namespace="urn:Acme.TheRecruiter")]
             public class Interview
             {
              private DateTime date;
              private Guid intervieweeId;
              private string subject;        
             
              [DataMember]
              public DateTime Date
              {
                get { return date; }
                set { date = value; }
              }           
             
              [DataMember]
              public Guid IntervieweeId
              {
                get { return intervieweeId; }
                set { intervieweeId = value; }
              }
            
              [DataMember]
              public string Subject
              {
                get { return subject; }
                set { subject = value; }
              }                 
            }       
            
             [ServiceContract]
             public class TheRecruiterService
             {
                 [OperationContract]
                 public void SetupInterview(Interview proposedInterview)
                 {            
                    //ScheduleInterview takes an interview proposal followed by an ITenantUser representing the interviewer
                    BusinessEngine.ScheduleInterview(proposedInterview, UserContext.CurrentUser);
                 }
             }
             </code>
             </example>
             <seealso cref="T:Apprenda.SaaSGrid.UserContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.Id">
            <summary>
            Gets the unique identifier of the user.
            </summary>
            <remarks>
            <para>
            Every user has an immutable unique identifier in SaaSGrid that can be used to uniquely identify entities that belong 
            or are tied to a specific user.
            </para>
            </remarks>
            <value>A unique identifier.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.IsSaaSGridUser">
            <summary>
            Gets/sets the flag that determines if the current user is a SaaSGrid user.
            </summary>
            <remarks>
            <para>
            SaaSGrid makes a clear distinction on whether a user is a SaaSGrid user, or a user just
            being a metadata user defined in the System. The difference between the two is that
            SaaSGrid users are allowed to log in and use applications on SaaSGrid since they get 
            SaaSGrid credentials and regular users are just users defined in the system for the purpose
            of referencing them through the applications but they DONT have credentials to log in to
            SaaSGrid.
            </para>
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.FirstName">
            <summary>
            Gets/sets the user's defined first name
            </summary>
            <value>The users first name.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.MiddleName">
            <summary>
            Gets/sets the user's defined middle name
            </summary>
            <remarks>
            Some cultures use two names as their identifying names so keep that in mind when you choose to use this property. 
            </remarks>
            <value>The middle name of the user.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.LastName">
            <summary>
            Gets/sets the user's defined last name
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.Suffix">
            <summary>
            Gets/sets the user's defined suffix
            </summary>
            <remarks>
            Useful for suffix capturing, particularly when suffix's are customarily used.
            <example>
            For Example:
            <list type="bullet">
            <item>Pete Sampras, Jr.</item>
            <item>Pete Sampras, Sr.</item>
            <item>Joseph Felds, III.</item>
            <item>Henry Hudson, Phd.</item>
            <item>James Cohen, Md.</item>
            </list>
            </example>
            where 'Jr.', 'Sr.', etc. are suffixes
            </remarks>
            <value>The suffix.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.Prefix">
            <summary>
            Gets/sets the prefix of the user.
            </summary>
            <remarks>
            Useful for prefix capturing, particularly when prefix's are customarily used.
            <example>
            For Example:
            <list type="bullet">
            <item>Mr. Jorge Bargas</item>
            <item>Mrs. Jennifer Lane</item>
            <item>Miss. Maria Smith</item>
            </list>
            </example>
            where 'Mr.', 'Mrs.', and 'Miss' are prefixes
            </remarks>
            <value>The prefix.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.Email">
            <summary>
            Gets/sets the email address of the user. This is a surrogate unique key in SaaSGrid.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.Description">
            <summary>
            Gets/sets an auxiliary description of the user.
            </summary>
            <remarks>
            This property reflects the 'Description' configured via the Tenant Portal, which is generally used to capture 
            auxiliary information about the user.
            </remarks>
            <value>The description.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.PrimaryLocation">
            <summary>
            Gets the primary physical location configured for the user.
            </summary>
            <remarks>
            <para>
            Every user can have a defined primary location. This is simply one 
            of the contact sections of the user that is flagged as it's primary 
            location. The primary location might be used as a default selection when
            prompting the user to select a location but keep in mind that primary
            locations are not required for every user.
            </para>
            </remarks>
            <value>The primary location as an <see cref="T:Apprenda.SaaSGrid.IContactInfo"/>.</value>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.ContactSections">
            <summary>
            Gets the contact sections for the user.
            </summary>
            <remarks>
            Users are allowed to define their personal contact sections via the Tenant Portal. Through the contact sections they might define locations such as 
            'Home' and 'Office'. You can use this property to prompt a user for a specific location or conversely you can automatically choose their <see cref="P:Apprenda.SaaSGrid.ITenantUser.PrimaryLocation"/>.
            </remarks>
            <value>The contact sections as a list of <see cref="T:Apprenda.SaaSGrid.IContactInfo"/>s.</value>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
            <seealso cref="P:Apprenda.SaaSGrid.ITenantUser.PrimaryLocation"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.GetContactInfo">
            <summary>
            Gets the collection contact information for the user.
            </summary>
            <remarks>
            Users are allowed to define their personal contact sections via the Tenant Portal. Through the contact sections they might define locations such as 
            'Home' and 'Office'. You can use this property to prompt a user for a specific location or conversely you can automatically choose their <see cref="P:Apprenda.SaaSGrid.ITenantUser.PrimaryLocation"/>.
            </remarks>
            <value>The contact sections as a list of <see cref="T:Apprenda.SaaSGrid.IContactInfo"/>s.</value>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
            <seealso cref="P:Apprenda.SaaSGrid.ITenantUser.PrimaryLocation"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.GetRoles">
            <summary>
            Gets the collection of roles that the user is a member of.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.RemoveContactInfo(System.Guid)">
            <summary>
            Removes the specified contact information.
            </summary>
            <param name="contactInfoId">The Id of the contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.RemoveContactInfo(Apprenda.SaaSGrid.IContactInfo)">
            <summary>
            Removes the specified contact information.
            </summary>
            <param name="contactInfo">The contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.UpdateContactInfo(Apprenda.SaaSGrid.IContactInfo)">
            <summary>
            Updates the specified contact information.
            </summary>
            <param name="contactInfo">The updated contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.SetPrimaryContactInfo(System.Guid)">
            <summary>
            Sets the primary contact information for the user.
            </summary>
            <param name="contactInfoId">The Id of the contact section.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.SetPrimaryContactInfo(Apprenda.SaaSGrid.IContactInfo)">
            <summary>
            Sets the primary contact information for the user.
            </summary>
            <param name="contactInfo">The contact section.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.GetSubscriptions">
            <summary>
            Gets the collection of subscriptions associated with the user.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.AddContactInfo(Apprenda.SaaSGrid.ContactInfoCreationRequest)">
            <summary>
            Creates new contact information for the user.
            </summary>
            <param name="contactSection">The contact section to add.</param>
            <returns>The created contact section.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.GetContactInfo(System.Guid)">
            <summary>
            Retrieves the contact info specified by the Id.
            </summary>
            <param name="contactInfoId">The Id of the contact info to retrieve.</param>
            <returns>The persisted contact info.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantUser.GetTenants">
            <summary>
            Retrieves the collection of tenants this user belongs to.
            </summary>
            <returns>The collection of tenants this user belongs to.</returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantUser.IsEnabled">
            <summary>
            Indicates whether the user is allowed access. Access may be enabled or disabled platform-wide
            or only within this specific tenant.
            </summary>
            <returns>True if the user is allowed access, false if the user is not allowed access</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.SaaSGridException">
            <summary>
            Thrown if an error occurs in execution originating directly from SaaSGrid's implementation.
            Application developers should not throw this exception themselves, but can catch them.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.SaaSGridException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.SaaSGridException"/> class.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.SaaSGridException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.SaaSGridException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.IContext">
            <summary>
            Defines the behavior of any class claiming to be a context that can participate as a concrete context in SaaSGrid.
            </summary>
            <remarks>This is used internally by SaaSGrid and is not applicable to SaaSGrid hosted applications.</remarks>
            <seealso cref="T:Apprenda.SaaSGrid.ProviderContext"/>
            <seealso cref="T:Apprenda.SaaSGrid.TenantContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.IContext.EntityId">
            <summary>
            Gets the unique identifier for the logical context owner.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.IContext.CreateInactiveCopy">
            <summary>
            Creates a copy of this context that does not actively participate in the current context stack.
            </summary>
            <returns>A copy whose entity id matches</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.IContext.Activate">
            <summary>
            Activates a context if it is inactive.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if called on an already active context.</exception>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantContext">
            <summary>
            An interface capturing a SaaSGrid tenant's execution context.
            </summary>
            <see cref="T:Apprenda.SaaSGrid.TenantContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantContext.History">
            <summary>
            Gets a stack representing all in-memory tenant executions for this particular logical grid thread.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantContext.TenantId">
            <summary>
            Gets the unique id of the SaaSGrid tenant that this context instance is bound to.
            </summary>
            <value>The tenant id.</value>
        </member>
        <member name="T:Apprenda.SaaSGrid.ICommunicationBand">
            <summary>
            Each <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> represents a physically isolated data channel that can be passed across SaaSGrid call boundaries.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> is a mechanism for relaying data across call SaaSGrid call boundaries. Communication bands relay parallel to (not part of) a standard service method call. A new 
            For example, <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> is created and attached to a <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> when a request enters SaaSGrid and is disposed of when the just before the response returns to the external client. 
            It is useful for passing data that is not part of standard request domain between services or user interfaces an services, or is useful in systems integration situations.
            </para>
            <para>
            An example of this might be an invoicing application that uses custom fields; the concept of an invoice doesn't naturally include a
            mechanism for transferring the custom fields, so the the data is brought "out of band" . Another usage is for data 
            that should not be exposed via a public WSDL contract, but that can nevertheless be relayed within SaaSGrid.
            </para>
            <para>
            The <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> is cleared between requests; data cannot be persisted across requests. Instances do, however, have scoping rules. Data added to an <see cref="T:Apprenda.SaaSGrid.ICommunicationBand"/> 
            can be added so that they are available only to the application that added them. If data is added without application scoping, the data becomes available across application calls. Two applications accessing a 
            common band may clobber each other's data if adding objects with the same name to the band. If application scoping is used, this scenario will not occur.
            </para>
            </remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICommunicationBand.AddObject(System.String,System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds an object to the SaaSGrid session for retrieval at a later time. This override explicitly defines addition 
            on the application scope.
            </summary>
            <remarks>
            Objects must either be <see cref="T:System.Xml.Serialization.IXmlSerializable"/>, be marked with the 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>, be a primitive, or have a constructor whose only parameter is a
            string.
            </remarks>
            <param name="key">The string that will map to the object within
            the SaaSGrid session.</param>
            <param name="obj">The object to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if key or obj are null</exception>
            <param name="knownTypes">An enumeration of serializable types that might be
            encountered during the serialization of the primary object</param>
            <exception cref="T:Apprenda.SaaSGrid.SaaSGridSessionException">Thrown if obj's type 
            implements IXmlSerializable AND is marked as a DataContract, if obj's
            type does not meet any of <see cref="T:Apprenda.SaaSGrid.SessionContext"/>'s 
            serialization requirements, if the serialization process produces 
            null or blank input, or if an unknown error occurs during 
            deserialization.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICommunicationBand.AddObject(System.String,System.Object,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Adds an object to the SaaSGrid session for retrieval at a later time.
            The object to be added must either implement 
            </summary>
            <remarks>
            Objects must either be <see cref="T:System.Xml.Serialization.IXmlSerializable"/>, be marked with the 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>, be a primitive, or have a constructor whose only parameter is a
            string.
            </remarks>
            <param name="key">The string that will map to the object within the SaaSGrid session.</param>
            <param name="obj">The object to add.</param>
            <param name="knownTypes">An enumeration of serializable types that might be
            encountered during the serialization of the primary object</param>
            <param name="isApplicationScoped">Whether the object should be
            scoped to the application or to the broader execution path.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if key or
            obj are null</exception>
            <exception cref="T:Apprenda.SaaSGrid.SaaSGridSessionException">Thrown if obj's type 
            implements IXmlSerializable AND is marked as a DataContract, if obj's
            type does not meet any of <see cref="T:Apprenda.SaaSGrid.SessionContext"/>'s 
            serialization requirements, if the serialization process produces 
            null or blank input, or if an unknown error occurs during 
            deserialization.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICommunicationBand.AddObject(System.String,System.Object)">
            <summary>
            Adds an object to the SaaSGrid session for retrieval at a later time.
            This override adds to the application dictionary.
            </summary>
            <remarks>
            Objects must either be <see cref="T:System.Xml.Serialization.IXmlSerializable"/>, be marked with the 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>, be a primitive, or have a constructor whose only parameter is a
            string.
            </remarks>
            <param name="key">The string that will map to the object within
            the SaaSGrid session.</param>
            <param name="obj">The object to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if key or
            obj are null</exception>
            <exception cref="T:Apprenda.SaaSGrid.SaaSGridSessionException">Thrown if obj's type 
            implements IXmlSerializable AND is marked as a DataContract, if obj's
            type does not meet any of <see cref="T:Apprenda.SaaSGrid.SessionContext"/>'s 
            serialization requirements, if the serialization process produces 
            null or blank input, or if an unknown error occurs during 
            deserialization.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICommunicationBand.AddObject(System.String,System.Object,System.Boolean)">
            <summary>
            Adds an object to the SaaSGrid session for retrieval at a later time.
            </summary>
            <remarks>
            Objects must either be <see cref="T:System.Xml.Serialization.IXmlSerializable"/>, be marked with the 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>, be a primitive, or have a constructor whose only parameter is a
            string.
            </remarks>
            <param name="key">The string that will map to the object within
            the SaaSGrid session.</param>
            <param name="obj">The object to add.</param>
            <param name="isApplicationScoped">Whether the object should be
            scoped to the application or to the global execution path.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if key or
            obj are null</exception>
            <exception cref="T:Apprenda.SaaSGrid.SaaSGridSessionException">Thrown if obj's type 
            implements IXmlSerializable AND is marked as a DataContract, if obj's
            type does not meet any of <see cref="T:Apprenda.SaaSGrid.SessionContext"/>'s 
            serialization requirements, if the serialization process produces 
            null or blank input, or if an unknown error occurs during 
            deserialization.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICommunicationBand.GetObject``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets an object from the session that is mapped to the provided key. The object is retrieved as an instance of the type T. Preference is
            given to application scope. If nothing is found, the global scope is checked.
            </summary>
            <typeparam name="T">The parameter to retrieve the SaaSGrid session
            data as. The Type must meet SaaSGrid Sessions serializability
            requirements.</typeparam>
            <param name="key">The key for the data to retrieve.</param>
            <param name="knownTypes">An enumeration of serializable types that might be
            encountered during the serialization of the primary object</param>
            <returns>The SaaSGrid session data as an instance of T.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if key is
            null.</exception>
            <exception cref="T:Apprenda.SaaSGrid.SaaSGridSessionException">Thrown if T implements
            IXmlSerializable AND is marked as a DataContract, if T does not meet
            any of <see cref="T:Apprenda.SaaSGrid.SessionContext"/>'s serialization requirements,
            or if an unknown error occurs during deserialization.</exception>
            <exception cref="T:Apprenda.SaaSGrid.ItemNotInBandException">Thrown if no item could be found
            for the provided key.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ICommunicationBand.GetObject``1(System.String)">
            <summary>
            Gets an object from the session that is mapped to the provided key. The object is retrieved as an instance of the type T. Preference is
            given to application scope. If nothing is found, the global scope is checked.
            </summary>
            <typeparam name="T">The parameter to retrieve the SaaSGrid session data as. The Type must meet SaaSGrid Sessions serializability requirements.</typeparam>
            <param name="key">The key for the data to retrieve.</param>
            <returns>The SaaSGrid session data as an instance of T.</returns>
            <exception cref="T:System.ArgumentNullException">Throw if key is null.</exception>
            <exception cref="T:Apprenda.SaaSGrid.SaaSGridSessionException">Thrown if T implements
            IXmlSerializable AND is marked as a DataContract, if T does not meet
            any of <see cref="T:Apprenda.SaaSGrid.SessionContext"/>'s serialization requirements,
            or if an unknown error occurs during deserialization.</exception>
            <exception cref="T:Apprenda.SaaSGrid.ItemNotInBandException">Thrown if no item could be found
            for the provided key.</exception>
        </member>
        <member name="T:Apprenda.SaaSGrid.ISessionContext">
            <summary>Allows access to data and functionality bound to a SaaSGrid session.</summary>
            <remarks>
            This class allows for access to data that is bound to a specific SaaSGrid session scope, including information about 
            the session owner, the current application and information belonging to the current execution path subscope. 
            A SessionContext is created when a user logs into SaaSGrid and is user unique. <see cref="T:Apprenda.SaaSGrid.ISessionContext"/> also acts as an access point
            for information related to the originating request for the calls querying the <see cref="T:Apprenda.SaaSGrid.ISessionContext"/>.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.ISessionContext.IsInitialized">
            <summary>
            Gets <c>true</c> if this <see cref="T:Apprenda.SaaSGrid.ISessionContext"/> is initialized, <c>false</c> otherwise
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ISessionContext.Id">
            <summary>
            Gets the unique identifier for the current SaaSGrid session.
            </summary>
            <value>A unique identifier</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ISessionContext.Token">
            <summary>
            Gets the token for the current SaaSGrid session.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ISessionContext.TenantId">
            <summary>
            Gets the unique identifier of the tenant that the owning user belongs to.
            </summary>
            <value>A unique identifier representing the tenant</value>
            <seealso cref="P:Apprenda.SaaSGrid.ISessionContext.UserId"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ISessionContext.RequestContext">
            <summary>
            Gets the <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> representing the request owning the logical thread of execution.
            </summary>
            <value>A request context instance</value>
            <seealso cref="T:Apprenda.SaaSGrid.IRequestContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ISessionContext.UserId">
            <summary>
            Gets the unique identifier for the user who owns this <see cref="T:Apprenda.SaaSGrid.ISessionContext"/>
            </summary>
            <value>A unique identifier representing the owning user</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.ISessionContext.CreateInactiveCopy">
            <summary>
            Creates a copy of the current <see cref="T:Apprenda.SaaSGrid.ISessionContext"/> that is not active against
            current execution.
            </summary>
            <returns>An inactive copy of the session</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ISessionContext.Activate">
            <summary>
            Active the <see cref="T:Apprenda.SaaSGrid.ISessionContext"/> if it is inactive
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the session is already active</exception>
        </member>
        <member name="T:Apprenda.SaaSGrid.TenantContext">
            <summary>
            Captures a runtime representation of a SaaSGrid tenant. Access to information regarding that tenant is accessible via this class. New instances can be created, allowing 
            runtime impersonation of other tenants that are also part of your set of customers.
            </summary>
            <remarks>
            SaaSGrid uses a stackable context stack allowing various context's to be opened and 'nested' where the most recently opened context is defined as 
            the dominant context (<see cref="P:Apprenda.SaaSGrid.SessionContext.DominantScope"/>). Creating a new <see cref="T:Apprenda.SaaSGrid.TenantContext"/> will push a scope onto the stack where the 
            context represents a specified tenant. This is useful in scenarios where one may want to save data for one tenant on behalf of another. <see cref="T:Apprenda.SaaSGrid.TenantContext"/> 
            has cross-grid, logical thread bound visibility; if one creates a context anywhere in the grid and makes service calls while in that context's scope, that context
            and the entire <see cref="T:Apprenda.SaaSGrid.TenantContext"/> stack available through <see cref="P:Apprenda.SaaSGrid.TenantContext.History"/> is visible to the target of the call. Take the following 
            scenario as an example:
            <para>
            You've created two SaaSGrid applications: a purchasing system named 'PO Manager' and an invoicing and order tracking system named 'Order Manager'. You have two customers: 
            Acme, Inc. and Corp, Inc. Acme, Inc. is a customer to 'PO Manager' and Corp, Inc. to 'Order Manager' In the real world, Corp, Inc. is a supplier of office furniture to 
            Acme, Inc. Via 'PO Manager' Acme, Inc. creates a purchase order for new desks. Via the tenant context, code in 'PO Manager' can insert a purchase order record for Acme, Inc., 
            recognize that the two physical companies have a relationship (via a device of your own creation) and also add an order record for Corp, Inc. that will show up in their 'Order Manager'
            dashboard.
            </para>
            </remarks>
            <example>
            This example provides a quick look at the scenario described in remarks.
            <code>
            [DataContract]
            public class PurchaseOrder
            {
                [DataMember]
                public string PONumber;
                [DataMember]
                public string ItemName;
                [DataMember]
                public int Quantity;
            }
            
            [ServiceContract]
            public interface IPOManagerServiceContract
            {
                [OperationContract]
                void SavePurchaseOrder(PurchaseOrder purchaseOrder);
            }
            
            
            public class POManagerService : IPOManagerServiceContract
            {
                public void SavePurchaseOrder(PurchaseOrder purchaseOrder)
                {
                    BusinessRuleEngine.Process(purchaseOrder);
                    PurchaseOrderDataStore.Save(purchaseOrder);
                    
                    //This will push a new tenant context on the stack. If the stack simply had the current executing tenant,
                    //it will grow to a size of 2 until this <c>using</c> statement exits.
                    using (ITenantContext ctx = TenantContext.NewTenantContext(GetSupplierId()))
                    {
                        Order order = GetOrderFromPO(purchaseOrder);
                        OrderManagerServiceProxy proxy = new OrderManagerServiceProxy();
            
                        /// This cross application call to 'Order Manager' will execute as if the request was made by the supplier
                        proxy.ProcessOrder(order);
                    }
                }
            }
            </code>
            </example>
            <seealso cref="T:Apprenda.SaaSGrid.UserContext"/>
            <seealso cref="T:Apprenda.SaaSGrid.ProviderContext"/>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.SubscriptionContext"/>
            <seealso cref="P:Apprenda.SaaSGrid.SessionContext.DominantScope"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.TenantId">
            <summary>
            Gets the unique id of the SaaSGrid tenant that this context instance is bound to.
            </summary>
            <value>The tenant id.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.History">
            <summary>
            Gets a stack representing all in-memory tenant executions for this particular logical grid thread.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.Dispose">
            <summary>
            Terminates the scope of the current tenant context.
            </summary>
            <remarks>
            <para>
            This call is required to properly terminate the scope of the current tenant impersonation. It's recommended that
            <see cref="T:Apprenda.SaaSGrid.TenantContext"/> instances are captured in <c>using</c> blocks to automate disposal.
            </para>
            <para>
            An important warning is that calls to Dispose are mapped to the capture <see cref="P:Apprenda.SaaSGrid.TenantContext.History"/>; calls to Dispose
            on a specific instance will only pop that instance if it is in fact at the top of the stack.
            </para>
            <para>
            For details on how to properly set up a <c>TenantContext</c> see
            <see cref="M:Apprenda.SaaSGrid.TenantContext.NewTenantContext(Apprenda.SaaSGrid.Topology.SaaSGridGuid)"/> or <see cref="M:Apprenda.SaaSGrid.TenantContext.NewGuestContext"/>.
            </para>
            </remarks>
            <seealso cref="M:Apprenda.SaaSGrid.TenantContext.NewTenantContext(Apprenda.SaaSGrid.Topology.SaaSGridGuid)"/>
            <seealso cref="M:Apprenda.SaaSGrid.TenantContext.NewGuestContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.EntityId">
            <summary>
            Gets the <see cref="P:Apprenda.SaaSGrid.IContext.EntityId"/>, which is synonymous with the <see cref="P:Apprenda.SaaSGrid.TenantContext.TenantId"/>
            </summary>
            <remarks>
            See <see cref="P:Apprenda.SaaSGrid.TenantContext.TenantId"/> for more details.
            </remarks>
            <value>The entity id.</value>
            <seealso cref="P:Apprenda.SaaSGrid.TenantContext.TenantId"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.CreateInactiveCopy">
            <summary>
            Creates a copy of this context that does not actively participate in the current context stack.
            </summary>
            <returns>A copy whose entity id matches</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.Activate">
            <summary>
            Activates a context if it is inactive.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if called on an already active context.</exception>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.ConnectionString">
            <summary>
            Get's the connection string information for the current application for the currently executing tenant. If the
            tenant is impersonated by using an <see cref="T:Apprenda.SaaSGrid.ITenantContext"/> the connection string displayed will be the one
            of the impersonated tenant.
            </summary>
            <value></value>
            <example>
            using(TenantContext ctxtA = TenantContext.NewTenantContext(idOfTenantA))
            {
                //Returns connection string for Tenant A
                TenantContext.Current.ConnectionString;
                
                using(TenantContext.NewTenantContext(idOfTenantB))
                {
                    //Returns connection string for Tenant B
                    TenantContext.Current.ConnectionString;
                    
                    //Still Returns connection string for Tenant B
                    ctxtA.ConnectionString;
                }
                
                //Returns connection string for Tenant A
                TenantContext.Current.ConnectionString;
            }
            </example>
            <seealso cref="M:Apprenda.SaaSGrid.TenantContext.GetConnectionDetails"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetConnectionDetails">
            <summary>
            Get's the connection information for the current application for the currently executing tenant. If the
            tenant is impersonated by using an <see cref="T:Apprenda.SaaSGrid.ITenantContext"/> the connection information returned will be the one
            of the impersonated tenant.
            </summary>
            <returns><see cref="T:Apprenda.SaaSGrid.IConnectionData"/> instance containing the information required to connect to the database.</returns>
            <example>
            using(TenantContext ctxtA = TenantContext.NewTenantContext(idOfTenantA))
            {
                //Returns connection information for Tenant A
                TenantContext.Current.GetConnectionDetails();
                
                using(TenantContext.NewTenantContext(idOfTenantB))
                {
                    //Returns connection information for Tenant B
                    TenantContext.Current.GetConnectionDetails();
                    
                    //Still Returns connection information for Tenant B
                    ctxtA.GetConnectionDetails();
                }
                
                //Returns connection information for Tenant A
                TenantContext.Current.GetConnectionDetails();
            }
            </example>
            <seealso cref="P:Apprenda.SaaSGrid.TenantContext.ConnectionString"/>
            <seealso cref="T:Apprenda.SaaSGrid.IConnectionData"/>
            <seealso cref="T:Apprenda.SaaSGrid.IOracleConnectionData"/>
            <seealso cref="T:Apprenda.SaaSGrid.ISqlServerConnectionData"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.SessionDuration">
            <summary>
            Exposes the session duration for the current tenant
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetUsers">
            <summary>
            Method to retrieve all the users for the current tenant. 
            This can be useful when displaying a dropdown or a selection box of users.
            </summary>
            <remarks>
            This method allows you to retrieve all the users for the current tenant.
            The users will be returned as a collection of <see cref="T:Apprenda.SaaSGrid.ITenantUser"/>s.
            See <see cref="T:Apprenda.SaaSGrid.ITenantUser"/> to learn what information is available for
            each user.
            </remarks>
            <example>
            Assume that you want to print the users for the current tenant, you could 
            do it like this: 
            <code>
                Console.WriteLine("Users:");
                foreach (ITenantUser user in TenantContext.Current.GetUsers())
                {
                    Console.WriteLine(" - {0}", user);
                }
            </code>
            Or similarly you could do it like this if you want to print specific
            information.
            <code>
                Console.WriteLine("Users:");
                foreach (ITenantUser user in TenantContext.Current.GetUsers())
                {
                    Console.WriteLine(" - {0} {1}", user, user.Id);
                }
            </code>
            </example>
            <returns>A collection of all the users for this tenant.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.ITenantUser"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetUsers(System.Int32,System.Int32)">
            <summary>
            Gets a paged subset of users belonging to the current tenant.
            </summary>
            <param name="pageSize">A non-negative number defining the number of users that should be returned.</param>
            <param name="pageNumber">A page number that is 1 or larger.</param>
            <returns>A list of users order by last name.</returns>
            <remarks>This provides a mechanism for traversing across large numbers of users. For
            example, if 1000 users are defined in your customers profile, requesting GetUsers(10, 1) will return the first 10 users, while
            GetUsers(10, 2) will return users 11-20 in the list.</remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetUser(System.Guid)">
            <summary>
            Gets a specific user by it's unique identifier.
            </summary>
            <param name="userId">The user id to search for.</param>
            <returns>
            A user instance, or <c>null</c> if one was not found.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.AddUser(Apprenda.SaaSGrid.UserCreationRequest)">
            <summary>
            Creates a new user for the tenant as defined by the provided information.
            </summary>
            <param name="user">The user to create.</param>
            <returns>The user after it has been created.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.AddCredentialedUser(Apprenda.SaaSGrid.UserCreationRequest,System.String)">
            <summary>
            Creates a new user for the tenant as defined by the provided information.  
            Bypasses the user confirmation email and sets the user's password to the provided value.
            </summary>
            <param name="user">The user to create.</param>
            <param name="password">The user's password.</param>
            <returns>The user after it has been created.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.RemoveUser(System.Guid)">
            <summary>
            Deletes all information pertaining to the specified user.
            </summary>
            <param name="userId">The Id of the user to remove.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.RemoveUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Deletes all information pertaining to the specified user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.UpdateUser(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Updates the stored information pertaining to the specified user.
            </summary>
            <param name="user">The updated user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.SearchUsers(System.String,Apprenda.SaaSGrid.Users.UserInfoColumns,System.Int32,System.Int32)">
            <summary>
            Gets a paginated list of users that fit the criterion specified by the query.
            </summary>
            <param name="filter">Specification of what users to retrieve.</param>
            <param name="columns">The columns to apply the filter to.</param>
            <param name="pageSize">A non-negative number defining the number of users that should be returned.</param>
            <param name="pageNumber">A page number that is 1 or larger.</param>
            <returns>The list of users returned from the query.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetRoles">
            <summary>
            Gets all the roles of the current tenant.
            </summary>
            <returns>The list of roles for the tenant.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetRole(System.Guid)">
            <summary>
            Gets the specified role.
            </summary>
            <param name="roleId">The Id of the role.</param>
            <returns>The specified role.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.AddRole(Apprenda.SaaSGrid.RoleCreationRequest)">
            <summary>
            Creates a new role for the current tenant.
            </summary>
            <param name="role">The role to create.</param>
            <returns>The created role.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.RemoveRole(System.Guid)">
            <summary>
            Deletes all information related to the specified role.
            </summary>
            <param name="roleId">The Id of the role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.RemoveRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Deletes all information related to the specified role.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.UpdateRole(Apprenda.SaaSGrid.ITenantRole)">
            <summary>
            Updates the specified role.
            </summary>
            <param name="role">The updated role.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetContactSections">
             <summary>
             Method to retrieve all the contact sections for the tenant.
             </summary>
             <remarks>
             <para>
             Depending on your application's logic it might be desired to get
             the contact sections of the current executing tenant. This can be
             useful for inspecting specific information about the tenant or
             personalizing the experience based on their information.
             </para>
             <para>
             The contact sections are returned as a list of 
             <see cref="T:Apprenda.SaaSGrid.IContactInfo"/> objects giving you access to each location
             defined for the tenant.
             </para>
             <para>
             This can be useful if you need to display contact information for
             the user that is familiar to him without having him to fill out any
             more information that is already available.
             </para>
             </remarks>
             <example>
             Imagine a scenario where you want to propose a shipping address
             for the executing user; You might want to propose addresses from
             the tenants contact sections and by default select the primary
             address. You can do this like this:
             <code>
                *Get the primary location*/
                IContactInfo primarySection = TenantContext.Current.GetCompanyProfile().PrimaryLocation;
                StringBuilder builder = new StringBuilder();
                builder.Append("<select id='shippingAddress'>");
                string selected = "";
            
                *Loop through all locations and build options*/
                foreach (IContactInfo contactSection in TenantContext.Current.GetContactSections())
                {
                    if (contactSection.Equals(primarySection)) { selected = "SELECTED"; }
                    else { selected = ""; }
            
                    builder.Append
                    (
                        string.Format
                        (
                            "&lt;option value='{0}' {2}&gt;{1}&lt;/option&gt;",
                            contactSection.Id,
                            contactSection.Label,
                            selected
                        )
                    );
                }
            
                *Close the select tag*/
                builder.Append("</select>");
             </code>
             The above sample used <see cref="M:Apprenda.SaaSGrid.TenantContext.GetCompanyProfile"/> and 
             <see cref="M:Apprenda.SaaSGrid.TenantContext.GetContactSections"/>.
             </example>
             <returns>
             Returns a list of <see cref="T:Apprenda.SaaSGrid.IContactInfo"/>s with all the
             defined contact sections for the current tenant.
             </returns>
             <seealso cref="M:Apprenda.SaaSGrid.TenantContext.GetCompanyProfile"/>
             <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetContactSection(System.Guid)">
            <summary>
            Gets a specific contact section by unique identifier
            </summary>
            <param name="contactSectionId">The unique identifier mapping to the contact section to retrieve</param>
            <returns>
            A contact section instance, or <c>null</c> if one is not found.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetContactInfo(System.Guid)">
            <summary>
            Gets a specific contact information by unique identifier
            </summary>
            <param name="contactInfoId">The unique identifier mapping to the contact section to retrieve</param>
            <returns>A contact information instance, or <c>null</c> if one is not found.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetCompanyProfile">
             <summary>
             Method to retrieve the company profile. The company profile
             contains useful information such as the primary location, tenant
             administrator, etc.
             </summary>
             <remarks>
             <para>
             Depending on your application's logic it might be desired to get
             the company profile of the current executing tenant. This can be
             useful for inspecting specific information about the tenant or
             personalizing the experience based on their information.
             </para>
             <para>
             The company profile is returned as an instance of an 
             <see cref="T:Apprenda.SaaSGrid.ITenantProfile"/> giving you access to the company's
             administrator, the company's name and alias and their primary
             location among other things.
             </para>
             </remarks>
             <example>
             Imagine a scenario where you want to propose a shipping address
             for the executing user; You might want to propose addresses from
             the tenants contact sections and by default select the primary
             address. You can do this like this:
             <code>
                *Get the primary location*/
                IContactInfo primarySection = TenantContext.Current.GetCompanyProfile().PrimaryLocation;
                StringBuilder builder = new StringBuilder();
                builder.Append("<select id='shippingAddress'>");
                string selected = "";
            
                *Loop through all locations and build options*/
                foreach (IContactInfo contactSection in TenantContext.Current.GetCompanyProfile().ContactInfo)
                {
                    if (contactSection.Equals(primarySection)) { selected = "SELECTED"; }
                    else { selected = ""; }
            
                    builder.Append
                    (
                        string.Format
                        (
                            "&lt;option value='{0}' {2}&gt;{1}&lt;/option&gt;",
                            contactSection.Id,
                            contactSection.Label,
                            selected
                        )
                    );
                }
            
                *Close the select tag*/
                builder.Append("</select>");
             </code>
             The above sample used <see cref="M:Apprenda.SaaSGrid.TenantContext.GetCompanyProfile"/> and 
             <see cref="M:Apprenda.SaaSGrid.ITenantProfile.GetContactInfo"/>.
             </example>
             <returns>
             Returns an <see cref="T:Apprenda.SaaSGrid.ITenantProfile"/> instance with the company 
             profile for the current tenant.
             </returns>
             <seealso cref="M:Apprenda.SaaSGrid.ITenantProfile.GetContactInfo"/>
             <seealso cref="T:Apprenda.SaaSGrid.ITenantProfile"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.UpdateCompanyProfile(Apprenda.SaaSGrid.ITenantProfile)">
            <summary>
            Updates that stored information about the company profile.
            </summary>
            <param name="profile">Updated company profile</param>
            <returns>A tenant profile object for the current customer.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.RemoveSubscriptionAssignee(System.Guid)">
            <summary>
            Removes the assignee from the specified subscription.
            </summary>
            <param name="subscriptionId">The subscription id from which to remove the
            assignee.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.FederationEnabled">
            <summary>
            Gets and indication if identity federation is enabled for the tenant
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetSubscriptionGroups">
            <summary>
            Gets all of the subscription groups associated with the current tenant.
            </summary>
            <returns>The list of subscription groups for the current tenant.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetSubscriptionGroup(System.Guid)">
            <summary>
            Gets the identified subscription group.
            </summary>
            <param name="groupId">The Id of the subscription group.</param>
            <returns>The subscription group.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.UpdateSubscriptionGroup(Apprenda.SaaSGrid.ITenantSubscriptionGroup)">
            <summary>
            Updates the specified subscription group.
            </summary>
            <param name="group">The subscription group to be updated.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetSubscription(System.Guid)">
            <summary>
            Gets the specified subscription.
            </summary>
            <param name="subscriptionId">The Id of the subscription.</param>
            <returns>The identified subscription.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.NewGuestContext">
            <summary>
            Creates an instance of <see cref="T:Apprenda.SaaSGrid.TenantContext"/> using the SaaSGrid
            guest tenant id.
            </summary>
            <remarks>
            This method is the same as calling <see cref="M:Apprenda.SaaSGrid.TenantContext.NewTenantContext(Apprenda.SaaSGrid.Topology.SaaSGridGuid)"/> and
            passing <see cref="P:Apprenda.SaaSGrid.TenantContext.GuestId"/> as the tenant id. See <see cref="M:Apprenda.SaaSGrid.TenantContext.NewTenantContext(Apprenda.SaaSGrid.Topology.SaaSGridGuid)"/>
            for more details.
            </remarks>
            <returns>
            Returns a new instance of <see cref="T:Apprenda.SaaSGrid.TenantContext"/> with the 
            supplied <see cref="P:Apprenda.SaaSGrid.TenantContext.GuestId"/> as the tenant id. It is important that 
            when you are done using the guest context, you properly dispose the context by
            calling <see cref="M:Apprenda.SaaSGrid.TenantContext.Dispose"/> or you may experience erratic behavior.
            </returns>
            <seealso cref="M:Apprenda.SaaSGrid.TenantContext.NewTenantContext(Apprenda.SaaSGrid.Topology.SaaSGridGuid)"/>
            <seealso cref="P:Apprenda.SaaSGrid.TenantContext.GuestId"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.NewTenantContext(Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Creates an instance of <see cref="T:Apprenda.SaaSGrid.TenantContext"/> using the passed
            in tenant id.
            </summary>
            <remarks>
            <para>
            Creates a tenant context with the supplied tenant id 
            (<paramref name="tenantId"/>); this is useful when you need to 
            impersonate a tenant different than the one making the call.
            </para>
            <para>
            The proper usage of this method should be inside a using statement
            so that it is properly disposed when no longer needed. Please see
            example for details. You should avoid creating new tenant context's
            outside the scope of a using unless you absolutely need to and always
            remember to properly dispose them.
            </para>
            </remarks>
            <example>
            This shows proper use of a new tenant context:
            <code>
               /*Set up a context to impersonate a specific tenant*/
               using (TenantContext context = TenantContext.NewTenantContext(GetTenantIdFromSomewhere()))
               {
                   /*Run code as impersonating tenant*/
               } 
            </code>
            This shows proper use but should be avoided:
            <code>
               /*Set up a context to impersonate a specific tenant*/
               TenantContext context = TenantContext.NewTenantContext(GetTenantIdFromSomewhere());
               
               /*Run code as impersonating tenant and clean up context*/
               context.Dispose();
            </code>
            This shows improper us of a tenant context because it is not disposed:
            <code>
               /*Set up a context to impersonate a specific tenant*/
               TenantContext context = TenantContext.NewTenantContext(GetTenantIdFromSomewhere());
               
               /*Run code as impersonating tenant*/
               /*
                   ...
               */
            </code>
            </example>
            <param name="tenantId">The tenant id.</param>
            <returns>
            Returns a new instance of <see cref="T:Apprenda.SaaSGrid.TenantContext"/> with the 
            supplied tenant id. It is important that when you are done
            impersonating the tenant, you properly dispose the context by
            calling <see cref="M:Apprenda.SaaSGrid.TenantContext.Dispose"/> or you may experience erratic 
            behavior.
            </returns>
            <seealso cref="M:Apprenda.SaaSGrid.TenantContext.NewGuestContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.Current">
            <summary>
            Gets the current Tenant Context. 
            </summary>
            <remarks>
            <para>
            This property returns the current (upper most in the <see cref="P:Apprenda.SaaSGrid.TenantContext.History"/> stack) tenant context. It 
            is similar to peeking at the <see cref="P:Apprenda.SaaSGrid.TenantContext.History"/> stack.
            </para>
            <para>
            By using this property you can access all of the available data
            for the current tenant as shown in the examples below.
            </para>
            </remarks>
            <example>
            This is how you can get the company profile for the current tenant:
            <code>
                ITenantProfile profile = TenantContext.Current.GetCompanyProfile();
            </code>
            Similarly you can get the contact sections:
            <code>
                IList&lt;IContactInfo&gt; contactSections = TenantContext.Current.GetContactSections();
            </code>
            Or even the users:
            <code>
                IList{ITenantUser} users = TenantContext.Current.GetUsers(10, 1);
            </code>
            </example>
            <returns>
            Returns the current instance of the <c>TenantContext</c> where you can 
            retrieve information about the current executing tenant.
            </returns>
            <seealso cref="M:Apprenda.SaaSGrid.TenantContext.GetUsers(System.Int32,System.Int32)"/>
            <seealso cref="M:Apprenda.SaaSGrid.TenantContext.GetCompanyProfile"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.TenantContext.GuestId">
             <summary>
             Gets the id for the SaaSGrid guest tenant account.
             </summary>
             <remarks>
             <para>
             In some events one might wish to make a call with no specific
             tenant context. This is useful for public facing sections of
             an application were you do not wish to capture information 
             from any logged in user.
             </para>
             <para>
             Since SaaSGrid can't run in a no tenant context, this is were 
             you use a GuestContext (see <see cref="M:Apprenda.SaaSGrid.TenantContext.NewGuestContext"/>).
             Using a GuestContext is the same as creating a TenantContext with
             a reserved TenantId of GuestId.
             </para>
             </remarks>
             <example>
             This code sets up a Guest context in two different ways. Both of them
             achieve the same result.
             <code>
                using (TenantContext guestContext = TenantContext.NewGuestContext())
                {
                    /*Run code as a guest*/
                }
            
                using (TenantContext guestContext = TenantContext.NewTenantContext(TenantContext.GuestId))
                {
                    /*Run code as a guest*/
                }
             </code>
             </example>
             <seealso cref="M:Apprenda.SaaSGrid.TenantContext.NewGuestContext"/>
             <seealso cref="M:Apprenda.SaaSGrid.TenantContext.NewTenantContext(Apprenda.SaaSGrid.Topology.SaaSGridGuid)"/>
             <value>The guest id.</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.Equals(Apprenda.SaaSGrid.TenantContext)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.TenantContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.IProviderResolver">
            <summary>
            Provides a contract for discovering provider information at some point in time and location on SaaSGrid.
            </summary>
            <remarks>This is used internally by SaaSGrid and has no use in a SaaSGrid application.</remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.IProviderResolver.Resolve">
            <summary>
            Resolves this instance.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ProviderContext">
            <summary>
            Provides a class with methods to access a valid provider context authorization scope (see <see cref="T:Apprenda.SaaSGrid.IProviderContext"/> for more information)
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.IProviderContext"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.#ctor(Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Initializes a new provider context.
            </summary>
            <param name="entityId">The entity id.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.#ctor">
            <summary>
            Initializes a new provider context for the current provider
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ProviderContext.EntityId">
            <summary>
            Gets the entity id.
            </summary>
            <value>The entity id.</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.CreateInactiveCopy">
            <summary>
            Creates a copy of this context that does not actively participate in the current context stack.
            </summary>
            <returns>A copy whose entity id matches</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.Activate">
            <summary>
            Activates a context if it is inactive.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if called on an already active context.</exception>
        </member>
        <member name="P:Apprenda.SaaSGrid.ProviderContext.ProviderId">
            <summary>
            Gets the id of the provider that owns this context
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ProviderContext.ConnectionString">
            <summary>
            Get's the connection string information for the current application. This is the connection
            information as available to the provider of the application which is an aggregate view of data
            as normally viewed by individual tenants.
            </summary>
            <value></value>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.GetConnectionDetails">
            <summary>
            Get's the connection information for the current application. This is the connection
            information as available to the provider of the application which is an aggregate view of data
            as normally viewed by individual tenants.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.GetCustomers">
            <summary>
            Method to retrieve 'all' the customers. This method is equivalent to <see cref="M:Apprenda.SaaSGrid.ProviderContext.GetCustomers(System.Int32,System.Int32)">
            ProviderContext.GetCustomers(int pageSize, int pageNumber) with (100,0)</see>"
            </summary>
            <returns>A collection of customers.</returns>
            <seealso cref="M:Apprenda.SaaSGrid.ProviderContext.GetCustomers(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.GetCustomers(System.Int32,System.Int32)">
            <summary>
            Method to retrieve a set of customers for a paged grid. This method
            will retrieve a number of customers for a given page number.
            </summary>
            <param name="pageSize">Size of the page (number of records per page).</param>
            <param name="pageNumber">The page number.</param>
            <returns>A collection of customers</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.GetCustomersForApplication(System.String,System.Int32,System.Int32)">
            <summary>
            Method to retrieve a set of customers with subscriptions to a given application. 
            This method will retrieve a number of customers for a given page. 
            </summary>
            <param name="applicationAlias">The application alias to search for.</param>
            <param name="pageSize">Number of records per page.</param>
            <param name="pageNumber">The page number.</param>
            <returns>A collection of customers</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.GetCustomersForApplication(System.Guid,System.Int32,System.Int32)">
            <summary>
            Method to retrieve a set of customers with subscriptions to a given application. 
            This method will retrieve a number of customers for a given page. 
            </summary>
            <param name="applicationId">The application id to search for.</param>
            <param name="pageSize">Number of records per page.</param>
            <param name="pageNumber">The page number.</param>
            <returns>A collection of customers</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.NewProviderContext">
            <summary>
            Creates an instance of <see cref="T:Apprenda.SaaSGrid.ProviderContext"/> using the local provider id
            </summary>
            <example>
            <code>
            using ProviderContext.NewProviderContext()
            {
            	/* Make a call to a method that requires a provider context */
            }
            </code>
            </example>
            <returns>
            A provider context for the current provider.
            </returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.ProviderContext.Current">
            <summary>
            Gets the current provider context
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.ToString">
            <summary>
            Provides debugging information for this provider context.
            </summary>
            <returns>
            Provider Context for '{0}'   
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContext.Equals(Apprenda.SaaSGrid.ProviderContext)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.ProviderContextAttribute">
            <summary>
            Marks signed methods as having to be called within a <see cref="T:Apprenda.SaaSGrid.ProviderContext"/>. The marker can dictate whether
            the context is expected as part of the call flow.
            </summary>
            <example>
            [ProviderContext]
            public void InstallApplicationSettings(ApplicationSettings settings)
            {
                ...
            }
            </example>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContextAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.ProviderContextAttribute"/> class
            requiring that the marked method be called with a <see cref="T:Apprenda.SaaSGrid.ProviderContext"/>  as the dominant
            scope in the call flow.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ProviderContextAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.ProviderContextAttribute"/> class.
            </summary>
            <param name="isRequired"><c>true</c> if the incoming call must have a dominant scope of provider context. <c>false</c> if it is not required,
            which will create one for any call not having a dominant provider context scope.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.ProviderContextAttribute.IsFlowedRequired">
            <summary>
            Gets whether or not a flowed <see cref="T:Apprenda.SaaSGrid.ProviderContext"/> is expected as a the dominant scope.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.SaaSGridSessionException">
            <summary>
            Identifies an error during the use or execution of 
            <see cref="T:Apprenda.SaaSGrid.SessionContext"/> functionality.
            Most errors have to do with errors in serialization and deserialization.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridSessionException.#ctor(System.String)">
            <summary>
            A constructor that creates an instance of this class with a message
            describing the error.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.SaaSGridSessionException.#ctor(System.String,System.Exception)">
            <summary>
            A constructor that creates an instance of this class with a message
            describing the error and a root cause for situations where the 
            error occurred for reasons other than those caused directly
            by <see cref="T:Apprenda.SaaSGrid.SessionContext"/>.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The root cause of the error.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.SessionContext">
            <summary>Allows access to data and functionality bound to the current SaaSGrid session.</summary>
            <remarks>
            This class allows for access to data that is bound to the the current SaaSGrid session scope, including information about 
            the session owner, the current application and information belonging to the current execution path subscope. 
            A SessionContext is created when a user logs into SaaSGrid and is user unique. <see cref="T:Apprenda.SaaSGrid.SessionContext"/> also acts as an access point
            for information related to the originating request for the calls querying the <see cref="T:Apprenda.SaaSGrid.SessionContext"/>.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.DominantScope">
            <summary>
            Gets the dominant scope as represented by a <see cref="T:Apprenda.SaaSGrid.IContext"/> instance. The dominant scope controls
            </summary>
            <value>The dominant scope.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.IsInitialized">
            <summary>
            Gets <c>true</c> if this <see cref="T:Apprenda.SaaSGrid.ISessionContext"/> is initialized, <c>false</c> otherwise
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.SessionContext.Activate">
            <summary>
            Active the <see cref="T:Apprenda.SaaSGrid.ISessionContext"/> if it is inactive
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the session is already active</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.SessionContext.CreateInactiveCopy">
            <summary>
            Creates a copy of the current <see cref="T:Apprenda.SaaSGrid.ISessionContext"/> that is not active against
            current execution.
            </summary>
            <returns>An inactive copy of the session</returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.RequestContext">
            <summary>
            Gets the <see cref="T:Apprenda.SaaSGrid.IRequestContext"/> representing the request owning the logical thread of execution.
            </summary>
            <value>A request context instance</value>
            <seealso cref="T:Apprenda.SaaSGrid.IRequestContext"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.Id">
            <summary>
            Gets the unique identifier for the current SaaSGrid session.
            </summary>
            <value>A unique identifier</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.Token">
            <summary>
            Gets the token for the current SaaSGrid session.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.SessionToken">
            <summary>
            Gets the token containing the current user's Apprenda session and active tenant. This token can be used for REST-based authentication
            to other applications hosted on Apprenda by setting the 'ApprendaSessionToken' cookie to its value.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.UserId">
            <summary>
            Gets the unique identifier for the user who owns this <see cref="T:Apprenda.SaaSGrid.ISessionContext"/>
            </summary>
            <value>A unique identifier representing the owning user</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.SessionContext.TenantId">
            <summary>
            Gets the unique identifier of the tenant that the owning user belongs to.
            </summary>
            <value>A unique identifier representing the tenant</value>
            <seealso cref="P:Apprenda.SaaSGrid.SessionContext.UserId"/>
        </member>
        <member name="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid">
            <summary>
            An identifier that is unique within SaaSGrid. SaaSGrid components and
            entities are assigned SaaSGridGuid's to differentiate them from one
            another.
            </summary>
            <remarks>
            Although not enforceable via this class, any entity or object that
            contains or uses a SaaSGridGuid is expected to adhere to a immutability
            contract (i.e. the SaaSGridGuid should be immutable once set or
            declared).
            </remarks>    
        </member>
        <member name="F:Apprenda.SaaSGrid.Topology.SaaSGridGuid.Empty">
            <summary>
            Represents an empty or none initialized SaaSGridGuid.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> class.
            The initialization expects a representation similar to that of the
            <see cref="T:System.Guid"/> class' string constructor.
            </summary>
            <param name="uid">The uid.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> class.
            </summary>
            <param name="uid">The uid.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.ToByteArray">
            <summary>
            Used when a byte representation of this <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> instance is
            needed.
            </summary>
            <returns>A 16 entry byte array</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.NewSaaSGridGuid">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.IsSaaSGridGuid(System.String)">
            <summary>
            Determines whether a given string is a valid <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/>
            </summary>
            <param name="str">The string to check.</param>
            <returns>True if it is, false otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.IsNullOrEmpty(Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Determines whether the specified <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> is
            null or equates to the empty guid.
            </summary>
            <param name="guid">The guid to check.</param>
            <returns>
            	<c>true</c> if it is null or empty, <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.FromByteArray(System.Byte[])">
            <summary>
            Converts the provided byte[] into a <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/>.
            </summary>
            <param name="array">A 16 entry byte array</param>
            <returns></returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The <see cref="T:System.String"/> specifying the format to use.
            -or- null to use the default format defined for the type of the 
            <see cref="T:System.IFormattable"></see> implementation.
            </param>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"></see> to use to format 
            the value.-or- null to obtain the numeric format information from 
            the current locale setting of the operating system.
            </param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the 
            current instance in the specified format.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/>
            instance.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than obj. 
            Zero This instance is equal to obj. Greater than zero 
            This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">
            obj is not the same type as this instance. </exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.CompareTo(Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Compares the current instance with another <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/>
            instance.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. The return value has the following meanings:
            Value Meaning Less than zero This object is less than the other 
            parameter.Zero This object is equal to other. Greater than zero 
            This object is greater than other.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.Equals(Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Determines whether two different <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> instances
            represent the same value.
            </summary>
            <param name="other">A <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> instance to compare with 
            this instance.</param>
            <returns>
            true if the current object is equal to the other parameter; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.ToString">
            <summary>
            Returns a string instance of a <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> in the
            8-4-4-4-12 format of 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.Equals(System.Object)">
            <summary>
            Determines whether two different <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> instances
            represent the same value.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>An int hash code.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.op_Equality(Apprenda.SaaSGrid.Topology.SaaSGridGuid,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.op_Inequality(Apprenda.SaaSGrid.Topology.SaaSGridGuid,Apprenda.SaaSGrid.Topology.SaaSGridGuid)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.op_Implicit(Apprenda.SaaSGrid.Topology.SaaSGridGuid)~System.Guid">
            <summary>
            Performs an implicit conversion from <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="rhs">The RHS.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.op_Implicit(Apprenda.SaaSGrid.Topology.SaaSGridGuid)~System.Nullable{System.Guid}">
            <summary>
            Performs an implicit conversion from <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="rhs">The RHS.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.op_Implicit(System.Nullable{System.Guid})~Apprenda.SaaSGrid.Topology.SaaSGridGuid">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/>.
            </summary>
            <param name="rhs">The RHS.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuid.op_Implicit(System.Guid)~Apprenda.SaaSGrid.Topology.SaaSGridGuid">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/>.
            </summary>
            <param name="rhs">The RHS.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Topology.SaaSGridGuidAttribute">
            <summary>
            Allows for the declarative signing of entities with a unique
            <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> identifier.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Topology.SaaSGridGuidAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuidAttribute"/> 
            class with a string. The string should be of a format matching
            the allowable string formats for <see cref="T:System.Guid"/>. This
            will translate to a <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> instance.
            </summary>
            <param name="uuid">The UUID as a string.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Topology.SaaSGridGuidAttribute.Value">
            <summary>
            Gets the <see cref="T:Apprenda.SaaSGrid.Topology.SaaSGridGuid"/> value stored by this attribute.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Apprenda.SaaSGrid.ITenantProfile">
            <summary>
            Captures standard profile information defined by your customer.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.Id">
            <summary>
            Gets the unique identifier for the tenant. This id can be used
            for tenant impersonation.
            </summary>
            <value>The unique identifier of the tenant.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.IsEnabled">
            <summary>
            Indicates whether the user associated with ths profile is allowed access. Access may be enabled or disabled platform-wide
            or only within this specific tenant.
            </summary>
            <returns>True if the user is allowed access, false if the user is not allowed access</returns>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.Name">
            <summary>
            Gets/sets the company profile name (Name of the tenant/company).
            </summary>
            <value>The name of the company.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.Url">
            <summary>
            Gets/sets a url identifying web presence for the tenant.
            </summary>
            <value>The Url.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.Alias">
            <summary>
            Gets the alias of the current tenant. 
            </summary>
            <remarks>
            Every tenant has a defined alias; this is a name chosen on creation of the account that cannot be changed and it is
            used to uniquely identify tenants in a more human readable fashion other than using a globally unique identifier. It should
            be noted that alias' can be no larger than 63 characters.
            </remarks>
            <value>The alias.</value>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.CreatedDate">
            <summary>
            Gets the date and time in UTC that this tenant was created.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.PrimaryLocation">
            <summary>
            Gets the primary location for the current tenant.
            </summary>
            <remarks>
            <para>
            Every tenant has a defined primary location in their company profile. This is basically one of the contact sections 
            that is flagged as the primary location. The primary location might be used as a default selection when prompting to select a location.
            </para>
            </remarks>
            <value>The primary location as an <see cref="T:Apprenda.SaaSGrid.IContactInfo"/>.</value>
            <seealso cref="T:Apprenda.SaaSGrid.IContactInfo"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.ITenantProfile.Administrator">
            <summary>
            Gets the administrator for the current tenant.
            </summary>
            <remarks>
            All tenants have an administrator that is responsible for administrative operations for their account and can be 
            considered a default "privileged" user. At any point they can change who the administrator is by logging in to their 
            tenant portal and changing the administrator. This property provides a simple mechanism to retrieve the active 
            administrator of the current tenant.
            </remarks>
            <value>The administrator.</value>
            <seealso cref="T:Apprenda.SaaSGrid.ITenantUser"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.SetPrimaryLocation(System.Guid)">
            <summary>
            Sets the primary contact section of the tenant.
            </summary>
            <param name="contactInfoId">The Id of the contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.SetPrimaryLocation(Apprenda.SaaSGrid.IContactInfo)">
            <summary>
            Sets the primary contact section of the tenant.
            </summary>
            <param name="contactInfo">The contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.SetAdministrator(System.Guid)">
            <summary>
            Sets the specified user as the Administrator of the tenant.
            </summary>
            <param name="userId">The Id of the user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.SetAdministrator(Apprenda.SaaSGrid.ITenantUser)">
            <summary>
            Sets the specified user as the Administrator of the tenant.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.AddContactInfo(Apprenda.SaaSGrid.ContactInfoCreationRequest)">
            <summary>
            Adds new contact information for the current tenant.
            </summary>
            <param name="contactInfo">The contact information to add.</param>
            <returns>The created contact section.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.GetContactInfo(System.Guid)">
            <summary>
            Retrieves the contact info specified by the Id.
            </summary>
            <param name="contactInfoId">The Id of the contact info to retrieve.</param>
            <returns>The persisted contact info.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.RemoveContactInfo(System.Guid)">
            <summary>
            Removes the specified contact information.
            </summary>
            <param name="contactInfoId">The Id of the contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.RemoveContactInfo(Apprenda.SaaSGrid.IContactInfo)">
            <summary>
            Removes the specified contact information.
            </summary>
            <param name="contactInfo">The contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.UpdateContactInfo(Apprenda.SaaSGrid.IContactInfo)">
            <summary>
            Update the specified contact information.
            </summary>
            <param name="contactInfo">The updated contact information.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ITenantProfile.GetContactInfo">
            <summary>
            Gets all contact information for the tenant.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.UserContext">
            <summary>
            Captures the contextual presence of a SaaSGrid user.
            </summary>
            <remarks>
            Paralleling the relationship between tenant and context via the <see cref="T:Apprenda.SaaSGrid.TenantContext"/>, SaaSGrid captures 
            information regarding a SaaSGrid user via this class. This class gives both SaaSGrid and SaaSGrid code awareness 
            to live execution information regarding a tenant's user that owns a specific session/request.
            <para>
            <see cref="T:Apprenda.SaaSGrid.UserContext"/> provides a singleton interface, allowing access to information regarding the current executing
            user. The current executing can be accessed via <c>UserContext.Instance.CurrentUser</c>. All information regarding a 
            SaaSGrid user is provided via a <see cref="T:Apprenda.SaaSGrid.ITenantUser"/> interface. There is no construct or support allowing runtime 
            code to change the current executing user. The executing user is defined strictly via an interactive login by a human 
            via SaaSGrid's standard authentication page.
            </para>
            </remarks>
            <seealso cref="T:Apprenda.SaaSGrid.ITenantUser"/>
            <seealso cref="T:Apprenda.SaaSGrid.TenantContext"/>
            <seealso cref="T:Apprenda.SaaSGrid.ProviderContext"/>
            <seealso cref="T:Apprenda.SaaSGrid.Subscription.SubscriptionContext"/>    
        </member>
        <member name="T:Apprenda.SaaSGrid.UserContext.AuthorizedAction">
            <summary>
            The action to perform.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.UserContext.CurrentUser">
            <summary>
            Provides meta-information representing the current executing user.
            </summary>
            <remarks>
            Common uses of accessing the current user include capturing meta-information that can be used later for
            customized workflow or user interface creation.
            </remarks>
            <example>
            <para>
            Various user information is accessible regarding the current user. For example, to use the <see cref="T:Apprenda.SaaSGrid.UserContext"/> to 
            print the current user's first name can be done like this:
            </para>
            <code>
                Console.WriteLine("Hello {0},", UserContext.Instance.CurrentUser().FirstName);
            </code>
            </example>
            <returns>Returns the current executing user.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserContext.IsAuthorized(System.String)">
            <summary>
            A single checkpoint for determining the current users access control mappings to defined 
            mappings for the named SaaSGrid Securable.
            </summary>
            <remarks>
            Via SaaSGrid's role to action mapping system, one can perform runtime checks via calls to this method
            to ensure that a specific user has appropriate access levels to perform a given action.
            <para>
            Users are authorized to perform securables based on intersecting the tenant defined role to action mappings with 
            the current users role membership. An empty intersection will deny access, while any non-empty intersection will 
            grant access. Clearly, "access" is defined as <c>true</c> or <c>false</c>; interpreting those results is up to the
            engineer calling this method. 
            </para>
            <para>
            For example, assume your application has a securable action named "viewTicketReport". One of your customers has mapped 
            tenant-defined roles "Manager" and "Team Lead" to this action. The following are expected outcomes for one of your customers
            users, "Jane Doe":
            <list type="bullet">
            <item>
            <term>Single Role Membership - </term>
            <description>Jane Doe is a member of any one of the roles "Manager" or "Team Lead", thereby requiring that SaaSGrid return <c>true</c> on authorization requests.</description>
            </item>
            <item>
            <term>Multi Role Membership - </term>
            <description>Jane Doe is a member of one or more of the roles "Manager" or "Team Lead", thereby requiring that SaaSGrid return <c>true</c> on authorization requests.</description>
            </item>
            <item>
            <term>No Role Membership - </term>
            <description>Jane Doe is NOT a member of ANY of the roles "Manager" or "Team Lead", thereby requiring that SaaSGrid return <c>false</c> on authorization requests.</description>
            </item>
            </list>
            </para>
            </remarks>
            <example>
            A check for authorized access to a secured section of code named "viewTicketReport" may look like this.
            <code>
                Report report = null;
                if (UserContext.Instance.IsAuthorized("viewTicketReport"))
                {
                    report = ReportEngine.Generate("TicketReport");
                }
                else
                {
                    report = ReportEngine.CreateEmptyReport("You are not authorized to view this type of report. Contact your administrator.");
                }
            </code>
            </example>
            <param name="securableName">
            Name of the securable. Each securable has a unique name which is
            the name that you should use across your application to check if 
            a user is authorized to perform a specific action.
            </param>
            <returns> This method will return <c>true</c> if the current user
            is allowed to run the secured section of code; otherwise, it will return
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserContext.IsAuthorized(System.String,System.Boolean)">
            <summary>
            A single checkpoint for determining the current users access control mappings to defined 
            mappings for the named SaaSGrid Securable.
            </summary>
            <param name="securableName">
            Name of the securable. Each securable has a unique name which is
            the name that you should use across your application to check if 
            a user is authorized to perform a specific action.
            </param>
            <param name="isRuntimeSecurable">
            Indicates if it is a runtime securable. 
            Call with <c>true</c> if it is a runtime securable, otherwise <c>false</c>.
            </param>
            <returns> This method will return <c>true</c> if the current user
            is allowed to run the secured section of code; otherwise, it will return
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserContext.ExecuteIfAuthorized(System.String,Apprenda.SaaSGrid.UserContext.AuthorizedAction)">
            <summary>
            Executes the specified action if the executing user is authorized to perform
            the defined securable.
            </summary>
            <param name="securableName">Name of the securable to validate against.</param>
            <param name="action">The action to perform.</param>
            <seealso cref="M:Apprenda.SaaSGrid.UserContext.IsAuthorized(System.String)"/>
            <exception cref="T:Apprenda.SaaSGrid.NotAuthorizedException">If the executing user is not authorized
            to perform the defined securable</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserContext.ExecuteIfAuthorized(System.String,Apprenda.SaaSGrid.UserContext.AuthorizedAction,System.String)">
            <summary>
            Executes the specified action if the executing user is authorized to perform
            the defined securable. If the user is not authorized it will return an exception
            with the specified message.
            </summary>
            <param name="securableName">Name of the securable to validate against.</param>
            <param name="action">The action to perform.</param>
            <param name="notAuthorizedMessage">The message to use in the exception in the event
            that the user is not authorized to perform the securable.</param>
            <seealso cref="M:Apprenda.SaaSGrid.UserContext.IsAuthorized(System.String)"/>
            <exception cref="T:Apprenda.SaaSGrid.NotAuthorizedException">If the executing user is not authorized
            to perform the defined securable</exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserContext.ExecuteIfAuthorized(System.String,Apprenda.SaaSGrid.UserContext.AuthorizedAction,System.Boolean)">
            <summary>
            Executes the specified action if the executing user is authorized to perform
            the defined securable. As an option you can decide to ignore failed authorizations
            instead of throwing an exception.
            </summary>
            <param name="securableName">Name of the securable to validate against.</param>
            <param name="action">The action to perform.</param>
            <param name="failSilently">If set to <c>true</c> this method will not throw an
            exception when a user is not authorized to perform the defined securable.</param>
            <seealso cref="M:Apprenda.SaaSGrid.UserContext.IsAuthorized(System.String)"/>
            <exception cref="T:Apprenda.SaaSGrid.NotAuthorizedException">If the executing user is not authorized
            to perform the defined securable and <paramref name="failSilently"/> is not set to 
            <c>true</c></exception>
        </member>
        <member name="M:Apprenda.SaaSGrid.UserContext.ExecuteIfAuthorized(System.String,Apprenda.SaaSGrid.UserContext.AuthorizedAction,System.String,System.Boolean)">
            <summary>
            Executes the specified action if the executing user is authorized to perform
            the defined securable. As an option you can decide to ignore failed authorizations
            instead of throwing an exception or specify a custom exception message.
            </summary>
            <param name="securableName">Name of the securable to validate against.</param>
            <param name="action">The action to perform.</param>
            <param name="notAuthorizedMessage">The message to use in the exception in the event
            that the user is not authorized to perform the securable.</param>
            <param name="failSilently">If set to <c>true</c> this method will not throw an
            exception when a user is not authorized to perform the defined securable.</param>
            <seealso cref="M:Apprenda.SaaSGrid.UserContext.IsAuthorized(System.String)"/>
            <exception cref="T:Apprenda.SaaSGrid.NotAuthorizedException">If the executing user is not authorized
            to perform the defined securable and <paramref name="failSilently"/> is not set to 
            <c>true</c></exception>        
        </member>
        <member name="T:Apprenda.SaaSGrid.Users.AuthenticationProviderBase">
            <summary>
            Provides methods necessary for creating a custom authentication provider for Apprenda.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ExtendedUserInfo.PrimaryLocation">
            <summary>
            Gets or sets the primary location of the user.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ExtendedUserInfo.Locations">
            <summary>
            Gets or sets the collection of locations that this user is a part of.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.GroupInfo.DisplayName">
            <summary>
            The end-user displayed name for the group
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.GroupInfo.Description">
            <summary>
            A description of the group
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.GroupInfo.Identifier">
            <summary>
            The unique identifier for the group
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Users.GroupInfoColumns">
            <summary>
            A set of flags used to indicate which fields on a <see cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/> object to search.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.Label">
            <summary>
            Gets or sets the label used to identify the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.Address">
            <summary>
            Gets or sets the street address of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.City">
            <summary>
            Gets or sets the city of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.State">
            <summary>
            Gets or sets the state of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.Country">
            <summary>
            Gets or sets the country of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.PostalCode">
            <summary>
            Gets or sets the postal code of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.AdditionalEmail">
            <summary>
            Gets or sets an additional email address for the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.PhoneNumber">
            <summary>
            Gets or sets the phone number of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.FaxNumber">
            <summary>
            Gets or sets the fax number of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.ILocation.MobileNumber">
            <summary>
            Gets or sets the mobile number of the location.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.Label">
            <summary>
            Gets or sets the label used to identify the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.Address">
            <summary>
            Gets or sets the street address of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.City">
            <summary>
            Gets or sets the city of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.State">
            <summary>
            Gets or sets the state of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.Country">
            <summary>
            Gets or sets the country of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.PostalCode">
            <summary>
            Gets or sets the postal code of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.AdditionalEmail">
            <summary>
            Gets or sets an additional email address for the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.PhoneNumber">
            <summary>
            Gets or sets the phone number of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.FaxNumber">
            <summary>
            Gets or sets the fax number of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.Location.MobileNumber">
            <summary>
            Gets or sets the mobile number of the location.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.NewTenantInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.NewTenantInfo"/> with the given alias and admin user identifier.
            </summary>
            <param name="alias">The alias of the tenant.</param>
            <param name="adminUserId">The identifier of the admin user of the tenant.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.NewTenantInfo.AdminUserId">
            <summary>
            Gets or sets the identifier of the admin user for the tenant.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.NewTenantInfo.Location">
            <summary>
            Gets or sets the location of the tenant.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.NewUserInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/> with the given parameters.
            </summary>
            <param name="identifier">The identifier of the new user.</param>
            <param name="isDeveloperPortalUser">A flag indicating whether or not the new user should have a subscription to the developer portal.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.NewUserInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/> with the given parameters.
            </summary>
            <param name="identifier">The identifier of the new user.</param>
            <param name="tenantAlias">The alias of the tenant that the new user belongs to.</param>
            <param name="isDeveloperPortalUser">A flag indicating whether or not the new user should have a subscription to the developer portal.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.NewUserInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/> with the given parameters.
            </summary>
            <param name="identifier">The identifier of the new user.</param>
            <param name="tenantAliases">The aliases of all the tenants that the new user belongs to.</param>
            <param name="isDeveloperPortalUser">A flag indicating whether or not the new user should have a subscription to the developer portal.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.NewUserInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{Apprenda.SaaSGrid.Users.UserTenantInfo})">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/> with the given parameters.
            </summary>
            <param name="identifier"></param>
            <param name="userTenantInfos"></param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.NewUserInfo.IsDeveloperPortalUser">
            <summary>
            Gets or sets a flag indicating whether or not the new user should have a subscription to the developer portal.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.NewUserInfo.Roles">
            <summary>
            Gets or sets a comma separated list of existing roles that the new user should be a part of.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.NewUserInfo.State">
            <summary>
            Gets or sets any object representing the state of the current call to <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewUserInfo(System.String)"/>.
            </summary>
            <seealso cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewTenantInfo(System.String,System.Object)"/>
            <remarks>
            When a NewUserInfo object returned from <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewUserInfo(System.String)"/> contains a tenant alias that is
            unknown to the platform it is immediately followed by a call to <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewTenantInfo(System.String,System.Object)"/>.  The
            state value from the NewUserInfo object is passed into the call to GetNewTenantInfo.  This allows synchronization
            between the two calls if necessary.
            This field is optional.
            </remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.RoleInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.RoleInfo">RoleInfo</see> with the specified name.
            </summary>
            <param name="name">Name of the role</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.RoleInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.RoleInfo">RoleInfo</see> with the specified name and description.
            </summary>
            <param name="name">Name of the role</param>
            <param name="description">Description of the role</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.RoleInfo.Name">
            <summary>
            Gets or sets the name of this role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.RoleInfo.Description">
            <summary>
            Gets or sets the description of this role.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserTenantInfo.TenantAlias">
            <summary>
            Gets or sets the alias of the tenant that the new user belongs to.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserTenantInfo.IsDeveloperPortalUser">
            <summary>
            Gets or sets a flag indicating whether or not the new user should have a subscription to the developer portal.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserTenantInfo.Roles">
            <summary>
            Gets or sets the existing roles that the new user should be a part of, specifying only the name.
            </summary>
            <remarks>
            This field is optional. This field only sets role names; for names and descriptions use AssociatedRoles.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserTenantInfo.AssociatedRoles">
            <summary>
            Gets or sets the existing roles that the new user should be a part of.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserTenantInfo.State">
            <summary>
            Gets or sets any object representing the state of the current call to <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewUserInfo(System.String)"/>.
            </summary>
            <seealso cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewTenantInfo(System.String,System.Object)"/>
            <remarks>
            When a NewUserInfo object returned from <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewUserInfo(System.String)"/> contains a tenant alias that is
            unknown to the platform it is immediately followed by a call to <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewTenantInfo(System.String,System.Object)"/>.  The
            state value from the NewUserInfo object is passed into the call to GetNewTenantInfo.  This allows synchronization
            between the two calls if necessary.
            This field is optional.
            </remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.TenantInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.NewTenantInfo"/> with the given alias and admin user identifier.
            </summary>
            <param name="alias">The alias of the tenant.</param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.TenantInfo.Alias">
            <summary>
            Gets or sets the alias of the new tenant.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.TenantInfo.Name">
            <summary>
            Gets or sets the name of the tenant.
            </summary>
            <remarks>
            This field is optional.  When no name is provided the alias will be used.
            </remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> with the given identifier.
            </summary>
            <param name="identifier">The identifier of the user.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> with the given identifier.
            </summary>
            <param name="identifier">The identifier of the user.</param>
            <param name="tenantAlias">The alias of the tenant that the user belongs to.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> with the given identifier.
            </summary>
            <param name="identifier">The identifier of the user.</param>
            <param name="tenantAliases">The aliases of all the tenants that the user belongs to.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{Apprenda.SaaSGrid.Users.UserTenantInfo})">
            <summary>
            Initializes a new instance of <see cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/> with the given parameters.
            </summary>
            <param name="identifier"></param>
            <param name="userTenantInfos"></param>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.Identifier">
            <summary>
            Gets or sets the identifier of the user.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.TenantAlias">
            <summary>
            Gets or sets the alias of the tenant that the new user belongs to.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.MemberOfTenantAliases">
            <summary>
            Gets or sets the collection of tenant aliases this user belongs to.
            </summary>
            <remarks>
            This field is required.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.Email">
            <summary>
            Gets or sets the email address of the user.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.FirstName">
            <summary>
            Gets or sets the first name of the user.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.LastName">
            <summary>
            Gets or sets the last name of the user.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.MiddleName">
            <summary>
            Gets or sets the middle name of the user.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.Suffix">
            <summary>
            Gets or sets the suffix of the user, i.e. Jr.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.Prefix">
            <summary>
            Gets or sets the prefix of the user, i.e. Mr.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.Description">
            <summary>
            Gets or sets the description of the user.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Users.UserInfo.AssociatedTenants">
            <summary>
            Gets or sets a collection of UserTenantInfo instances, each of which describes user characteristics
            specific to a single tenant.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Users.UserInfoColumns">
            <summary>
            A set of flags used to indicate which fields on an <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> object to search.
            </summary>
            <seealso cref="T:Apprenda.SaaSGrid.Users.UserInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserInfoColumnsExtensions.ToList(Apprenda.SaaSGrid.Users.UserInfoColumns)">
            <summary>
            Breaks up the flag enum into a list of the individual enums that make it up
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Users.UserProviderBase">
            <summary>
            Provides the methods necessary for the Apprenda platform to communicate with the user provider.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.Test">
            <summary>
            Returns a value indicating whether or not a connection can be made to the user provider.
            </summary>
            <returns>True when a connection can be made, false otherwise.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.Search(System.String,System.String,Apprenda.SaaSGrid.Users.UserInfoColumns,System.Int32,System.Int32,Apprenda.SaaSGrid.Users.UserInfoColumns,System.ComponentModel.ListSortDirection)">
            <summary>
            Returns a collection of <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> objects that match the given search criteria.
            The filter string is applied to all the columns specified using the OR operator.
            </summary>
            <param name="filter">The text to search for.</param>
            <param name="tenantAlias">The alias of the tenant to which users must belong.</param>
            <param name="columnFlags">The columns to apply the filter string to.</param>
            <param name="pageSize">The number of results per page that should be returned.</param>
            <param name="pageNumber">The page of results to return.</param>
            <param name="orderBy">The column to order the search results by.</param>
            <param name="orderByDirection">The direction to order the search results by.</param>
            <returns>The collection of <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> objects that match the given search criteria.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.UserInfo"/>
            <seealso cref="T:Apprenda.SaaSGrid.Users.UserInfoColumns"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetByIdentifier(System.String)">
            <summary>
            Returns the <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> instance that matches the given identifier.
            </summary>
            <param name="identifier">The identifier of the user to retrieve.</param>
            <returns>The <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> instance that matches the given identifier.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.UserInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetExtendedInfo(System.String)">
            <summary>
            Returns the <see cref="T:Apprenda.SaaSGrid.Users.ExtendedUserInfo"/> instance that matches the given identifier.
            </summary>
            <param name="identifier">The identifier of the user to retrieve.</param>
            <returns>The <see cref="T:Apprenda.SaaSGrid.Users.ExtendedUserInfo"/> instance that matches the given identifier.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.ExtendedUserInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewUserInfo(System.String)">
            <summary>
            Returns an <see cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/> instance for the user with the given identifier.
            This is called by Apprenda the first time a user with the given identifier accesses the platform.
            </summary>
            <param name="identifier">The identifier of the new user.</param>
            <returns>An <see cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/> instance for the user with the given identifier.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.NewUserInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetTenants(System.Int32,System.Int32)">
            <summary>
            Returns a collection of <see cref="T:Apprenda.SaaSGrid.Users.TenantInfo"/> objects in the given page.
            </summary>
            <param name="pageSize">The number of results per page that should be returned.</param>
            <param name="pageNumber">The page of results to return.</param>
            <returns>The collection of <see cref="T:Apprenda.SaaSGrid.Users.TenantInfo"/> objects in the given page.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.TenantInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetTenant(System.String)">
            <summary>
            Returns the <see cref="T:Apprenda.SaaSGrid.Users.TenantInfo"/> instance that matches the given alias.
            </summary>
            <param name="tenantAlias">The alias of the tenant to retrieve.</param>
            <returns>The <see cref="T:Apprenda.SaaSGrid.Users.TenantInfo"/> instance that matches the given alias.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.TenantInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewTenantInfo(System.String,System.Object)">
            <summary>
            Returns an <see cref="T:Apprenda.SaaSGrid.Users.NewTenantInfo"/> instance for the tenant with the given alias.
            This is called by Apprenda the first time a user who belongs to the given tenant accesses the platform.
            </summary>
            <param name="tenantAlias">The alias of the new tenant.</param>
            <param name="state">Any object representing the state of the preceding call to <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewUserInfo(System.String)"/>.</param>
            <returns>An <see cref="T:Apprenda.SaaSGrid.Users.NewTenantInfo"/> instance for the tenant with the given alias.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.NewTenantInfo"/>
            <seealso cref="P:Apprenda.SaaSGrid.Users.NewUserInfo.State"/>
            <remarks>
            A call to this method is always preceded by a call to <see cref="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetNewUserInfo(System.String)"/>.
            The value returned in <see cref="P:Apprenda.SaaSGrid.Users.NewUserInfo.State"/> is then passed back into this call to allow
            the implementation to coordinate the two method calls.
            </remarks>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.Authenticate(System.String,System.String)">
            <summary>
            Returns a value indicating whether or not the user with the given username and password has access to the platform.
            </summary>
            <param name="username">The username of the user.</param>
            <param name="password">The password of the user.</param>
            <returns>The user's identifier if the user with the given username and password has access to the platform, null if the user should not
            have access to the platform.</returns>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetByIdentifiers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a collection of <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> objects that match the given identifiers.
            </summary>
            <param name="identifiers">The identifiers of the users to retrieve.</param>
            <returns>The collection of <see cref="T:Apprenda.SaaSGrid.Users.UserInfo"/> objects that match the given identifiers.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.UserInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetExtendedInfo(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a collection of <see cref="T:Apprenda.SaaSGrid.Users.ExtendedUserInfo"/> objects that match the given identifiers.
            </summary>
            <param name="identifiers">The identifiers of the users to retrieve.</param>
            <returns>The collection of <see cref="T:Apprenda.SaaSGrid.Users.ExtendedUserInfo"/> objects that match the given identifiers.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.ExtendedUserInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.SearchGroups(System.String,Apprenda.SaaSGrid.Users.GroupInfoColumns,System.Int32,System.Int32,Apprenda.SaaSGrid.Users.GroupInfoColumns,System.ComponentModel.ListSortDirection)">
            <summary>
            Returns a collection of <see cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/> objects that match the given search criteria.
            The filter string is applied to all the columns specified using the OR operator.
            </summary>
            <param name="filter">The text to search for.</param>
            <param name="columnFlags">The columns to apply the filter string to.</param>
            <param name="pageSize">The number of results per page that should be returned.</param>
            <param name="pageNumber">The page of results to return.</param>
            <param name="orderBy">The column to order the search results by.</param>
            <param name="orderByDirection">The direction to order the search results by.</param>
            <returns>The collection of <see cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/> objects that match the given search criteria.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/>
            <seealso cref="T:Apprenda.SaaSGrid.Users.GroupInfoColumns"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetUserGroups(System.String)">
            <summary>
            Returns a collection of group identifiers for the groups to which a user belongs
            </summary>
            <param name="identifier">The identifier of the user.</param>
            <returns>The identifiers (<see cref="P:Apprenda.SaaSGrid.Users.GroupInfo.Identifier"/>) for all groups to which the user belongs.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/>
        </member>
        <member name="M:Apprenda.SaaSGrid.Users.UserProviderBase.GetGroupByIdentifier(System.String)">
            <summary>
            Returns the <see cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/> instance that matches the given identifier.
            </summary>
            <param name="identifier">The identifier of the group to retrieve.</param>
            <returns>The <see cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/> instance that matches the given identifier.</returns>
            <seealso cref="T:Apprenda.SaaSGrid.Users.GroupInfo"/>
        </member>
        <member name="T:Apprenda.SaaSGrid.ValueTypeCacheMissException">
            <summary>
            Thrown if a request is made for a value type against a cache, and the cache cannot find the instance. This is necessary when storing
            structs and primitives since <c>null</c> cannot be returned.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ValueTypeCacheMissException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.ValueTypeCacheMissException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Apprenda.SaaSGrid.ValueTypeCacheMissException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.ValueTypeCacheMissException"/> class.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.ValueTypeCacheMissException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.SaaSGrid.ValueTypeCacheMissException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.BlockMeter">
            <summary>
            Represents a local BLOCK application meter.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Manifest.BlockMeter.ToString">
            <summary>
            Prints friendly meter information.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.BoundaryMeter">
            <summary>
            Represents a local BOUNDARY application meter.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Manifest.BoundaryMeter.ToString">
            <summary>
            Provides friendly meter information.
            </summary>        
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.DeploymentManifest.schemaLocation">
            <summary>
            For internal use only, should not be used
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Manifest.DeploymentManifest.Load(Apprenda.FileSystem.FileSystemUri)">
            <summary>
            
            </summary>
            <param name="manifestUri"></param>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.IMeter">
            <summary>
            Interface that provides common structure for application meters.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.IMeter.Name">
            <summary>
            The name of the meter.
            </summary>
            <remarks>
            All meters must be named.
            </remarks>        
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.IMeter.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.LimiterMeter">
            <summary>
            Represents a local LIMITER application meter.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Manifest.LimiterMeter.ToString">
            <summary>
            Provides friendly meter information.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.MeterBase">
            <summary>
            Abstract class that provides the common properties of application meters.    
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.MeterBase.Name">
            <summary>
            The name of the meter.
            </summary>        
            <remarks>
            All meters must be named.
            </remarks>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.MeterBase.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.MeterType">
            <summary>
            Provides an enumeration of the valid application meter types.
            </summary>
        </member>
        <member name="M:Apprenda.SaaSGrid.Manifest.PersistenceOptions.UpdateManifestPersistenceProvisioning(Apprenda.FileSystem.FSDirectory)">
            <summary>
            Guarantees that the manifest indicates the scripts to use and the DBMS.
            </summary>
            <param name="scripts"></param>
            <returns>returns true if a useful change was made to the manifest</returns>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.PersistencePatch">
            <summary>
            Defines a database patch script.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.PersistencePatch.Type">
            <summary>
            Gets or sets the type of patch script.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.PersistencePatch.Path">
            <summary>
            Gets or sets the relative path inside the patch archive for this patch script.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.PersistenceRollbackScript">
            <summary>
            Defines a database rollback script.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.PersistenceRollbackScript.Path">
            <summary>
            Gets or sets the relative path inside the patch archive for this patch script.
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.ProvisioningOption.Path">
            <summary>
            Path &amp; Scripts need to be treated as mutually exclusive
            </summary>
        </member>
        <member name="P:Apprenda.SaaSGrid.Manifest.Securable.Name">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="M:Apprenda.SaaSGrid.Manifest.Securable.ToString">
            <summary>
            Provides friendly user information.
            </summary>
            <remarks>
            Format: 'Name'        
            </remarks>
        </member>
        <member name="T:Apprenda.SaaSGrid.Manifest.ToggleMeter">
            <summary>
            Represents a local toggle application meter.
            </summary>
        </member>
        <member name="T:Apprenda.SaaSGrid.ProviderResolverFactory">
            <summary>
            Provides factory instantiation for <see cref="T:Apprenda.SaaSGrid.IProviderResolver"/> instances.
            </summary>
            <remarks>
            This class is used by SaaSGrid and provides no functionality to application code.
            </remarks>
        </member>
        <member name="P:Apprenda.ServiceHosting.Security.Session.ContextScopeManager.DominantScope">
            <summary>
            Gets the dominant scope as represented by a <see cref="T:Apprenda.SaaSGrid.IContext"/> instance. The dominant scope controlls
            </summary>
            <value>The dominant scope.</value>
        </member>
        <member name="T:Apprenda.API.Extension.Placement.IPlacementExtensionService">
            <summary>
            Exposes a service that Apprenda will use when determining which target to place new workloads and tenant shards on. Implementors should derive from <see cref="T:Apprenda.API.Extension.Placement.PlacementExtensionServiceBase"/>
            rather than implementing this contract directly as the base implementation guarantees continued compatibility with future versions of Apprenda.
            </summary>
        </member>
        <member name="M:Apprenda.API.Extension.Placement.IPlacementExtensionService.FilterHostsForNewWorkload(System.Collections.Generic.IEnumerable{Apprenda.SaaSGrid.Extensions.DTO.TargetDTO},Apprenda.SaaSGrid.ComponentType)">
            <summary>
            Allows the extension to filter the hosts that will be considered by Apprenda for placement of a new workload. This method will be called
            after all Apprenda filtering has taken place so that only valid candidates for the component will be supplied.
            </summary>
            <param name="potentialHosts">The hosts Apprenda has determined to be valid targets for the new workload.</param>
            <param name="componentType">The type of component being deployed.</param>
            <returns>The hosts that should be used in the final selection of a target for the new workload.</returns>
        </member>
        <member name="M:Apprenda.API.Extension.Placement.IPlacementExtensionService.FilterHostsForNewTenantShard(System.Collections.Generic.IEnumerable{Apprenda.SaaSGrid.Extensions.DTO.TargetDTO},Apprenda.SaaSGrid.ComponentType)">
            <summary>
            Allows the extension to filter the hosts that will be considered by Apprenda for placement of a new shard for a tenant. This method will be called
            after all Apprenda filtering has taken place so that only valid candidates for the component will be supplied.
            </summary>
            <param name="potentialHosts">The hosts Apprenda has determined to be valid targets for the new workload.</param>
            <param name="componentType">The type of component being deployed.</param>
            <returns>The hosts that should be used in the final selection of a target for the new workload.</returns>
        </member>
        <member name="T:Apprenda.API.Extension.Placement.PlacementExtensionServiceBase">
            <summary>
            An implementation of <see cref="T:Apprenda.API.Extension.Placement.IPlacementExtensionService"/> that will maintain compatibility with implementors in future versions of Apprenda.
            </summary>
        </member>
        <member name="T:Apprenda.Configuration.ConfigurationProvider">
            <summary>
            A class with mechanisms that uses a probing heuristic for discovering an
            appropriate <see cref="T:System.Configuration.Configuration"/>. This class
            relies on a priority chain for probing. 
            </summary>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetConfiguration">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <returns>A configuration instance, or null if not found.</returns>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetConfigurationSection(System.String)">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <returns>A configuration instance, or null if not found.</returns>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.RefreshConfigurationSection(System.String)">
            <summary>
            Forces the configuration section to be reloaded from disk on the next read.
            </summary>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetConfiguration(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <param name="initParams">A dictionary of values that can be used to initialize
            properties with matching key names.</param>
            <returns>A configuration instance, or null if not found.</returns>
            <exception cref="T:Apprenda.Utility.Windows.ConfigurationShimException">
            Thrown if an expected error is encountered while loading a configuration.</exception>
        </member>
        <member name="P:Apprenda.Configuration.ConfigurationProvider.ProbePath">
            <summary>
            Gets an array of strings that identifies the ordered path that 
            this provider uses for discovering a configuration file.
            </summary>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetConnectionSettings(System.String)">
            <summary>
            Gets configured meta-information pertaining to a named connection string from the standard 'connectionStrings' section.
            </summary>
            <param name="connectionName">The name of the configured connection string.</param>
            <returns>A <see cref="T:System.Configuration.ConnectionStringSettings"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'sectionName' is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'sectionName' does not point to a ConnectionStringsSection .</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetConnectionSettings(System.String,System.String)">
            <summary>
            Gets configured meta-information pertaining to a named connection string.
            </summary>
            <param name="sectionName">The ConnectionStringsSection name to search for the 'connectionName'</param>
            <param name="connectionName">The name of the configured connection string.</param>
            <returns>A <see cref="T:System.Configuration.ConnectionStringSettings"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'sectionName' is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'sectionName' does not point to a ConnectionStringsSection .</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetConnection(System.String)">
            <summary>
            Creates an unopened <see cref="T:System.Data.Common.DbConnection"/> based on meta-information configured in the settings provided by the
            'connectionName' configuration in the default 'connectionStrings' section.
            </summary>
            <param name="connectionName">The name of the configured connection.</param>
            <returns>A connection to a database.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'sectionName' is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'sectionName' does not point to a ConnectionStringsSection .</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetConnection(System.String,System.String)">
            <summary>
            Creates an unopened <see cref="T:System.Data.Common.DbConnection"/> based on meta-information configured in the settings provided by the
            'connectionName' configuration.
            </summary>
            <param name="sectionName">The name of the ConnectionStringsSection.</param>
            <param name="connectionName">The name of the configured connection.</param>
            <returns>A connection to a database.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'sectionName' is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'sectionName' does not point to a ConnectionStringsSection .</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetSetting``1(System.String,``0)">
            <summary>
            Gets an instance of the template type using the value stored in appSettings at a specified
            key as the instantiation value for T's constructor.
            </summary>
            <typeparam name="T">The type to retrieve the setting as.</typeparam>
            <param name="settingsKey">The appSettings lookup key.</param>
            <param name="valueIfNone">The value to return in the event that the key is not found.</param>
            <returns>An instance of T created via a string constructor call using the setting value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'settingsKey' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'T' has no string constructor.</exception>
            <exception cref="T:System.FormatException">Thrown if the value at 'settingKey' is not a valid string representation of 'T'</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetSetting``1(System.String)">
            <summary>
            Gets an instance of the template type using the value stored in appSettings at a specified
            key as the instantiation value for T's constructor.
            </summary>
            <typeparam name="T">The type to retrieve the setting as.</typeparam>
            <param name="settingsKey">The appSettings lookup key.</param>
            <returns>An instance of T created via a string constructor call using the setting value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'settingsKey' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'T' has no string constructor.</exception>
            <exception cref="T:System.FormatException">Thrown if the value at 'settingKey' is not a valid string representation of 'T'</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetSetting``1(System.String,System.String)">
            <summary>
            Gets an instance of the template type using the value stored in appSettings at a specified
            key as the instantiation value for T's constructor.
            </summary>
            <typeparam name="T">The type to retrieve the setting as.</typeparam>
            <param name="sectionName">The name of the AppSettingsSection to lookup the setting in.</param>
            <param name="settingsKey">The appSettings lookup key.</param>
            <returns>An instance of T created via a string constructor call using the setting value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'settingsKey' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'T' has no string constructor or if the sectionName does not point to an AppSettingsSection.</exception>
            <exception cref="T:System.FormatException">Thrown if the value at 'settingKey' is not a valid string representation of 'T'</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetSetting``1(System.String,System.String,``0)">
            <summary>
            Gets an instance of the template type using the value stored in appSettings at a specified
            key as the instantiation value for T's constructor. If the key is not found, the value of
            <paramref name="valueIfNone"/> will be returned.
            </summary>
            <typeparam name="T">The type to retrieve the setting as.</typeparam>
            <param name="sectionName">The name of the AppSettingsSection to lookup the setting in.</param>
            <param name="settingsKey">The appSettings lookup key.</param>
            <param name="valueIfNone">The value to return in the event that the key is not found.</param>
            <returns>An instance of T created via a string constructor call using the setting value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'settingsKey' is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if 'T' has no string constructor or if the sectionName does not point to an AppSettingsSection.</exception>
            <exception cref="T:System.FormatException">Thrown if the value at 'settingKey' is not a valid string representation of 'T'</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetSetting(System.String)">
            <summary>
            Gets an appSetting from the default 'appSettings' section.
            </summary>
            <param name="settingsKey">The appSetting key</param>
            <returns>The string value of the setting</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'settingsKey' is null or empty</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetSetting(System.String,System.String)">
            <summary>
            Gets an appSetting
            </summary>
            <param name="sectionName">The name of the AppSettingsSection to lookup the setting in.</param>
            <param name="settingsKey">The appSetting key</param>
            <returns>The string value of the setting</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'settingsKey' is null or empty</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sectionName does not point to an AppSettingsSection</exception>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationProvider.GetSetting(System.String,System.String,System.String)">
            <summary>
            Gets an appSetting. If the key is not found, the value of
            <paramref name="valueIfNone"/> will be returned.
            </summary>
            <param name="sectionName">The name of the AppSettingsSection to lookup the setting in.</param>
            <param name="settingsKey">The appSetting key</param>
            <param name="valueIfNone">The value to return in the event that the key is not found.</param>
            <returns>The string value of the setting</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if 'settingsKey' is null or empty</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sectionName does not point to an AppSettingsSection</exception>
        </member>
        <member name="T:Apprenda.Configuration.ConfigurationShimException">
            <summary>
            Thrown if an error occurs while a <see cref="T:Apprenda.Configuration.IConfigurationShim"/> implementation
            is loading a <see cref="T:System.Configuration.Configuration"/>.
            </summary>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationShimException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ConfigurationShimException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="shimType">Type of the shim.</param>
        </member>
        <member name="P:Apprenda.Configuration.ConfigurationShimException.ShimType">
            <summary>
            Gets the shim type being used when the exception occurred.
            </summary>
        </member>
        <member name="P:Apprenda.Configuration.ConfigurationShim.Name">
            <summary>
            Gets a human-readable name for the shim. The name should provide insight as to
            where the shim loads from.
            </summary>
            <value></value>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationShim.GetConfiguration">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <returns>
            A configuration instance, or null if not found.
            </returns>
        </member>
        <member name="M:Apprenda.Configuration.ConfigurationShim.GetConfiguration(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <param name="initParams">A dictionary of values that can be used to initialize
            properties with matching key names.</param>
            <returns>
            A configuration instance, or null if not found.
            </returns>
        </member>
        <member name="T:Apprenda.Configuration.ExeConfigurationShim">
            <summary>
            Retrieves <see cref="T:System.Configuration.Configuration"/> for standalone
            applications.
            </summary>
        </member>
        <member name="M:Apprenda.Configuration.ExeConfigurationShim.GetConfiguration">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <returns>
            A configuration instance, or null if not found.
            </returns>
        </member>
        <member name="T:Apprenda.Configuration.IConfigurationShim">
            <summary>
            <see cref="T:Apprenda.Configuration.IConfigurationShim"/> provides behavior that defines an 
            expected mechanism for retrieving <see cref="T:System.Configuration.Configuration"/>
            instances.
            </summary>
        </member>
        <member name="P:Apprenda.Configuration.IConfigurationShim.Name">
            <summary>
            Gets a human-readable name for the shim. The name should provide insight as to 
            where the shim loads from.
            </summary>
        </member>
        <member name="M:Apprenda.Configuration.IConfigurationShim.GetConfiguration">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <returns>A configuration instance, or null if not found.</returns>
        </member>
        <member name="M:Apprenda.Configuration.IConfigurationShim.Refresh(System.String)">
            <summary>
            Refreshes a specific section of the configuration file, causing it to be re-read from disk.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Apprenda.Configuration.IConfigurationShim.GetConfiguration(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets a <see cref="T:System.Configuration.Configuration"/>, as defined
            by the shim implementation.
            </summary>
            <param name="initParams">A dictionary of values that can be used to initialize
            properties with matching key names.</param>
            <returns>A configuration instance, or null if not found.</returns>
        </member>
        <member name="T:Apprenda.Configuration.WebConfigurationShim">
            <summary>
            Retrieves <see cref="T:System.Configuration.Configuration"/> for standalone
            applications.
            </summary>
        </member>
        <member name="T:Apprenda.Utility.DataAccess.InvalidQueryException">
            <summary>
            Thrown when an error is discovered during <see cref="T:Apprenda.Utility.DataAccess.Query"/> pre-interpretation processing
            </summary>
        </member>
        <member name="M:Apprenda.Utility.DataAccess.InvalidQueryException.#ctor(Apprenda.Utility.DataAccess.Query,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.Utility.DataAccess.InvalidQueryException"/> class.
            </summary>
            <param name="invalidQuery">The invalid query.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Apprenda.Utility.DataAccess.InvalidQueryException.#ctor(Apprenda.Utility.DataAccess.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.Utility.DataAccess.InvalidQueryException"/> class.
            </summary>
            <param name="invalidQuery">The invalid query.</param>
        </member>
        <member name="T:Apprenda.Utility.DataAccess.InvalidQueryFault">
            <summary>
            A fault capturing a <see cref="T:Apprenda.Utility.DataAccess.Query"/> that was blocked during pre-interpretation phases because
            it represents a query that is un-interpretable (according to the acceptors rules)
            </summary>
        </member>
        <member name="M:Apprenda.Utility.DataAccess.InvalidQueryFault.#ctor(Apprenda.Utility.DataAccess.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.Utility.DataAccess.InvalidQueryFault"/> class.
            </summary>
            <param name="invalidQuery">The failed query.</param>
        </member>
        <member name="P:Apprenda.Utility.DataAccess.InvalidQueryFault.InvalidQuery">
            <summary>
            Gets the invalid query.
            </summary>
        </member>
        <member name="T:Apprenda.Utility.DataAccess.QueryInterpretationException">
            <summary>
            An instance of this class identifies an error during interpretation of
            a <see cref="T:Apprenda.Utility.DataAccess.Query"/> instance.
            </summary>
        </member>
        <member name="M:Apprenda.Utility.DataAccess.QueryInterpretationException.#ctor(Apprenda.Utility.DataAccess.Query,System.String,System.String)">
            <summary>
            Creates an instance identifying the problematic query, interpreter,
            and additional information.
            </summary>
            <param name="problemQuery">The query that was being interpreted
            when the exception occurred.</param>
            <param name="interpreterName">A string identifying the interpreter
            implementation.</param>
            <param name="message">A message.</param>
        </member>
        <member name="M:Apprenda.Utility.DataAccess.QueryInterpretationException.#ctor(Apprenda.Utility.DataAccess.Query,System.String)">
            <summary>
            Creates an instance identifying the problematic query, interpreter,
            and additional information.
            </summary>
            <param name="problemQuery">The query that was being interpreted
            when the exception occurred.</param>
            <param name="interpreterName">A string identifying the interpreter
            implementation.</param>
        </member>
        <member name="T:Apprenda.Utility.DataAccess.QueryInterpretationFault">
            <summary>
            A fault capturing errors related to interpreting a <see cref="T:Apprenda.Utility.DataAccess.Query"/> instance from its invariant form to
            a datasource specific form.
            </summary>
        </member>
        <member name="M:Apprenda.Utility.DataAccess.QueryInterpretationFault.#ctor(Apprenda.Utility.DataAccess.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.Utility.DataAccess.QueryInterpretationFault"/> class.
            </summary>
            <param name="failedQuery"></param>
        </member>
        <member name="M:Apprenda.Utility.DataAccess.QueryInterpretationFault.#ctor(Apprenda.Utility.DataAccess.Query,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Apprenda.Utility.DataAccess.QueryInterpretationFault"/> class.
            </summary>
            <param name="failedQuery">The query that caused the problem</param>
            <param name="interpreterName">Name of the interpreter used when the fault occurred.</param>
        </member>
        <member name="P:Apprenda.Utility.DataAccess.QueryInterpretationFault.InterpreterName">
            <summary>
            Gets the name of the interpreter.
            </summary>
            <value>The name of the interpreter.</value>
        </member>
        <member name="P:Apprenda.Utility.DataAccess.QueryInterpretationFault.FailedQuery">
            <summary>
            Gets the query that failed interpretation
            </summary>
            <value>The failed query.</value>
        </member>
        <member name="T:Apprenda.Services.Logging.Config.ApprendaLoggerCustomSection">
            <summary>
            This custom section is responsible for handling configuration
            sections that define loggers as well as global Apprenda logger
            attributes, such as what the default logger is.
            </summary>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.ApprendaLoggerCustomSection.Default">
            <summary>
            Gets or sets the name of the default logger implementation.
            This is the LogManager/ILogger pair that will be returned
            when the generic <see cref="M:Apprenda.Services.Logging.LogManager.Instance"/>
            is called
            </summary>
            <value>The name of the LogManager to use by default</value>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.ApprendaLoggerCustomSection.Loggers">
            <summary>
            Gets a Collection of Logger Elements that are defined in the configuration
            </summary>
            <value>The Collection of Loggers</value>
            <seealso cref="N:Apprenda.Services.Logging.Config"/>
        </member>
        <member name="T:Apprenda.Services.Logging.Config.LoggerElementCollection">
            <summary>
            A Collection of LoggerElement ConfigurationElements.
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.Config.LoggerElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Apprenda.Services.Logging.Config.LoggerElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Apprenda.Services.Logging.Config.LoggerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified LoggerElement
            </summary>
            <param name="element">The <see cref="T:Apprenda.Services.Logging.Config.LoggerElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:string"></see> that acts as the key for the specified <see cref="T:Apprenda.Services.Logging.Config.LoggerElement"></see>.
            </returns>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file.
            </summary>
            <value></value>
            <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.Config.LoggerElementCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:T:Apprenda.Services.Logging.Config.LoggerElement"></see> 
            exists in the <see cref="T:Apprenda.Services.Logging.Config.LoggerElementCollection"></see>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            true if the element exists in the collection; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> of this collection.</returns>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElementCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:LoggerElement"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:LoggerElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Apprenda.Services.Logging.Config.LoggerElement">
            <summary>
            A ConfigrationElement that maps to an Apprenda Logging
            configuration tag for an ILogger implementation entry.
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.Config.LoggerElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LoggerElement"/> class.
            </summary>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElement.Manager">
            <summary>
            Gets or sets the manager Type for this Logger
            </summary>
            <value>The manager type</value>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElement.Assembly">
            <summary>
            Gets or sets the Assembly that the Manager type is found in
            </summary>
            <value>The Assembly the manager Type is found in</value>
        </member>
        <member name="P:Apprenda.Services.Logging.Config.LoggerElement.Default">
            <summary>
            Gets or sets the default named logger for the given implementation.
            This generally maps to a named logger on the underlying logger (i.e.
            Log4Net)
            </summary>
            <value>The defaultname logger</value>
        </member>
        <member name="T:Apprenda.Services.Logging.Config.LoggerConfigurationException">
            <summary>
            LoggerConfigurationException should be used to describe and deliver Exceptions
            relating to or directly stemming from configuration abnormalities. For example,
            if an invalid default manager is specified in the configuration section,
            then it would reasonable to throw a LoggerConfigurationException. If an error
            occurs at runtime (such as an inability to send a log message to a wrapped logger)
            that is independent of configuration, it is more logical to use and throw a
            <see cref="T:Apprenda.Services.Logging.LoggerException"/>
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.Config.LoggerConfigurationException.#ctor">
            <summary>
            A blank default constructor
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.Config.LoggerConfigurationException.#ctor(System.String)">
            <summary>
            A constructor which builds a LoggerConfigurationException delivering
            a specific message.
            </summary>
            <param name="message">The message defining the LoggerConfigurationException</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Config.LoggerConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            A constructor that wraps an inner exception and augments the Exception
            description through its own message.
            </summary>
            <param name="message">The message giving more detail to the inner exception</param>
            <param name="innerException">The root cause of the Exception</param>
        </member>
        <member name="T:Apprenda.Services.Logging.LogLevel">
            <summary>
            LogLevel defines the various settings that dictate when the logger
            should process which log messages. Each enumeration entry is described
            in the 'Members' section of this documentation.
            </summary>
        </member>
        <member name="F:Apprenda.Services.Logging.LogLevel.Off">
            <summary>
            Off indicates that all logging requests will be ignored.
            </summary>
        </member>
        <member name="F:Apprenda.Services.Logging.LogLevel.Debug">
            <summary>
            Debug represents the broadest logging level. It processes
            all requests made at the Debug level as well as any requests at any other
            level. This could generate logs that are quite large and is generally not
            suited for a production environment.
            </summary>
        </member>
        <member name="F:Apprenda.Services.Logging.LogLevel.Info">
            <summary>
            Info is the next level of granularity after Debug. Any messages
            that are Info level or higher are processed, ignoring any calls to explicit
            Debug level requests.
            </summary>
        </member>
        <member name="F:Apprenda.Services.Logging.LogLevel.Warn">
            <summary>
            Warn is the next level of granularity after Info. Any messages
            that are Warn level or higher are processed, ignoring any calls to explicit
            Debug and Info level requests.
            </summary>
        </member>
        <member name="F:Apprenda.Services.Logging.LogLevel.Error">
            <summary>
            Error is the next level of granularity after Warn. Any messages
            that are Error level or higher are processed, ignoring any calls to explicit
            Debug, Info, and Warn level requests.
            </summary>
        </member>
        <member name="F:Apprenda.Services.Logging.LogLevel.Fatal">
            <summary>
            Fatal is the next level of granularity after Error. It is generally
            reserved for severe situations that would render the calling application/library
            unstable or unusable. Any messages that are Fatal level or higher are processed,
            ignoring any calls to explicit Debug, Info, Warn, and Error level requests.
            </summary>
        </member>
        <member name="T:Apprenda.Services.Logging.ILogger">
            <summary>
            The ILogger interface provides a basic logging contract between the Apprenda
            Logging Services and the client application making the log requests.
            
            ILogger's goals include provide a minimally invasive, easy to use interface that
            allows for logging access to all possible LogLevels. In order to retrieve an
            implementation of an ILogger interface, use the Apprenda.Services.Logging.LogManager
            class.
            </summary>
            <seealso cref="T:Apprenda.Services.Logging.LogManager"/>    
        </member>
        <member name="P:Apprenda.Services.Logging.ILogger.IsDebugEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Debug
            requests
            </summary>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.ILogger.IsInfoEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Info
            requests
            </summary>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.ILogger.IsWarnEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Warn
            requests
            </summary>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.ILogger.IsErrorEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Error
            requests
            </summary>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.ILogger.IsFatalEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Fatal
            requests
            </summary>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.ILogger.IsOff">
            <summary>
            Determines whether or not the logger is on/off
            </summary>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.ILogger.WrappedLogger">
            <summary>
            Retrieves the underlying logger implementation, allowing a calling client
            to access and modify custom implementation properties directly.
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Debug(System.Object)">
            <summary>
            Debug requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Debug)
            </summary>
            <param name="message">The message to log</param>        
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            Debug requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any 
            configured formatting options. It is equivalent to calling 
            Logger.Log(string,Exception,LogLevel.Debug)
            </summary>
            <param name="message">The message to log</param>        
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Debug overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            
            log.Debug("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Debug overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            
            log.Debug(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Info(System.Object)">
            <summary>
            Info requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Info)
            </summary>
            <param name="message">The message to log</param>        
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
            Info requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any 
            configured formatting options. It is equivalent to calling 
            Logger.Log(string,Exception,LogLevel.Info)
            </summary>
            <param name="message">The message to log</param>        
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Info overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            
            log.Info("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Info overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            
            log.Info(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Warn(System.Object)">
            <summary>
            Warn requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Warn)
            </summary>
            <param name="message">The message to log</param>        
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            Warn requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any 
            configured formatting options. It is equivalent to calling 
            Logger.Log(string,Exception,LogLevel.Warn)
            </summary>
            <param name="message">The message to log</param>        
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Warn overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            
            log.Warn("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Warn overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            
            log.Warn(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Error(System.Object)">
            <summary>
            Error requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Error)
            </summary>
            <param name="message">The message to log</param>        
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
            Error requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any 
            configured formatting options. It is equivalent to calling 
            Logger.Log(string,Exception,LogLevel.Error)
            </summary>
            <param name="message">The message to log</param>        
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Error overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            
            log.Error("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Error overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            
            log.Error(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Fatal(System.Object)">
            <summary>
            Fatal requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Fatal)
            </summary>
            <param name="message">The message to log</param>        
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            Fatal requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any 
            configured formatting options. It is equivalent to calling 
            Logger.Log(string,Exception,LogLevel.Fatal)
            </summary>
            <param name="message">The message to log</param>        
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Fatal overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            
            log.Fatal("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Fatal overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            
            log.Fatal(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>        
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Log(System.Object,Apprenda.Services.Logging.LogLevel)">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter.
            </summary>
            <param name="message">The message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Log(System.Object,System.Exception,Apprenda.Services.Logging.LogLevel)">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that caused the log request</param>
            <param name="logLevel">The LogLevel to log at</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Log(System.String,Apprenda.Services.Logging.LogLevel,System.Object[])">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter. This overload is a scriptable message
            overload that works similar to Console.WriteLine(string, params).
            </summary>
            <param name="message">The scriptable message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
            <param name="objects">The parameters to inject into the scriptable message</param>
        </member>
        <member name="M:Apprenda.Services.Logging.ILogger.Log(System.IFormatProvider,System.String,Apprenda.Services.Logging.LogLevel,System.Object[])">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter. This overload is a scriptable message
            overload that works similar to Console.WriteLine(string, params).
            </summary>
            <param name="formatProvider">The IFormatProvider implementation to use</param>
            <param name="message">The scriptable message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
            <param name="objects">The parameters to inject into the scriptable message</param>
        </member>
        <member name="T:Apprenda.Services.Logging.Impl.MockLogger">
            <summary>
            Mock logging instance that implements the logging contract and writes everything to the console.
            </summary>
        </member>
        <member name="P:Apprenda.Services.Logging.Impl.MockLogger.IsDebugEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Debug
            requests; always returns true.
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.Impl.MockLogger.IsInfoEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Info
            requests; always returns true.
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.Impl.MockLogger.IsWarnEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Warn
            requests; always returns true.
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.Impl.MockLogger.IsErrorEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Error
            requests; always returns true.
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.Impl.MockLogger.IsFatalEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Fatal
            requests; always returns true.
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.Impl.MockLogger.IsOff">
            <summary>
            Determines whether or not the logger is on/off; always returns true.
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.Impl.MockLogger.WrappedLogger">
            <summary>
            Retrieves the underlying logger implementation, allowing a calling client
            to access and modify custom implementation properties directly; always returns true.
            </summary>
            <value></value>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Debug(System.Object)">
            <summary>
            Debug requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Debug); always logs to console.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Debug(System.Object,System.Exception)">
            <summary>
            Debug requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Debug); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Debug overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Debug("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Debug overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Debug(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Info(System.Object)">
            <summary>
            Info requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Info); always logs to console.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Info(System.Object,System.Exception)">
            <summary>
            Info requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Info); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Info overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Info("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Info overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Info(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Warn(System.Object)">
            <summary>
            Warn requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Warn); always logs to console.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Warn(System.Object,System.Exception)">
            <summary>
            Warn requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Warn); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Warn overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Warn("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Warn overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Warn(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Error(System.Object)">
            <summary>
            Error requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Error); always logs to console.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Error(System.Object,System.Exception)">
            <summary>
            Error requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Error); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Error overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Error("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Error overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Error(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Fatal(System.Object)">
            <summary>
            Fatal requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Fatal); always logs to console.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Fatal requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Fatal); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Fatal overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Fatal("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Fatal overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]); always logs to console.
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Fatal(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Log(System.Object,Apprenda.Services.Logging.LogLevel)">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter; always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Log(System.Object,System.Exception,Apprenda.Services.Logging.LogLevel)">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter; always logs to console.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that caused the log request</param>
            <param name="logLevel">The LogLevel to log at</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Log(System.String,Apprenda.Services.Logging.LogLevel,System.Object[])">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter. This overload is a scriptable message
            overload that works similar to Console.WriteLine(string, params); always logs to console.
            </summary>
            <param name="message">The scriptable message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
            <param name="objects">The parameters to inject into the scriptable message</param>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogger.Log(System.IFormatProvider,System.String,Apprenda.Services.Logging.LogLevel,System.Object[])">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter. This overload is a scriptable message
            overload that works similar to Console.WriteLine(string, params); always logs to console.
            </summary>
            <param name="formatProvider">The IFormatProvider implementation to use</param>
            <param name="message">The scriptable message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
            <param name="objects">The parameters to inject into the scriptable message</param>
        </member>
        <member name="T:Apprenda.Services.Logging.Impl.MockLogManager">
            <summary>
            A <see cref="T:Apprenda.Services.Logging.Impl.MockLogManager"/> produces <see cref="T:Apprenda.Services.Logging.Impl.MockLogger"/> instances.
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogManager.GetLogger(System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.Impl.MockLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogManager.GetLogger(System.String,System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.Impl.MockLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogManager.GetLogger(System.Type)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.Impl.MockLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogManager.GetLogger(System.Type,System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.Impl.MockLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.Impl.MockLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.Impl.MockLogManager.GetLogger">
            <returns>A new <see cref="T:Apprenda.Services.Logging.Impl.MockLogger"/> instance.</returns>
        </member>
        <member name="T:Apprenda.Services.Logging.LoggerException">
            <summary>
            LoggerException should be used to push implementation Exceptions up to
            the client code <i>that did not</i> originate from configuration issues.
            For configuration related exceptions, it is recommended that an implementation
            use <see cref="T:Apprenda.Services.Logging.Config.LoggerConfigurationException"/>
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.LoggerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            A serializing constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Apprenda.Services.Logging.LoggerException.#ctor">
            <summary>
            The empty constructor
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.LoggerException.#ctor(System.String)">
            <summary>
            A constructor which builds a LoggerConfigurationException delivering
            a specific message.
            </summary>
            <param name="message">The message defining the LoggerConfigurationException</param>
        </member>
        <member name="M:Apprenda.Services.Logging.LoggerException.#ctor(System.String,System.Exception)">
            <summary>
            A constructor that wraps an inner exception and augments the exception
            description through its own message.
            </summary>
            <param name="message">The message giving more detail to the inner exception</param>
            <param name="innerException">The root cause of the Exception</param>
        </member>
        <member name="T:Apprenda.Services.Logging.LogManager">
            <summary>
            The LogManager Class has a main responsibility of providing logger
            instances to requesting client classes. 
            
            The LogManager handles loading a specific LogManager implementation 
            which accepts requests to load actual ILogger implementations to 
            instances of the implementation.
            </summary>
        </member>
        <member name="P:Apprenda.Services.Logging.LogManager.DefaultLoggerName">
            <summary>
            Gets or sets the name of the default logger.
            </summary>
            <value>The name of the default logger.</value>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.Instance">
            <summary>
            Returns the default configured instance of the LogManager
            </summary>
            <returns>The default configured instance of the LogManager
            or null if one was never configured</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.Instance(System.String)">
            <summary>
            A LogManager instance matching the fully qualified type name
            provided as a parameter.
            </summary>
            <param name="name">A name that matches an implementation
            reference in the .config file for Apprenda Logger</param>
            <returns>A LogManager instance matching the provided qualified
            name</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.AddManager(System.String,Apprenda.Services.Logging.LogManager)">
            <summary>
            Allows a <see cref="T:Apprenda.Services.Logging.LogManager"/> to be added at runtime.
            </summary>
            <param name="name">The name to bind the LogManager to. Pass 'null' if the LogManager should be used as default.</param>
            <param name="logManager">The LogManager to install.</param>
        </member>
        <member name="P:Apprenda.Services.Logging.LogManager.NamedLogManagers">
            <summary>
            Returns a copy of the collection of installed named <see cref="T:Apprenda.Services.Logging.LogManager"/> instances.
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.GetConfigurationSection">
            <summary>
            Gets the configuration section from the application configuration file. 
            The expected name for the configuration section is defined in the 
            static constant 'CONFIGURATION_SECTION'.
            </summary>
            <returns>The ApprendaLoggerCustomSection extracted from the information
            found in the configuration file</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.GetLogger">
            <summary>
            Returns an ILogger instance that is defined as the default logger
            for a given LogManager. This may or may not have relevance, depending
            on the implementation
            </summary>
            <returns>An ILogger instance</returns>
            <exception cref="T:Apprenda.Services.Logging.Config.LoggerConfigurationException">
            Thrown if there is an exception getting the ILogger instance or the 
            method is not valid for the specified LogManager subclass.
            </exception>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Returns an ILogger instance matching the specified loggerName.
            The ILogger instance would have to be configured to have this name.
            </summary>
            <param name="loggerName">The name of the ILogger to retrieve</param>
            <returns>An instance of an ILogger or null if one with that name is
            not found</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.GetLogger(System.String,System.String)">
            <summary>
            Returns an ILogger instance matching the specified loggerName.
            </summary>
            <param name="tag">The tag to be used.</param>
            <param name="endpointName">The name of the logging service endpoint.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Returns an ILogger instance responsible for logging information
            for a specific type
            </summary>
            <param name="type">The type whose ILogger implementation should
            be retrieved.</param>
            <returns>An instance of an ILogger</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.GetLogger(System.Type,System.String)">
            <summary>
            Returns an ILogger instance responsible for logging information
            for a specific type
            </summary>
            <param name="typeTag">The type whose name should be used as a tag.</param>
            <param name="endpointName">The name of the logging service endpoint.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.LogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            Returns an instance of an ILogger in the Assembly specified by the 
            assembly parameter and the typeName string.
            </summary>
            <param name="assembly">An Assembly that the type should be loaded
            from</param>
            <param name="typeName">The type name of the ILogger instance</param>
            <returns>An instance of an ILogger or null if one is not found
            </returns>
        </member>
        <member name="T:Apprenda.Services.Logging.NullLogger">
            <summary>
            The <see cref="T:Apprenda.Services.Logging.NullLogger"/> is a functionless logger that is used by Apprenda Logging as a degredation target in case
            an application does not configure a logger. This prevents Apprenda Logging from adversely affecting functionality of a dependent piece
            of source code.
            </summary>
        </member>
        <member name="P:Apprenda.Services.Logging.NullLogger.IsDebugEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Debug
            requests
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.NullLogger.IsInfoEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Info
            requests
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.NullLogger.IsWarnEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Warn
            requests
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.NullLogger.IsErrorEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Error
            requests
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.NullLogger.IsFatalEnabled">
            <summary>
            Gets whether or not the logger is currently setup to process LogLevel.Fatal
            requests
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.NullLogger.IsOff">
            <summary>
            Determines whether or not the logger is on/off
            </summary>
            <value></value>
            <seealso cref="T:Apprenda.Services.Logging.LogLevel"/>
        </member>
        <member name="P:Apprenda.Services.Logging.NullLogger.WrappedLogger">
            <summary>
            Retrieves the underlying logger implementation, allowing a calling client
            to access and modify custom implementation properties directly.
            </summary>
            <value></value>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Debug(System.Object)">
            <summary>
            Debug requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Debug)
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Debug(System.Object,System.Exception)">
            <summary>
            Debug requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Debug)
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Debug overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Debug("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Debug overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Debug(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Info(System.Object)">
            <summary>
            Info requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Info)
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Info(System.Object,System.Exception)">
            <summary>
            Info requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Info)
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Info overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Info("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Info overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Info(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Warn(System.Object)">
            <summary>
            Warn requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Warn)
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Warn(System.Object,System.Exception)">
            <summary>
            Warn requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Warn)
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Warn overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Warn("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Warn overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Warn(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Error(System.Object)">
            <summary>
            Error requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Error)
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Error(System.Object,System.Exception)">
            <summary>
            Error requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Error)
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Error overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Error("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Error overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Error(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Fatal(System.Object)">
            <summary>
            Fatal requires the logger to log the provided message string. The string
            will be formatted with any configured formatting options. It is equivalent
            to calling Logger.Log(string,LogLevel.Fatal)
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Fatal requires the logger to log the provided message string along with a
            origin Exception. The string/Exception pair will be formatted with any
            configured formatting options. It is equivalent to calling
            Logger.Log(string,Exception,LogLevel.Fatal)
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that originated the log call</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Fatal overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            int i = 10;
            long j = 9;
            log.Fatal("Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Given a scriptable position string (similar to those used in Console.WriteLine),
            this Fatal overload injects the extra params at their respective positions.
            It is equivalent to calling Logger.Log(string,LogLevel,params object[]);
            </summary>
            <param name="formatProvider">The IFormatProvider instance to use when
            formatting the final log string</param>
            <param name="message">The message to log</param>
            <param name="objects">An array of objects to place in their respective
            positions in the message when the message is logged</param>
            <example>This example shows how to use the scriptable position strings and the
            log call.
            <code>
            ILogger log = LogManager.GetLogger("MyLogger");
            IFormatProvider fProvider = new MyFormatProvider(); //Implements IFormatProvider
            int i = 10;
            long j = 9;
            log.Fatal(fProvider, "Hello number {0}. Good bye number {1}", i, j);
            </code>
            </example>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Log(System.Object,Apprenda.Services.Logging.LogLevel)">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter.
            </summary>
            <param name="message">The message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Log(System.Object,System.Exception,Apprenda.Services.Logging.LogLevel)">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter.
            </summary>
            <param name="message">The message to log</param>
            <param name="e">The Exception that caused the log request</param>
            <param name="logLevel">The LogLevel to log at</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Log(System.String,Apprenda.Services.Logging.LogLevel,System.Object[])">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter. This overload is a scriptable message
            overload that works similar to Console.WriteLine(string, params).
            </summary>
            <param name="message">The scriptable message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
            <param name="objects">The parameters to inject into the scriptable message</param>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogger.Log(System.IFormatProvider,System.String,Apprenda.Services.Logging.LogLevel,System.Object[])">
            <summary>
            Log is a generic logging request to the logger where the level to log at is
            determined by the LogLevel parameter. This overload is a scriptable message
            overload that works similar to Console.WriteLine(string, params).
            </summary>
            <param name="formatProvider">The IFormatProvider implementation to use</param>
            <param name="message">The scriptable message to log</param>
            <param name="logLevel">The LogLevel to log at</param>
            <param name="objects">The parameters to inject into the scriptable message</param>
        </member>
        <member name="T:Apprenda.Services.Logging.NullLogManager">
            <summary>
            A <see cref="T:Apprenda.Services.Logging.NullLogManager"/> produces functionless, placeholder <see cref="T:Apprenda.Services.Logging.NullLogger"/> instances.
            </summary>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogManager.GetLogger">
            <returns>A new <see cref="T:Apprenda.Services.Logging.NullLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogManager.GetLogger(System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.NullLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogManager.GetLogger(System.String,System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.NullLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogManager.GetLogger(System.Type)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.NullLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogManager.GetLogger(System.Type,System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.NullLogger"/> instance.</returns>
        </member>
        <member name="M:Apprenda.Services.Logging.NullLogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <returns>A new <see cref="T:Apprenda.Services.Logging.NullLogger"/> instance.</returns>
        </member>
        <member name="T:SaaSGridAPI.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.ApplicationContext_NotValidWhenImpersonating">
            <summary>
              Looks up a localized string similar to The requested functionality is not available when application context is being impersonated..
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Error_AlreadyActive">
            <summary>
              Looks up a localized string similar to The {0} is already active.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Error_ContextScopeUnexpectedState">
            <summary>
              Looks up a localized string similar to Cannot dispose of the context scope. The context state was modified and not reverted to the original context scope state. For example, if you have create new identity context&apos;s (e.g. TenantContext, ProviderContext), make sure you dispose of those properly first. Also, do not dispose any context items you did not create (i.e. only cleanup after yourself, not any further).
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Error_NoSessionContextPresent">
            <summary>
              Looks up a localized string similar to Cannot acquire a {0} since no session exists.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Error_NullApplicationContext">
            <summary>
              Looks up a localized string similar to You cannot create an application context with a null or empty id..
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Error_SessionContextPresent">
            <summary>
              Looks up a localized string similar to A session already exists, so one may not be re-established..
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Intermediary_MustBeVoid">
            <summary>
              Looks up a localized string similar to Service calls made within the scope of an intermediary (e.g. scheduling) cannot have return values. &apos;{0}&apos; has a return value and is not &apos;void&apos;.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Intermediary_NotOneWay">
            <summary>
              Looks up a localized string similar to Service calls made within the scope of an intermediary (e.g. scheduling) cannot be one way service calls if they participate in a transaction. &apos;{0}&apos; is an operation whose OperationContract is marked with &apos;IsOneWay=true&apos; and it is participating in a transaction. You can either remove it from the transaction or not have &apos;IsOneWay=true&apos;..
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Intermediary_UnreconcilableStackPop">
            <summary>
              Looks up a localized string similar to Intermediaries are governed by scoping rules. You can only dispose of the innermost intermediary scope, but you&apos;ve attempted to dispose of something other than the innermost scope..
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Runtime_AdjustmentDetailDescriptionEmpty">
            <summary>
              Looks up a localized string similar to The adjustment description cannot be null or empty..
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Runtime_AssessmentReportEmptyAssessmentDetails">
            <summary>
              Looks up a localized string similar to At least one assessment detail must be provided in order to create a valid assessment report..
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Messages.Runtime_ExpectationVectorMessageEmpty">
            <summary>
              Looks up a localized string similar to The expectation description must contain a valid string. A blank or empty string is not acceptable..
            </summary>
        </member>
        <member name="T:SaaSGridAPI.Schemas">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Schemas.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Schemas.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SaaSGridAPI.Schemas.AddOnManifestXmlSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;appManifest&quot; targetNamespace=&quot;http://schemas.apprenda.com/AddonManifest&quot; xmlns=&quot;http://schemas.apprenda.com/AddonManifest&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; attributeFormDefault=&quot;qualified&quot; elementFormDefault=&quot;qualified&quot;&gt;
              &lt;xs:element name=&quot;addonManifest&quot;&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:all&gt;
                    &lt;xs:element name=&quot;properties&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;1&quot;&gt;
                      &lt;xs:annotation&gt;
                        &lt;xs:documentation&gt;
                          Represen [rest of string was truncated]&quot;;.
             </summary>
        </member>
    </members>
</doc>
